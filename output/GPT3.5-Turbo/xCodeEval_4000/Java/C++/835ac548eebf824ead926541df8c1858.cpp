#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

class Main {
public:
    vector<int> preCalc = {};

    int maxn = 300000001;
    int mod = 200000;

    void solve() {
        int l, r;
        cin >> l >> r;
        int res = get(r) - get(l - 1);
        cout << res << endl;
    }

    int get(int n) {
        int x = 0;
        int i = 0;
        int res = 0;
        for (; x + mod - 1 <= n; x += mod, i++) {
            res += preCalc[i];
        }
        while (x <= n) {
            if (ok(x)) {
                res++;
            }
            x++;
        }
        return res;
    }

    bool ok(int p) {
        if (p == 2) {
            return true;
        }
        if (p < 2) {
            return false;
        }
        if (p % 4 != 1) {
            return false;
        }
        for (int i = 2; i * i <= p; i++) {
            if (p % i == 0) {
                return false;
            }
        }
        return true;
    }
};

int main() {
    Main obj;
    obj.solve();
    return 0;
}
