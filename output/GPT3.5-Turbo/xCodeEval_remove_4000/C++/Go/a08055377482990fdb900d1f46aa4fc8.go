package main

import (
	"fmt"
	"sort"
)

var (
	t, la, ma, at int
	to            [1000005]int
	p             [1000005]int
	pp            [1000005]pair
	s             set
	m             [300]map[int]int
	x             [289][289]int
	xx            [289][299]byte = [289][299]byte{"", "1", "21", "321", "4321", "54321", "654321", "7654321", "21123456", "321123451", "4321123421", "54321123321", "654321124321", "7654321154321", "43222345211234", "543222343211231", "6543222343211221", "76543222543211321", "876543226543214321", "6543333443222321123", "76543333543222321121", "876543336543224321121", "987654337654325432132102176543354322321215433322133654322432112101432221103243222122654322432132124322212232111", "87654323654321543214322336543224321232122432221212254321132101211132111011213212211254321243213222321221122101110321216543234322323432322232112132224354322321221322122212021132354321321222321113211213224321221011211021102543232123221212343213212211", "987654327654325432254334476543254321432335432321232654321543224323432132232154324334654321543243344321322143223324323276543454334345434333432232433354654334323324332333231322434654324323334322232223243354323321223221212134321321221211"}
)

type pair struct {
	first  []int
	second int
}

type set map[vector]int

func go(aa []int, bb, cc int) {
	q := make([]pair, 0)
	q = append(q, pair{aa, bb, cc})
	s[aa] = true
	for len(q) > 0 {
		a := q[0].first
		b := q[0].second
		c := q[0].third
		q = q[1:]
		it := m[at][b]
		if it == 0 {
			m[at][b] = c
		} else {
			m[at][b] = min(it, c)
		}
		if c >= 10 {
			continue
		}
		c++
		for i := 0; i+1 < len(a); i++ {
			if a[i] != a[i+1] {
				a[i]--
				if !s[a] {
					q = append(q, pair{a, b / (a[i] + 1) * a[i], c})
					s[a] = true
				}
				a[i]++
			}
		}
		if len(a) > 0 {
			if a[len(a)-1] == 2 {
				a = a[:len(a)-1]
				if !s[a] {
					q = append(q, pair{a, b / 2, c})
					s[a] = true
				}
				a = append(a, 2)
			} else {
				a[len(a)-1]--
				if !s[a] {
