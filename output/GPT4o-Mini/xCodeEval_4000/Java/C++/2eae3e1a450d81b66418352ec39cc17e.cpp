#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <cmath>
#include <bitset>
#include <locale>
#include <iomanip>
#include <gmpxx.h>

using namespace std;

class Main {
private:
    static const string TASKNAME;
    static const int maxNum = (int)3e8;
    static const int segSize = 250000;
    static const int certainty = 30;
    vector<int> ans = {10996, 9735, 9345, 9099, 9016, 8831, 8743, 8651, 8555, 8461, 8477, 8374, 8419, 8294, 8278, 8228, 8222, 8200, 8141, 8128, 8054, 8035, 8037, 8013, 7984, 7955, 7992, 7997, 7901, 7812, 7930, 7856, 7843, 7793, 7874, 7831, 7784, 7757, 7803, 7736, 7736, 7748, 7729, 7686, 7728, 7710, 7756, 7719, 7653, 7663, 7660, 7600, 7591, 7631, 7571, 7612, 7572, 7607, 7573, 7549, 7521, 7440, 7557, 7621, 7484, 7574, 7457, 7572, 7492, 7496, 7512, 7502, 7480, 7433, 7457, 7484, 7444, 7482, 7388, 7500, 7376, 7386, 7480, 7358, 7378, 7523, 7380, 7438, 7306, 7319, 7412, 7369, 7400, 7380, 7323, 7319, 7380, 7389, 7328, 7339, 7293, 7314, 7361, 7306, 7281, 7411, 7312, 7332, 7274, 7257, 7358, 7261, 7299, 7325, 7264, 7284, 7226, 7302, 7245, 7321, 7275, 7271, 7290, 7255, 7209, 7229, 7228, 7209, 7230, 7165, 7251, 7227, 7244, 7201, 7201, 7256, 7095, 7182, 7140, 7236, 7181, 7199, 7234, 7115, 7188, 7218, 7180, 7163, 7265, 7109, 7133, 7180, 7247, 7160, 7150, 7197, 7161, 7178, 7159, 7097, 7114, 7194, 7155, 7121, 7116, 7149, 7072, 7080, 7128, 7163, 7017, 7084, 7085, 7148, 7054, 7202, 7060, 7100, 7091, 7104, 7045, 7119, 7101, 7050, 7052, 7082, 7111, 7141, 7050, 7099, 7058, 7106, 7048, 7096, 7037, 7075, 7050, 7078, 7060, 7070, 7032, 7042, 7084, 7011, 6975, 7086, 6986, 7033, 7042, 6972, 7060, 6996, 7008, 7003, 7006, 7035, 6993, 6950, 7049, 7041, 7057, 6940, 7025, 7013, 7070, 6973, 7011, 6917, 6969, 7080, 6982, 6986, 6951, 6976, 6995, 6970, 6954, 6921, 6975, 7049, 6990, 7019, 7011, 6956, 6918, 6963, 6888, 6944, 7043, 6924, 6917, 6963, 6966, 6944, 6943, 7015, 7011, 6983, 6906, 6931, 6982, 6985, 6939, 6915, 6991, 6935, 6982, 6875, 6890, 7038, 6921, 6945, 6895, 6981, 6949, 6891, 6949, 6936, 6946, 6868, 6937, 6905, 6931, 6838, 6927, 6928, 6916, 6889, 6910, 6938, 6991, 6884, 6825, 6904, 6951, 6854, 6842, 6929, 6903, 6914, 6867, 6967, 6904, 6942, 6850, 6866, 6896, 6898, 6931, 6872, 6805, 6850, 6885, 6872, 6885, 6806, 6890, 6870, 6883, 6800, 6859, 6930, 6812, 6897, 6936, 6843, 6892, 6907, 6811, 6838, 6859, 6946, 6751, 6848, 6888, 6961, 6787, 6892, 6769, 6879, 6794, 6926, 6832, 6795, 6844, 6856, 6828, 6776, 6885, 6793, 6906, 6888, 6858, 6850, 6783, 6835, 6868, 6823, 6755, 6820, 6785, 6869, 6783, 6782, 6868, 6793, 6745, 6821, 6824, 6876, 6868, 6777, 6752, 6861, 6750, 6826, 6830, 6733, 6840, 6905, 6776, 6832, 6768, 6852, 6771, 6778, 6850, 6800, 6786, 6760, 6829, 6792, 6771, 6752, 6822, 6741, 6783, 6767, 6825, 6768, 6800, 6737, 6807, 6757, 6793, 6766, 6759, 6779, 6780, 6829, 6806, 6763, 6690, 6796, 6756, 6779, 6827, 6775, 6731, 6774, 6768, 6765, 6777, 6703, 6796, 6715, 6760, 6704, 6835, 6805, 6785, 6661, 6779, 6814, 6777, 6773, 6802, 6772, 6717, 6842, 6669, 6736, 6753, 6759, 6741, 6724, 6816, 6793, 6810, 6685, 6742, 6739, 6767, 6700, 6664, 6661, 6719, 6729, 6752, 6705, 6774, 6714, 6724, 6716, 6727, 6694, 6713, 6693, 6699, 6749, 6711, 6733, 6782, 6723, 6699, 6677, 6728, 6743, 6753, 6701, 6705, 6650, 6714, 6727, 6739, 6705, 6696, 6683, 6707, 6696, 6730, 6746, 6735, 6735, 6727, 6737, 6666, 6764, 6659, 6742, 6736, 6642, 6668, 6742, 6751, 6617, 6729, 6691, 6723, 6741, 6712, 6681, 6719, 6631, 6800, 6762, 6705, 6704, 6744, 6628, 6612, 6674, 6699, 6721, 6706, 6737, 6752, 6621, 6690, 6686, 6708, 6630, 6686, 6707, 6632, 6684, 6677, 6765, 6665, 6677, 6706, 6666, 6600, 6618, 6626, 6731, 6705, 6609, 6592, 6749, 6682, 6582, 6610, 6642, 6662, 6711, 6665, 6748, 6706, 6717, 6671, 6619, 6657, 6592, 6607, 6668, 6725, 6668, 6700, 6653, 6622, 6631, 6696, 6691, 6649, 6681, 6714, 6656, 6661, 6608, 6679, 6648, 6598, 6707, 6665, 6663, 6641, 6673, 6630, 6692, 6603, 6634, 6601, 6659, 6651, 6588, 6645, 6620, 6663, 6635, 6601, 6647, 6607, 6562, 6646, 6613, 6620, 6676, 6553, 6555, 6642, 6588, 6604, 6630, 6750, 6633, 6658, 6574, 6594, 6651, 6626, 6573, 6619, 6638, 6700, 6655, 6669, 6618, 6575, 6659, 6586, 6595, 6641, 6595, 6453, 6650, 6593, 6623, 6637, 6630, 6609, 6633, 6581, 6647, 6679, 6554, 6619, 6547, 6630, 6621, 6632, 6585, 6624, 6600, 6704, 6665, 6557, 6606, 6620, 6569, 6568, 6613, 6538, 6635, 6524, 6702, 6513, 6606, 6567, 6677, 6537, 6617, 6577, 6594, 6633, 6574, 6660, 6710, 6562, 6537, 6637, 6618, 6511, 6580, 6632, 6618, 6564, 6558, 6619, 6604, 6604, 6563, 6593, 6671, 6617, 6553, 6583, 6601, 6528, 6594, 6610, 6603, 6588, 6558, 6551, 6598, 6573, 6609, 6601, 6591, 6564, 6634, 6641, 6520, 6596, 6591, 6585, 6632, 6630, 6622, 6580, 6527, 6560, 6501, 6557, 6605, 6586, 6594, 6544, 6507, 6558, 6519, 6549, 6577, 6569, 6563, 6601, 6591, 6613, 6585, 6584, 6585, 6489, 6593, 6580, 6552, 6547, 6589, 6603, 6610, 6434, 6594, 6608, 6534, 6579, 6502, 6623, 6611, 6543, 6618, 6506, 6513, 6501, 6421, 6561, 6562, 6439, 6548, 6506, 6581, 6609, 6597, 6529, 6545, 6613, 6539, 6542, 6575, 6520, 6610, 6574, 6485, 6596, 6528, 6507, 6564, 6484, 6544, 6483, 6497, 6471, 6583, 6484, 6584, 6575, 6496, 6486, 6623, 6501, 6580, 6669, 6472, 6500, 6527, 6616, 6568, 6488, 6596, 6573, 6513, 6489, 6532, 6527, 6629, 6481, 6586, 6466, 6563, 6568, 6540, 6514, 6460, 6505, 6522, 6593, 6475, 6509, 6568, 6491, 6566, 6516, 6479, 6501, 6480, 6520, 6498, 6446, 6616, 6621, 6485, 6556, 6500, 6504, 6478, 6594, 6611, 6489, 6531, 6501, 6553, 6563, 6551, 6521, 6520, 6521, 6495, 6521, 6485, 6496, 6593, 6562, 6543, 6566, 6502, 6587, 6522, 6511, 6474, 6466, 6550, 6481, 6451, 6566, 6406, 6521, 6473, 6527, 6534, 6496, 6442, 6552, 6498, 6508, 6436, 6565, 6479, 6531, 6470, 6572, 6442, 6620, 6480, 6539, 6464, 6580, 6388, 6508, 6571, 6461, 6618, 6487, 6385, 6509, 6532, 6506, 6472, 6565, 6547, 6531, 6489, 6330, 6463, 6506, 6394, 6542, 6488, 6496, 6478, 6394, 6535, 6492, 6495, 6538, 6431, 6482, 6506, 6504, 6528, 6466, 6525, 6514, 6496, 6426, 6435, 6532, 6432, 6521, 6372, 6532, 6514, 6467, 6547, 6479, 6457, 6536, 6462, 6494, 6553, 6470, 6462, 6533, 6460, 6527, 6499, 6509, 6473, 6428, 6531, 6417, 6432, 6524, 6542, 6475, 6472, 6524, 6498, 6428, 6488, 6389, 6443, 6403, 6477, 6437, 6444, 6506, 6496, 6462, 6443, 6510, 6574, 6493, 6506, 6440, 6461, 6425, 6432, 6474, 6463, 6407, 6499, 6379, 6475, 6483, 6507, 6456, 6497, 6468, 6397, 6469, 6449, 6475, 6416, 6484, 6578, 6398, 6411, 6454, 6404, 6523, 6390, 6394, 6449, 6476, 6518, 6505, 6416, 6496, 6467, 6482, 6518, 6443, 6470, 6453, 6458, 6489, 6401, 6395, 6573, 6504, 6458, 6381, 6490, 6446, 6481, 6522, 6456, 6456, 6480, 6393, 6400, 6488, 6475, 6457, 6531, 6458, 6474, 6439, 6399, 6499, 6574, 6408, 6490, 6568, 6372, 6402, 6425, 6475, 6465, 6425, 6494, 6427, 6538, 6452, 6511, 6403, 6429, 6385, 6410, 6446, 6418, 6483, 6420, 6426, 6443, 6502, 6492, 6435, 6423, 6344, 6421, 6405, 6520, 6444, 6403, 6385, 6371, 6514, 6436, 6399, 6503, 6380, 6375, 6356, 6521, 6471, 6458, 6461, 6414, 6522, 6422, 6362, 6437, 6482, 6443, 6433, 6403, 6419, 6457, 6396, 6439, 6481, 6419, 6358, 6377, 6440, 6412, 6412, 6360, 6514, 6440, 6392, 6409, 6474, 6331, 6462, 6463, 6440, 6415, 6353, 6428, 6405, 6411, 6390, 6453, 6504, 6396, 6450, 6381, 6437, 6436, 6300, 6489, 6436, 6390, 6387, 6365, 6408, 6432, 6505, 6456, 6399, 6410, 6405, 6428, 6450, 6452, 6276, 6417, 6502, 6393, 6376, 6460, 6407, 6512, 6457, 6376, 6350, 6497, 6421, 6432, 6332, 6334, 6477, 6407, 6391, 6417, 6450, 6444, 6407, 6436, 6323, 6431, 6393, 6405, 6362, 6383, 6527, 6344, 6438, 6382, 6387, 6432, 6360, 6482, 6341, 6338, 6354, 6393, 6373, 6410, 0};

    void solve() {
        int l, r;
        cin >> l >> r;

        int ansCount = 0;
        while (l <= r && l < 3) {
            if (l == 2) {
                ++ansCount;
            }
            ++l;
        }

        while (r >= l && r % segSize != 0) {
            if (r % 4 == 1 && mpz_probab_prime_p(r, certainty)) {
                ++ansCount;
            }
            --r;
        }

        while (l <= r && l % segSize != 0) {
            if (l % 4 == 1 && mpz_probab_prime_p(l, certainty)) {
                ++ansCount;
            }
            ++l;
        }

        if (l < r) {
            while (l != r) {
                ansCount += ans[r / segSize - 1];
                r -= segSize;
            }
        }

        if (l == r && l % 4 == 1 && mpz_probab_prime_p(l, certainty)) {
            ++ansCount;
        }

        cout << ansCount << endl;
    }

public:
    void run() {
        try {
            locale::global(locale("en_US.UTF-8"));
            solve();
        } catch (exception &e) {
            cerr << e.what() << endl;
            exit(13);
        }
    }
};

const string Main::TASKNAME = "c";

int main() {
    Main().run();
    return 0;
}
