

import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.Scanner;

public class Main {

    static class Reader {
        final private int BUFFER_SIZE = 1 << 16;
        private DataInputStream din;

        private byte[] buffer;
        private int bufferPointer, bytesRead;

        public Reader() {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public Reader(String file_name) throws IOException {
            din = new DataInputStream(
                    new FileInputStream(file_name));
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public String readLine() throws IOException {
            byte[] buf = new byte[64]; 

            int cnt = 0, c;
            while ((c = read()) != -1) {
                if (c == '\n') {
                    if (cnt != 0) {
                        break;
                    } else {
                        continue;
                    }
                }
                buf[cnt++] = (byte) c;
            }
            return new String(buf, 0, cnt);
        }

        public int nextInt() throws IOException {
            int ret = 0;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');

            if (neg)
                return -ret;
            return ret;
        }

        public long nextLong() throws IOException {
            long ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');
            if (neg)
                return -ret;
            return ret;
        }

        public double nextDouble() throws IOException {
            double ret = 0, div = 1;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();

            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');

            if (c == '.') {
                while ((c = read()) >= '0' && c <= '9') {
                    ret += (c - '0') / (div *= 10);
                }
            }

            if (neg)
                return -ret;
            return ret;
        }

        private void fillBuffer() throws IOException {
            bytesRead = din.read(buffer, bufferPointer = 0,
                    BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }

        private byte read() throws IOException {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }

        public void close() throws IOException {
            if (din == null)
                return;
            din.close();
        }
    }





    




















































































































































































































































































































    static boolean ff = false;

    
























































































































































































    












































    












































































































































































































    static long gcd(long a, long b) {
        if (b == 0)
            return a;
        return gcd(b, a % b);
    }








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































    public static void main(String[] args) throws IOException {
         Scanner s=new Scanner(System.in);
         int t=s.nextInt();

         for(int j=0;j<t;j++){
             int n=s.nextInt();
             String str=s.next();
             long[] prefix=new long[n];
             long[] suffix=new long[n];
             Arrays.fill(prefix,(long)0);
             Arrays.fill(suffix,(long)0);
             long tot=0;
             for(int i=0;i<n;i++){
                 if(str.charAt(i)=='*'){
                     if(i==0){
                         prefix[i]=(long)0;
                     }else{
                         prefix[i]= (long)(( prefix[i-1]) );
                     }

                     tot++;
                 }else{
                     if(i==0){
                         prefix[i]=(long)((long)tot );

                     }else{
                         prefix[i]=(long)((long)tot+ (long)(prefix[i-1]) );

                     }
                 }
             }
             tot=(long)0;
             for(int i=n-1;i>=0;i--){
                 if(str.charAt(i)=='*'){
                     if(i==n-1){
                         suffix[i] = ((long)0 );
                     }else{
                         suffix[i] = (long)((long)( suffix[i+1]) );
                     }
                     

                     tot++;
                 }else{
                     if(i==n-1){
                         suffix[i] = (long)((long)tot );
                     }else{
                     suffix[i] = (long)((long)tot+(long)( suffix[i+1]) );
                     }

                 }
             }
             long min=Long.MAX_VALUE;
             for(int i=0;i<n;i++){
                 min=Math.min((long)((long)prefix[i]+(long)suffix[i]),min);
             }
             System.out.println(min);


         }



    }

    }








