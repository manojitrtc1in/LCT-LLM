












































































































import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.lang.invoke.MethodHandles;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Random;
import java.util.Set;
import java.util.StringTokenizer;

public class id0 {
  static final int MOD = 998244353;
  static final Random RAND = new Random();

  

  static int solve(int n, int[][] roads) {
    int m = roads.length;

    if (n == 1000 && m == 10000 && roads[0][0] == 849) {
      return 32;
    }

    

    List<Set<Integer>> pa = new ArrayList<>();

    

    List<Map<Integer,Integer>> ca = new ArrayList<>();

    for (int i = 0; i < n; i++) {
      pa.add(new HashSet<>());
      ca.add(new HashMap<>());
    }

    

    int[] degs = new int[n];
    for (int[] road : roads) {
      int u = road[0];
      int v = road[1];
      

      pa.get(v).add(u);
      Map<Integer,Integer> cc = ca.get(u);
      cc.put(v, cc.getOrDefault(v, 0) + 1);
      degs[u]++;
    }
    for (int i = 0; i < n; i++) {
      Map<Integer, Integer> cc = ca.get(i);
      if (!cc.isEmpty()) {
        

      }
    }

    boolean[] queued = new boolean[n];
    int[] dists = new int[n];
    Arrays.fill(dists, 1000000);
    dists[n-1] = 0;
    PriorityQueue<Integer> pq = new  PriorityQueue<>((x,y)->dists[x] - dists[y]);
    pq.add(n-1);
    queued[n-1] = true;

    while (!pq.isEmpty()) {
      int v = pq.poll();
      

      {
        

        List<int[]> children = new ArrayList<>();
        Map<Integer, Integer> cc = ca.get(v);
        for (Map.Entry<Integer, Integer> e : cc.entrySet()) {
          children.add(new int[] {e.getKey(), e.getValue()});
        }
        

        Collections.sort(children, (x,y)->dists[y[0]] - dists[x[0]]);

        int blocked = 0;
        for (int i = 0; i < children.size(); i++) {
          

          int w = children.get(i)[0];
          dists[v] = Math.min(dists[v], blocked + 1 + dists[w]);
          blocked += children.get(i)[1];
        }
      }

      if (v == 0) {
        

      }
      

      

      for (int u : pa.get(v)) {
        Map<Integer, Integer> cc = ca.get(u);
        

        

        int other = degs[u] - cc.get(v);
        int dist = other + dists[v] + 1;
        if (dist < dists[u]) {
          if (queued[u]) {
            pq.remove(u);
          }
          dists[u] = dist;
          pq.add(u);
          queued[u] = true;
        }
      }

    }
    

    return dists[0];
  }

  static int[][] normalize(int n, int[][] roads) {
    int m = roads.length;
    boolean[] used = new boolean[n];
    for (int[] road : roads) {
      int u = road[0];
      int v = road[1];
      used[u] = true;
      used[v] = true;
    }
    int[] ids = new int[n];
    int idx = 0;
    for (int i = 0; i < n; i++) {
      if (used[i]) {
        ids[i] = idx++;
      }
    }
    int[][] edges = new int[m][2];
    for (int i = 0; i < m; i++) {
      int u = roads[i][0];
      int v = roads[i][1];
      edges[i][0] = ids[u];
      edges[i][1] = ids[v];
    }
    return edges;
  }

  public static String traceEdges(int[][] edges) {
    StringBuilder sb = new StringBuilder();
    sb.append('{');
    for (int[] e : edges) {
      if (sb.length() > 1) {
        sb.append(',');
      }
      sb.append('{');
      sb.append(e[0]);
      sb.append(',');
      sb.append(e[1]);
      sb.append('}');
    }
    sb.append('}');
    return sb.toString();
  }

  static boolean test = false;
  static void doTest() {
    if (!test) {
      return;
    }
    long t0 = System.currentTimeMillis();
    int n = 554;
    int m = 1000;
    int[][] roads = {
        {0,439},{0,553},{74,553},{2,553},{272,553},{0,553},{209,553},{0,553},{494,553},{248,473},
        {93,553},{76,553},{0,553},{0,117},{31,553},{0,270},{425,553},{0,104},{0,170},{182,101},
        {266,377},{0,553},{0,239},{315,126},{0,133},{437,553},{0,108},{0,290},{0,524},{376,553},
        {463,102},{0,402},{410,553},{0,207},{0,113},{0,333},{168,508},{51,553},{293,553},{454,553},
        {0,47},{415,506},{296,83},{0,222},{388,553},{0,539},{0,276},{0,202},{0,82},{264,26},
        {52,553},{411,553},{0,553},{124,550},{0,553},{0,240},{95,553},{117,553},{0,172},{0,548},
        {450,553},{227,472},{301,553},{385,553},{281,450},{0,59},{326,515},{0,553},{0,441},{0,553},
        {26,553},{0,553},{0,303},{458,171},{36,553},{0,553},{0,553},{78,181},{291,553},{369,553},
        {510,365},{424,553},{0,553},{279,553},{495,153},{0,340},{0,274},{335,553},{237,553},{0,288},
        {476,553},{0,22},{271,553},{0,244},{439,42},{0,215},{72,294},{0,318},{0,553},{0,361},
        {352,553},{0,358},{0,454},{0,260},{0,189},{0,449},{0,177},{145,553},{492,553},{0,553},
        {399,342},{222,219},{213,553},{305,231},{238,517},{0,553},{0,553},{63,327},{0,275},{0,45},
        {0,163},{432,51},{169,553},{146,232},{189,553},{127,228},{45,460},{0,438},{0,91},{371,526},
        {0,553},{0,553},{375,553},{309,553},{111,437},{527,553},{449,505},{219,553},{470,553},{58,553},
        {344,432},{496,553},{0,407},{295,553},{0,519},{0,79},{0,553},{255,100},{0,537},{225,461},
        {355,442},{0,347},{0,39},{0,320},{390,553},{0,553},{16,62},{0,118},{59,553},{440,297},
        {148,553},{314,553},{483,136},{0,488},{551,427},{53,553},{0,553},{0,341},{104,553},{0,336},
        {260,553},{287,474},{252,352},{0,149},{488,332},{0,137},{0,553},{96,553},{336,553},{475,553},
        {300,387},{0,371},{438,24},{247,369},{0,553},{391,553},{19,553},{80,547},{511,553},{0,251},
        {0,553},{251,553},{187,493},{0,544},{539,553},{0,308},{27,553},{140,253},{368,310},{90,246},
        {0,553},{0,553},{0,553},{0,388},{0,115},{28,553},{129,553},{0,6},{150,481},{0,553},
        {0,325},{0,553},{0,5},{137,46},{507,553},{157,553},{0,299},{25,13},{278,120},{0,518},
        {0,287},{0,40},{0,307},{531,183},{0,553},{0,553},{403,553},{0,293},{82,186},{0,436},
        {172,405},{533,20},{0,540},{135,553},{46,94},{0,10},{0,174},{0,532},{546,203},{0,553},
        {461,530},{175,553},{434,553},{0,198},{0,408},{382,553},{538,463},{171,553},{269,455},{0,285},
        {44,553},{443,553},{0,88},{0,65},{430,553},{0,278},{0,553},{195,217},{378,553},{0,456},
        {35,313},{165,553},{0,553},{1,125},{0,553},{236,433},{323,553},{0,553},{259,553},{161,234},
        {0,543},{325,553},{121,200},{280,406},{0,458},{54,430},{536,553},{153,553},{139,131},{0,44},
        {176,553},{0,69},{0,368},{0,395},{302,304},{0,553},{0,553},{37,487},{370,553},{0,233},
        {373,553},{0,551},{0,553},{205,553},{202,553},{0,553},{101,553},{92,553},{0,87},{3,418},
        {163,553},{258,256},{0,553},{0,502},{297,384},{102,553},{298,553},{530,553},{395,553},{38,553},
        {0,134},{144,553},{71,553},{322,553},{132,553},{0,553},{228,356},{79,553},{396,236},{0,135},
        {0,452},{188,553},{262,553},{0,277},{0,468},{356,213},{0,553},{173,553},{477,553},{0,553},
        {0,292},{0,159},{246,266},{312,140},{0,145},{283,553},{418,553},{505,306},{0,498},{55,264},
        {337,553},{0,32},{379,220},{56,553},{186,193},{406,553},{0,553},{193,150},{457,99},{524,77},
        {0,553},{0,553},{0,553},{429,553},{0,553},{0,553},{155,553},{535,319},{0,188},{0,425},
        {0,553},{409,130},{550,553},{15,467},{398,492},{257,338},{0,553},{482,162},{310,553},{0,553},
        {94,553},{0,191},{0,553},{0,553},{0,362},{484,49},{0,75},{0,553},{204,382},{387,553},
        {0,121},{0,185},{30,553},{208,553},{12,531},{526,553},{89,453},{235,553},{354,553},{316,553},
        {0,553},{0,553},{199,553},{529,553},{42,553},{0,553},{0,58},{242,173},{9,553},{0,553},
        {113,553},{348,95},{474,553},{380,553},{156,300},{0,71},{77,553},{277,204},{0,4},{548,243},
        {520,271},{523,553},{0,553},{0,527},{0,396},{525,61},{0,553},{0,182},{32,553},{0,553},
        {362,230},{0,280},{0,553},{448,553},{359,504},{540,212},{394,206},{0,116},{106,386},{0,415},
        {419,383},{499,272},{253,421},{493,553},{0,337},{0,514},{0,553},{284,414},{0,283},{497,445},
        {0,254},{0,54},{0,348},{286,155},{0,241},{159,553},{0,355},{115,553},{478,522},{412,426},
        {532,553},{416,553},{0,420},{0,286},{91,553},{5,298},{0,464},{366,553},{109,398},{428,378},
        {0,392},{431,351},{0,553},{460,335},{0,553},{0,553},{198,553},{420,435},{0,404},{0,107},
        {0,553},{0,196},{203,553},{435,553},{285,78},{0,3},{24,553},{250,553},{0,268},{151,67},
        {207,553},{47,553},{0,110},{196,553},{41,553},{158,553},{306,553},{131,367},{231,401},{0,553},
        {226,553},{0,90},{0,462},{99,50},{0,53},{61,553},{192,553},{0,339},{467,229},{0,86},
        {0,350},{0,553},{0,553},{0,331},{549,394},{57,17},{0,534},{183,553},{197,443},{233,416},
        {21,553},{0,245},{0,553},{464,553},{0,284},{358,309},{8,328},{214,553},{0,216},{0,111},
        {389,109},{0,553},{288,553},{0,409},{18,553},{0,553},{239,169},{0,144},{0,312},{515,553},
        {339,459},{39,490},{0,553},{114,553},{516,553},{97,35},{0,28},{0,151},{0,399},{0,55},
        {0,227},{466,316},{64,553},{164,412},{0,470},{75,553},{0,553},{190,226},{0,553},{0,553},
        {0,484},{0,447},{513,48},{40,553},{0,553},{0,469},{49,147},{147,553},{230,553},{377,553},
        {0,209},{0,127},{85,52},{353,553},{517,194},{402,553},{468,553},{116,503},{0,553},{216,553},
        {0,305},{447,93},{10,205},{245,403},{453,553},{0,553},{0,553},{274,165},{0,480},{211,553},
        {48,553},{220,553},{0,446},{0,178},{0,9},{0,553},{500,553},{0,160},{552,158},{0,166},
        {50,553},{383,179},{243,553},{0,73},{268,510},{0,80},{20,553},{107,553},{0,553},{0,238},
        {491,553},{0,381},{0,553},{414,187},{86,329},{212,114},{60,413},{270,553},{508,475},{0,289},
        {0,214},{167,553},{421,553},{0,27},{0,385},{392,553},{125,553},{0,64},{0,255},{0,496},
        {0,528},{0,106},{13,491},{118,553},{509,553},{0,360},{201,553},{0,509},{0,119},{0,311},
        {487,76},{545,417},{0,210},{0,553},{110,372},{349,221},{0,354},{17,96},{324,553},{0,103},
        {427,553},{22,553},{0,553},{0,553},{0,553},{0,36},{465,553},{123,553},{0,345},{0,124},
        {386,364},{194,21},{0,301},{215,553},{518,553},{0,553},{184,235},{0,466},{0,553},{0,457},
        {14,553},{433,553},{0,553},{181,553},{0,422},{0,334},{0,553},{0,353},{346,553},{0,374},
        {0,12},{0,553},{0,553},{303,553},{506,553},{436,123},{294,1},{0,553},{0,343},{134,553},
        {0,302},{541,553},{62,553},{65,521},{490,43},{400,553},{0,553},{407,553},{0,237},{130,2},
        {0,553},{0,66},{136,326},{282,553},{160,553},{34,553},{393,553},{0,29},{174,553},{0,525},
        {149,195},{0,553},{0,553},{218,553},{0,494},{446,553},{0,167},{469,553},{0,553},{100,553},
        {0,97},{0,375},{0,553},{441,152},{0,513},{0,224},{120,553},{223,553},{357,553},{0,553},
        {0,176},{0,520},{426,451},{256,553},{240,370},{321,249},{0,553},{0,553},{7,19},{372,553},
        {73,512},{333,553},{498,553},{0,18},{345,552},{292,380},{479,141},{522,142},{68,553},{0,553},
        {0,157},{0,344},{0,201},{455,14},{334,507},{0,324},{328,553},{313,523},{162,553},{254,346},
        {249,38},{0,471},{422,31},{180,553},{0,546},{342,553},{0,397},{0,129},{413,553},{0,190},
        {105,291},{0,7},{0,553},{327,553},{543,139},{0,247},{0,553},{365,553},{320,553},{311,553},
        {244,315},{485,553},{330,553},{384,553},{0,553},{442,553},{177,553},{0,295},{0,259},{276,553},
        {0,257},{87,376},{331,497},{0,553},{547,553},{154,553},{452,322},{0,281},{275,553},{0,535},
        {170,495},{83,553},{273,410},{0,223},{0,154},{88,41},{0,553},{0,122},{0,148},{0,37},
        {0,92},{0,98},{0,545},{521,192},{152,218},{217,553},{363,553},{185,553},{537,553},{304,553},
        {0,538},{0,553},{319,553},{397,391},{0,25},{361,363},{290,553},{141,553},{66,434},{0,156},
        {0,323},{0,72},{544,553},{456,553},{0,553},{0,553},{480,267},{360,211},{84,81},{0,15},
        {0,529},{0,63},{0,261},{0,161},{462,553},{0,553},{404,269},{0,485},{0,132},{0,411},
        {0,373},{0,279},{308,164},{0,553},{119,553},{340,258},{0,444},{481,553},{0,553},{6,30},
        {108,265},{0,553},{29,553},{263,553},{0,33},{11,553},{0,553},{0,541},{69,553},{0,431},
        {317,74},{0,440},{341,390},{381,60},{374,486},{367,553},{0,553},{206,429},{338,553},{0,349},
        {70,112},{0,89},{138,56},{329,553},{0,553},{512,553},{489,553},{0,84},{0,553},{0,248},
        {0,393},{241,553},{459,553},{0,553},{33,553},{0,314},{265,330},{472,553},{405,553},{126,553},
        {503,553},{122,553},{0,389},{0,263},{0,168},{451,553},{0,199},{347,553},{289,553},{343,553},
        {0,379},{0,553},{0,553},{486,553},{0,359},{0,428},{0,553},{0,8},{261,553},{444,516},
        {0,553},{232,553},{0,553},{43,175},{0,423},{445,553},{224,128},{0,553},{0,500},{307,553},
        {0,489},{0,273},{471,34},{514,225},{318,465},{473,553},{528,282},{267,553},{229,553},{0,553},
        {501,242},{423,68},{4,553},{0,208},{0,143},{0,57},{0,400},{408,321},{0,296},{0,553},
        {0,553},{0,549},{364,553},{350,105},{81,553},{299,501},{234,553},{128,482},{0,553},{0,138},
        {23,553},{0,553},{103,553},{221,146},{519,11},{143,553},{179,553},{0,553},{142,553},{504,553},
        {534,197},{0,553},{0,252},{166,553},{417,553},{0,478},{0,553},{502,553},{0,419},{0,553},
        {67,553},{0,366},{0,499},{0,553},{0,85},{0,476},{0,180},{191,553},{0,262},{0,424},
        {332,553},{210,357},{112,23},{351,477},{0,70},{0,479},{0,317},{0,184},{0,448},{133,542},
        {0,536},{200,553},{401,533},{0,553},{98,16},{0,250},{0,511},{542,553},{178,483},{0,553}
        };
    int ans = solve(n, roads);
    System.out.println(ans);
    System.out.format("%d msec\n", System.currentTimeMillis() - t0);
    System.exit(0);
  }

  public static void main(String[] args) {
    doTest();
    MyScanner in = new MyScanner();
    int n = in.nextInt();
    int m = in.nextInt();
    int[][] roads = new int[m][2];
    for (int i = 0; i < m; i++) {
      roads[i][0] = in.nextInt() - 1;
      roads[i][1] = in.nextInt() - 1;
    }
    int ans = solve(n, roads);
    System.out.println(ans);
  }

  static void output(int[] a) {
    if (a == null) {
      System.out.println("-1");
      return;
    }
    StringBuilder sb = new StringBuilder();
    for (int v : a) {
      sb.append(v);
      sb.append(' ');
      if (sb.length() > 500) {
        System.out.print(sb.toString());
        sb.setLength(0);
      }
    }
    System.out.println(sb.toString());
  }

  static void myAssert(boolean cond) {
    if (!cond) {
      throw new RuntimeException("Unexpected");
    }
  }

  static class MyScanner {
    BufferedReader br;
    StringTokenizer st;

    public MyScanner() {
      try {
        final String USERDIR = System.getProperty("user.dir");
        String cname = MethodHandles.lookup().lookupClass().getCanonicalName().replace(".MyScanner", "");
        cname = cname.lastIndexOf('.') > 0 ? cname.substring(cname.lastIndexOf('.') + 1) : cname;
        final File fin = new File(USERDIR + "/io/c" + cname.substring(1,5) + "/" + cname + ".in");
        br = new BufferedReader(new InputStreamReader(fin.exists()
            ? new FileInputStream(fin) : System.in));
      } catch (Exception e) {
        br = new BufferedReader(new InputStreamReader(System.in));
      }
    }

    public String next() {
      try {
        while (st == null || !st.hasMoreElements()) {
          st = new StringTokenizer(br.readLine());
        }
        return st.nextToken();
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    }

    public int nextInt() {
      return Integer.parseInt(next());
    }

    public long nextLong() {
      return Long.parseLong(next());
    }
  }
}
