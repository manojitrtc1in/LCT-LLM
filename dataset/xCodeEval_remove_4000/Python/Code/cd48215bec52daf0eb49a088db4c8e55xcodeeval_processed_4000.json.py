from sys import stdin
from collections import deque

mod = 10**9 + 7
import sys
import random
sys.setrecursionlimit(10**6)
from queue import PriorityQueue
from collections import Counter as cc


from bisect import bisect_right
from bisect import bisect_left
from collections import defaultdict
from math import sqrt,factorial,gcd,log2,inf,ceil



import heapq

input = lambda : sys.stdin.readline().rstrip()
from sys import stdin, stdout
from heapq import heapify, heappush, heappop
from itertools import permutations
from math import factorial as f



def ncr(n, r, p):
    num = den = 1
    for i in range(r):
        num = (num * (n - i)) % p
        den = (den * (i + 1)) % p
    return (num * pow(den,
                      p - 2, p)) % p

import sys










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































    































































































































































































































































































































def bfs(n):

    que = [n]
    boo[n] = True
    ans = 0
    while que:
        z = que.pop(0)
        ans+=1
        for i in hash[z]:
            if not boo[i]:
                boo[i] = True
                que.append(i)


    return ans



t = int(input())
ha = []
for _ in range(t):

   n = int(input())
   l = list(input())
   ans = 0
   if len(set(l)) == 1:
       print(ceil(n/3))
       continue

   hash = defaultdict(list)
   ha = defaultdict(bool)
   for i in range(n):
       if l[i] == l[(i+1)%n]:
           hash[i].append((i+1)%n)
           ha[(i+1)%n] = True


   boo = defaultdict(bool)

   for i in range(n):
       if not boo[i] and not ha[i]:
           z = bfs(i)
           

           ans+=z//3

   print(ans)







