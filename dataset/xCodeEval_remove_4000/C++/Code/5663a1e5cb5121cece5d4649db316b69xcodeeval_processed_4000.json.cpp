









using namespace std;

const int myTable[50][50] = {{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,1,1,1,1,1,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,1,0,1,0,0,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,1,1,1,0,1,0,1,0,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,1,0,1,1,1,1,1,1,0,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,1,1,0,1,1,0,1,0,1,1,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,1,1,0,0,0,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,1,1,0,1,1,0,1,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,1,0,1,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,1,1,1,0,0,0,1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,1,0,1,1,0,1,0,0,0,1,0,0,1,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,1,0,0,0,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,1,1,1,0,1,1,1,0,1,0,1,1,0,0,0,0,0,1,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,1,0,1,0,0,0,1,1,1,1,1,0,0,0,1,0,0,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,1,1,0,0,1,1,0,1,1,1,0,0,0,1,1,1,0,0,1,0,1,1,1,1,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,1,0,0,1,1,0,1,0,1,1,0,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,1,1,1,0,0,1,1,0,0,1,1,0,0,0,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,1,0,0,1,1,1,1,0,1,1,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,0,1,1,0,1,1,0,0,1,0,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,1,0,0,1,0,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,0,1,0,1,1,0,1,1,1,1,0,1,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,1,0,1,1,1,0,0,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},{1,1,0,1,0,0,1,0,0,1,1,1,0,0,0,1,0,1,0,1,0,0,0,1,1,1,0,0,0,1,1,0,0,0,0,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0},{1,0,0,1,1,0,0,1,1,1,1,0,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,1,0,1,1,0,0,0,0,1,0,0,1,0,1,1,1,1,0,1,0,1,1,0,1,0,0,0,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0},{0,0,0,1,1,1,0,1,1,0,0,0,0,1,0,0,0,1,1,0,1,0,1,1,0,1,0,0,0,0,1,1,0,0,1,0,1,0,0,1,1,0,1,1,0,0,0,0,0,0},{1,0,1,1,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,0,0,1,0,0,1,1,0,0,1,1,0,1,0,1,0,0,0,0,0},{1,0,1,0,1,0,0,0,0,0,0,1,1,0,1,1,1,0,1,0,1,0,0,1,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,1,1,0,1,0,0,1,0,0,0,0},{0,0,1,0,1,1,1,0,0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,1,1,1,0,1,0,0,0,1,0,1,0,0,0},{1,1,0,1,0,1,1,0,0,0,1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,1,1,0,1,1,1,1,1,0,1,0,0,1,0,0},{1,1,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,0,1,0,0,1,0},{0,0,1,1,1,0,0,1,0,0,1,1,1,1,0,1,1,0,1,0,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,0,0,1,0,1}};

int res[50][50], mat[50][50], table[50][50];

void multiply(int a[][50], int b[][50], int c[][50], int n) {
	for (int i = 0; i < n; i ++)
		for (int j = 0; j < n; j ++) {
			c[i][j] = 0;
			for (int k = 0; k < n; k ++)
				c[i][j] += a[i][k] * b[k][j];
			c[i][j] %= 2;
		}
}

void getPower(long long p, int n) {
	if (p == 0) return;
	getPower(p / 2, n);
	int tmp[50][50];
	memcpy(tmp, res, sizeof(res));
	multiply(tmp, tmp, res, n);
	if (p % 2 == 1) {
		memcpy(tmp, res, sizeof(res));
		multiply(tmp, mat, res, n);
	}
}

bool id0(int a[][50], int n) {
	for (int i = 0; i < n; i ++)
		for (int j = 0; j < n; j ++)
			if (i == j) {
				if (a[i][j] == 0) return false;
			} else {
				if (a[i][j] == 1) return false;
			}
	return true;
}

void solve(int n, int a[]) {
	long long prime[100];
	int t[50];
	int tot = 0;
	long long tmp = (1LL << n) - 1;
	for (long long i = 2; i * i <= tmp; i ++)
		if (tmp % i == 0) {
			prime[tot ++] = i;
			while (tmp % i == 0) tmp /= i;
		}
	if (tmp != 1) prime[tot ++] = tmp;
	while (true) {
		t[n - 1] = 1;
		for (int i = 0; i < n - 1; i ++)
			t[i] = rand() % 2;
		int sum = 0;
		for (int i = 0; i < n; i ++)
			sum += t[i];
		if (sum == 0) continue;
		memset(mat, 0, sizeof(mat));
		for (int i = 0; i < n; i ++)
			mat[n - i - 1][n - 1] = t[i];
		for (int i = 0; i < n - 1; i ++)
			mat[i + 1][i] = 1;
		memset(res, 0, sizeof(res));
		for (int j = 0; j < n; j ++)
			res[j][j] = 1;
		getPower((1LL << n) - 1, n);
		if (! id0(res, n)) continue;
		bool flag = true;
		for (int i = 0; i < tot; i ++) {
			memset(res, 0, sizeof(res));
			for (int j = 0; j < n; j ++)
				res[j][j] = 1;
			getPower(((1LL << n) - 1) / prime[i], n);
			if (id0(res, n)) {
				flag = false;
				break;
			}
		}
		if (flag) {
			for (int i = 0; i < n; i ++)
				a[i] = t[i];
			break;
		}
	}
}

void generateTable() {
	srand(time(0));
	for (int i = 0; i < 50; i ++)
		solve(i + 1, table[i]);
	FILE *out = fopen("table.txt", "w");
	fprintf(out, "{");
	for (int i = 0; i < 50; i ++) {
		fprintf(out, "{");
		for (int j = 0; j < 50; j ++) {
			fprintf(out, "%d", table[i][j]);
			if (j < 49) fprintf(out, ",");
		}
		fprintf(out, "}");
		if (i < 49) fprintf(out, ",");
	}
	fprintf(out, "}");
	fclose(out);
}

int main() {
	

	
	int k;
	scanf("%d", &k);
	for (int i = 0; i < k; i ++)
		if (i < k - 1) {
			printf("%d ", myTable[k - 1][i]);
		} else {
			printf("%d\n", myTable[k - 1][i]);
		}
	
	for (int i = 0; i < k; i ++)
		if (i < k - 1) {
			printf("%d ", 1);
		} else {
			printf("%d\n", 1);
		}
	
	return 0;
}
