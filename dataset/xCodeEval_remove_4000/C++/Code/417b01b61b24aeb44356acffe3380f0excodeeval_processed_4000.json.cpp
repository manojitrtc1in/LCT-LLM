   




























































































using namespace std;
































typedef struct{ int sum,suf,pre,max;} Node;
int toint(const string &s) { stringstream ss; ss << s; int x; ss >> x; return x; }
const int MAXN = 2e5+100;
const int UP = 31;




const ll highest = 1e18;    




const double pi = acos(-1);
const double Phi =  1.618033988749894;
const int logn = 20;
const double root5 = 2.236067977;   
const ll inf=1e16;
const int mod = 1e9+7;
const int ini = -1e9;

int n,m;
char s[1010];
string board[1010];
int sum[1010][1010];
int k;
string ds = "NSEW";
int dx[] = {-1,1,0,0},dy[] = {0,0,1,-1};
int dir[100010],len[100010];
bool chk(int x1,int y1,int x2,int y2){
    if(!inrange(x1,y1,n,m) || !inrange(x2,y2,n,m))return false;
    if(x1>x2)swap(x1,x2);
    if(y1>y2)swap(y1,y2);
    x2++,y2++;
    return (sum[x1][y1] + sum[x2][y2] == sum[x1][y2] + sum[x2][y1]); 
}
bool func(int x,int y){
    int x2,y2;
    int i;
    for(i=0;i<k;++i){
        x2 = x + len[i]*dx[dir[i]];
        y2 = y + len[i]*dy[dir[i]];
        if(!chk(x,y,x2,y2))return false;
        x = x2,y = y2;
    }
    return 1;
}   
int main(){ 
    scanf("%d%d",&n,&m);
    for(int i=0;i<n;++i){
        scanf("%s",s);
        board[i] = s;
    }
    scanf("%d",&k);
    for(int i=0;i<k;++i){
        scanf("%s",s);
        int j=0;
        for(;j<4;++j){
            if(ds[j]==s[0])break;
        }
        dir[i] = j;
        scanf("%d",&len[i]);
    }
    for(int i=0;i<n;++i){
        for(int j=0;j<m;++j){
            sum[i+1][j+1] = sum[i+1][j] + sum[i][j+1] - sum[i][j] + ((board[i][j]=='
        }
    }
    string ans;
    for(int i=0;i<n;++i){
        for(int j=0;j<m;++j){
            if(board[i][j]>='A' && board[i][j]<='Z'){
                char ch = board[i][j];
                if(func(i,j))ans += ch;
            }
        }
    }
    if(ans.empty()){
        cout<<"no solution\n";
    }else{
        sort(ans.begin(),ans.end());
        cout<<ans<<"\n";
    }
    return 0;
}






















































































































































































































        












        








 



































        
































































































































































































































































































































































































































































