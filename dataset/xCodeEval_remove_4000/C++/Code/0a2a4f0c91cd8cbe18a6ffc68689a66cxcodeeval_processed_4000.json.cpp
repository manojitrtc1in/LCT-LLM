




























































































using namespace std;
































typedef struct{ int sum,suf,pre,max;} Node;
int toint(const string &s) { stringstream ss; ss << s; int x; ss >> x; return x; }
const int MAXN = 2e5+100;
const int UP = 31;




const ll highest = 1e18;    




const double pi = acos(-1);
const double Phi =  1.618033988749894;
const int logn = 20;
const double root5 = 2.236067977;   
const int inf = 1e9;
const int mod = 1e9+7;  

const int N = 1e5+100;
std::map<int, int> mm;
std::map<int, int>::iterator it;
multiset<ll> st;
int n;
ll a[N];
int main(){
    scanf("%d",&n);
    for(int i=0;i<n;++i){
        cin>>a[i];
        mm[a[i]]++;
    }
    for(it = mm.begin();it != mm.end();++it){
        int ct = it->se;
        int x = it->fi;
        int nc = ct/2;
        ct -= nc*2;
        mm[x] = ct;
        if(nc>0)mm[x+1] += nc;
    }
    it = mm.end();
    --it;
    int x = it->fi;
    int ct = it->se;
    if(ct&1){
        int lg2 = log2(ct);
        if(lg2 != 0){
            x *= lg2;
            mm[x] = 1;
        }
    }else{  
        mm.erase(x);
    }
    ll ans = !mm[0];
    ll st = 0;
    for(it=mm.begin();it != mm.end();++it){
        int x = it->fi;int ct = it->se;
        

        if(ct && x!=0){
            ans += (x - st - 1);
            st = x;
        }
    }
    cout<<ans<<"\n";
}






















































































































































































































        












        








 



































        































































































































































































































































































































































































































































