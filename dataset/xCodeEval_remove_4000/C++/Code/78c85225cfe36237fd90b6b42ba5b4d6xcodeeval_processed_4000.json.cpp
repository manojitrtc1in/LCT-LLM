






























































































































































































































































































































































































































































































































































































































































































































































































using namespace std;

const int N = 1e5;  

int n, w, m;
pair<int, int> t[2 * N];

int h;
int d[N];

void build() {  

    for (int i = n - 1; i > 0; --i) t[i] = min(t[i<<1], t[i<<1|1]);
}

void apply(int p, int value) {
    t[p].first += value;
    if (p < n) d[p] += value;
}

void build(int p) {
    while (p > 1) {
        p >>= 1;
        pair<int, int> mini = min(t[p<<1], t[p<<1|1]);
        mini.first += d[p];
        t[p] = mini;
    }
}

void push(int p) {
    for (int s = h; s > 0; --s) {
        int i = p >> s;
        if (d[i] != 0) {
            apply(i<<1, d[i]);
            apply(i<<1|1, d[i]);
            d[i] = 0;
        }
    }
}

void inc(int l, int r, int value) {
    l += n, r += n;
    int l0 = l, r0 = r;
    for (; l < r; l >>= 1, r >>= 1) {
        if (l&1) apply(l++, value);
        if (r&1) apply(--r, value);
    }
    build(l0);
    build(r0 - 1);
}

pair<int, int> query(int l, int r) {
    l += n, r += n;
    push(l);
    push(r - 1);
    pair<int, int> res = make_pair(2e9, 0);
    for (; l < r; l >>= 1, r >>= 1) {
        if (l&1) res = min(res, t[l++]);
        if (r&1) res = min(t[--r], res);
    }
    return res;
}

int main() {
    
    

    cin >> n >> m >> w;
    h = sizeof(int) * 8 - __builtin_clz(n);
    


    for (int i = 0; i < n; ++i) {
        int x;
        cin >> x;
        t[n+i] = make_pair(x, i);


    }
    
    build();
    
    while (m--) {
        pair<int, int> mini = query(0, n);
        



        int i = mini.second;




        
        inc(i, min(i+w, n), 1);
        






    }
    
    cout << query(0, n).first << "\n";
    
    return 0;
}
