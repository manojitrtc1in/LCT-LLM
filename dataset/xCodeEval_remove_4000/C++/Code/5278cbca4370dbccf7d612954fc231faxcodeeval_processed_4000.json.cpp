












using namespace std;


    
    pretty:: PrettyPrinter NonIterable;
    

    














typedef long long lld; typedef unsigned long long llu;













const lld MOD = int(1e9) + 7;
const lld &mod = MOD;

const long double EPS = 1e-6;

const lld inf = 2e18;


struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        

        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t id0 = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + id0);
    }
};



signed pleaseAC(void) {


    

    

    



    return 0;
}


void id3(void) {
    
    ios_base::sync_with_stdio(false); cin.tie(0);
    cout.precision(10); cout << fixed;


    

    freopen("/home/luctivud/CPPractice/IO/Zinput.txt", "r", stdin);
    freopen("/home/luctivud/CPPractice/IO/Zoutput.txt", "w", stdout);


    return;
}


















void id2(int _TestCase) {
    

    lld n; cin >> n;
    lld arr[n], diff[n-1];
    forn(i, n) {
        cin >> arr[i];
        if (i) diff[i-1] = llabs(arr[i] - arr[i-1]);
    }

    if (n == 1) {
        cout << 1;
        return;
    }

    n -= 1;

    lld table[n][26];
    for (int i = 0; i < n; i++) {
        table[i][0] = diff[i];
    }
    
    for (int j = 1; j < 26; j++) {
        for (int i = 0; i <= (n - (1ll << j)); i++) {
            table[i][j] = __gcd(table[i][j-1], table[i + (1ll << (j - 1))][j - 1]);
        }
    }

    lld l = 1, r = n, ans = 1;
    while (l <= r) {
        lld mid = l + (r - l) / 2;
        lld sz = (lld)log2(mid);
        bool ok = false;
        for (int i = 0; i+mid <= n; i++) {
            if (__gcd(table[i][sz], table[i+mid-(1ll << sz)][sz]) != 1) {
                ok = true;
                break;
            }
        }
        if (ok) {
            l = mid + 1;
            ans = mid + 1;
        } else {
            r = mid - 1;
        }
    }

    cout << ans;

    return;
}






signed main() {

    ios_base::sync_with_stdio(false); cin.tie(0);
    cout.precision(10); cout << fixed;

    id3();

    int id1 = 1;
    cin >> id1; 
    
    for (int _TestCase = 1; _TestCase <= id1; _TestCase++) {
        id2(_TestCase);
        cout << "\n";
    }

    return pleaseAC(); 
}
























 






 












 








 












 




















 
















 


















 


















 




 


















































 
































 












 




 








 


 


 








 
























 
























 




























 
 




























 




















































 










 





























































































































































































































































































































































































































































































































































































































































 






























































































































































































































































































































































































































































































































