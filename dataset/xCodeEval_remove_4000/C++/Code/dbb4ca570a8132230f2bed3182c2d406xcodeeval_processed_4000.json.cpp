






















using namespace std;













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































using namespace std;

const long long mod = 1000000007LL;

vector< int > edge[101];
int k;
long long f[101][41], t[41];

void search(int x, int p) {
	int i, j;
        

        

        

        

	f[x][0] = f[x][k + 1] = 1LL; 
	for (auto s: edge[x])
		if (s != p) {
			search(s, x);
			memset(t, 0, sizeof(t));
			for (i = 0; i <= k << 1; ++i)
				for (j = 0; j <= k << 1; ++j)
					if (i + j <= k << 1) {
                                          

                                          

						(t[min(i, j + 1)] += f[x][i] * f[s][j] % mod) %= mod;
					} else {
						(t[max(i, j + 1)] += f[x][i] * f[s][j] % mod) %= mod;
					}
			memcpy(f[x], t, sizeof(t));
		}
}

int main() {

	ios_base::sync_with_stdio(false);


	int n, i, x, y;
	long long ans = 0LL;

	cin >> n >> k;
	for (i = 1; i < n; ++i) {
		cin >> x >> y;
		edge[x].push_back(y);
		edge[y].push_back(x);
	}

	search(1, 0);

	for (i = 0; i <= k; ++i) (ans += f[1][i]) %= mod;

	cout << ans << endl;

	return 0;
}




























































































































































































































































