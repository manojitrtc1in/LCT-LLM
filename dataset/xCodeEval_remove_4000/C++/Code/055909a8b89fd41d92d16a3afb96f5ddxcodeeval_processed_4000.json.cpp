
using namespace std;









using ll = long long;
using pii = pair<int, int>;
using pil = pair<int, ll>;
using pli = pair<ll, int>;
using pll = pair<ll, ll>;

template <typename T>
bool chmax(T &x, const T &y) {
    return (x < y) ? (x = y, true) : false;
}

template <typename T>
bool chmin(T &x, const T &y) {
    return (x > y) ? (x = y, true) : false;
}

template <typename T>
int flg(T x, int i) {
    return (x >> i) & 1;
}

template <typename T>
void print(const vector<T> &v, T x = 0) {
    int n = v.size();
    for (int i = 0; i < n; i++) cout << v[i] + x << (i == n - 1 ? '\n' : ' ');
    if (v.empty()) cout << '\n';
}

template <typename T>
void printn(const vector<T> &v, T x = 0) {
    int n = v.size();
    for (int i = 0; i < n; i++) cout << v[i] + x << '\n';
}

template <typename T>
int lb(const vector<T> &v, T x) {
    return lower_bound(begin(v), end(v), x) - begin(v);
}

template <typename T>
int ub(const vector<T> &v, T x) {
    return upper_bound(begin(v), end(v), x) - begin(v);
}

template <typename T>
void id3(vector<T> &v) {
    sort(begin(v), end(v));
    v.erase(unique(begin(v), end(v)), end(v));
}

template <typename T>
vector<int> id_sort(const vector<T> &v, bool greater = false) {
    int n = v.size();
    vector<int> ret(n);
    iota(begin(ret), end(ret), 0);
    sort(begin(ret), end(ret), [&](int i, int j) { return greater ? v[i] > v[j] : v[i] < v[j]; });
    return ret;
}

template <typename S, typename T>
pair<S, T> operator+(const pair<S, T> &p, const pair<S, T> &q) {
    return make_pair(p.first + q.first, p.second + q.second);
}

template <typename S, typename T>
pair<S, T> operator-(const pair<S, T> &p, const pair<S, T> &q) {
    return make_pair(p.first - q.first, p.second - q.second);
}

template <typename S, typename T>
istream &operator>>(istream &is, pair<S, T> &p) {
    S a;
    T b;
    is >> a >> b;
    p = make_pair(a, b);
    return is;
}

template <typename S, typename T>
ostream &operator<<(ostream &os, const pair<S, T> &p) {
    return os << p.first << ' ' << p.second;
}

struct io_setup {
    io_setup() {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        cout << fixed << setprecision(15);
    }
} io_setup;

const int inf = (1 << 30) - 1;
const ll INF = (1LL << 60) - 1;
const int MOD = 1000000007;



const vector<int> MODS = {
    1000000007, 1000000009, 1000000021, 1000000033, 1000000087, 1000000093, 1000000097, 1000000103, 1000000123, 1000000181, 1000000207, 1000000223, 1000000241, 1000000271, 1000000289, 1000000297,
    1000000321, 1000000349, 1000000363, 1000000403, 1000000409, 1000000411, 1000000427, 1000000433, 1000000439, 1000000447, 1000000453, 1000000459, 1000000483, 1000000513, 1000000531, 1000000579,
    1000000607, 1000000613, 1000000637, 1000000663, 1000000711, 1000000753, 1000000787, 1000000801, 1000000829, 1000000861, 1000000871, 1000000891, 1000000901, 1000000919, 1000000931, 1000000933,
    1000000993, 1000001011, 1000001021, 1000001053, 1000001087, 1000001099, 1000001137, 1000001161, 1000001203, 1000001213, 1000001237, 1000001263, 1000001269, 1000001273, 1000001279, 1000001311,
    1000001329, 1000001333, 1000001351, 1000001371, 1000001393, 1000001413, 1000001447, 1000001449, 1000001491, 1000001501, 1000001531, 1000001537, 1000001539, 1000001581, 1000001617, 1000001621,
    1000001633, 1000001647, 1000001663, 1000001677, 1000001699, 1000001759, 1000001773, 1000001789, 1000001791, 1000001801, 1000001803, 1000001819, 1000001857, 1000001887, 1000001917, 1000001927,
    1000001957, 1000001963, 1000001969, 1000002043, 1000002089, 1000002103, 1000002139, 1000002149, 1000002161, 1000002173, 1000002187, 1000002193, 1000002233, 1000002239, 1000002277, 1000002307,
    1000002359, 1000002361, 1000002431, 1000002449, 1000002457, 1000002499, 1000002571, 1000002581, 1000002607, 1000002631, 1000002637, 1000002649, 1000002667, 1000002727, 1000002791, 1000002803,
    1000002821, 1000002823, 1000002827, 1000002907, 1000002937, 1000002989, 1000003009, 1000003013, 1000003051, 1000003057, 1000003097, 1000003111, 1000003133, 1000003153, 1000003157, 1000003163,
    1000003211, 1000003241, 1000003247, 1000003253, 1000003267, 1000003271, 1000003273, 1000003283, 1000003309, 1000003337, 1000003351, 1000003357, 1000003373, 1000003379, 1000003397, 1000003469,
    1000003471, 1000003513, 1000003519, 1000003559, 1000003577, 1000003579, 1000003601, 1000003621, 1000003643, 1000003651, 1000003663, 1000003679, 1000003709, 1000003747, 1000003751, 1000003769,
    1000003777, 1000003787, 1000003793, 1000003843, 1000003853, 1000003871, 1000003889, 1000003891, 1000003909, 1000003919, 1000003931, 1000003951, 1000003957, 1000003967, 1000003987, 1000003999,
    1000004023, 1000004059, 1000004099, 1000004119, 1000004123, 1000004207, 1000004233, 1000004249, 1000004251, 1000004263, 1000004321, 1000004329, 1000004381, 1000004389, 1000004437, 1000004449,
    1000004459, 1000004497, 1000004507, 1000004519, 1000004539, 1000004567, 1000004569, 1000004581, 1000004609, 1000004611, 1000004627, 1000004633, 1000004647, 1000004693, 1000004699, 1000004717,
    1000004771, 1000004777, 1000004783, 1000004791, 1000004807, 1000004839, 1000004843, 1000004849, 1000004857, 1000004867, 1000004869, 1000004891, 1000004893, 1000004897, 1000004927, 1000004933,
    1000004977, 1000004981, 1000005001, 1000005029, 1000005053, 1000005067, 1000005103, 1000005133, 1000005187, 1000005197, 1000005203, 1000005233, 1000005277, 1000005287, 1000005299, 1000005317,
    1000005329, 1000005341, 1000005353, 1000005361, 1000005403, 1000005407, 1000005437, 1000005443, 1000005449, 1000005451, 1000005469, 1000005491, 1000005527, 1000005541, 1000005547, 1000005583,
    1000005631, 1000005647, 1000005683, 1000005731, 1000005737, 1000005751, 1000005763, 1000005791, 1000005823, 1000005827, 1000005833, 1000005847, 1000005863, 1000005899, 1000005907, 1000005947,
    1000005953, 1000005959, 1000005971, 1000005973, 1000005991, 1000005997, 1000006019, 1000006027, 1000006037, 1000006039, 1000006061, 1000006093, 1000006099, 1000006127, 1000006129, 1000006177,
    1000006193, 1000006211, 1000006223, 1000006229, 1000006307, 1000006313, 1000006331, 1000006349, 1000006379, 1000006393, 1000006417, 1000006421, 1000006457, 1000006459, 1000006477, 1000006541,
    1000006571, 1000006577, 1000006583, 1000006607, 1000006621, 1000006661, 1000006663, 1000006697, 1000006717, 1000006751, 1000006781, 1000006837, 1000006867, 1000006901, 1000006957, 1000006961,
    1000006967, 1000006981, 1000007003, 1000007023, 1000007027, 1000007089, 1000007117, 1000007137, 1000007147, 1000007159, 1000007191, 1000007209, 1000007237, 1000007243, 1000007257, 1000007279,
    1000007321, 1000007347, 1000007383, 1000007389, 1000007417, 1000007429, 1000007447, 1000007453, 1000007467, 1000007479, 1000007497, 1000007513, 1000007521, 1000007531, 1000007537, 1000007557,
    1000007633, 1000007647, 1000007651, 1000007653, 1000007681, 1000007707, 1000007719, 1000007741, 1000007759, 1000007773, 1000007803, 1000007819, 1000007837, 1000007873, 1000007887, 1000007909,
    1000007923, 1000007927, 1000007929, 1000007941, 1000008041, 1000008083, 1000008089, 1000008101, 1000008109, 1000008127, 1000008173, 1000008181, 1000008223, 1000008257, 1000008259, 1000008271,
    1000008277, 1000008311, 1000008313, 1000008343, 1000008349, 1000008397, 1000008403, 1000008419, 1000008431, 1000008439, 1000008487, 1000008511, 1000008557, 1000008593, 1000008617, 1000008637,
    1000008649, 1000008661, 1000008671, 1000008679, 1000008719, 1000008727, 1000008761, 1000008773, 1000008791, 1000008797, 1000008803, 1000008811, 1000008829, 1000008853, 1000008899, 1000008917,
    1000008937, 1000008967, 1000009009, 1000009013, 1000009063, 1000009081, 1000009093, 1000009099, 1000009123, 1000009133, 1000009163, 1000009183, 1000009211, 1000009223, 1000009259, 1000009277,
    1000009279, 1000009289, 1000009301, 1000009321, 1000009331, 1000009363, 1000009399, 1000009403, 1000009421, 1000009441, 1000009457, 1000009469, 1000009487, 1000009519, 1000009529, 1000009531,
    1000009541, 1000009559, 1000009561, 1000009567, 1000009573, 1000009579, 1000009597, 1000009601, 1000009609, 1000009631, 1000009651, 1000009667, 1000009679, 1000009711, 1000009733, 1000009739,
    1000009757, 1000009789, 1000009831, 1000009859, 1000009867, 1000009961, 1000009999};

struct id2 {
    mt19937_64 mt;

    id2() : mt(chrono::steady_clock::now().time_since_epoch().count()) {}

    int64_t operator()(int64_t l, int64_t r) {
        uniform_int_distribution<int64_t> dist(l, r - 1);
        return dist(mt);
    }

    int64_t operator()(int64_t r) { return (*this)(0, r); }
} rng;

template <typename T>
vector<T> id0(const T &n) {
    vector<T> ret;
    for (T i = 1; i * i <= n; i++) {
        if (n % i == 0) {
            ret.push_back(i);
            if (i * i != n) ret.push_back(n / i);
        }
    }
    sort(begin(ret), end(ret));
    return ret;
}

template <typename T>
vector<pair<T, int>> prime_factor(T n) {
    vector<pair<T, int>> ret;
    for (T i = 2; i * i <= n; i++) {
        int cnt = 0;
        while (n % i == 0) cnt++, n /= i;
        if (cnt > 0) ret.emplace_back(i, cnt);
    }
    if (n > 1) ret.emplace_back(n, 1);
    return ret;
}

template <typename T>
bool is_prime(const T &n) {
    if (n == 1) return false;
    for (T i = 2; i * i <= n; i++) {
        if (n % i == 0) return false;
    }
    return true;
}



template <typename T>
T id4(T n, T k) {
    vector<pair<T, int>> ps = prime_factor(k);
    int m = ps.size();
    T ret = 0;
    for (int i = 0; i < (1 << m); i++) {
        T prd = 1;
        for (int j = 0; j < m; j++) {
            if ((i >> j) & 1) prd *= ps[j].first;
        }
        ret += (__builtin_parity(i) ? -1 : 1) * (n / prd);
    }
    return ret;
}

vector<bool> id1(const int &n) {
    vector<bool> ret(n + 1, true);
    if (n >= 0) ret[0] = false;
    if (n >= 1) ret[1] = false;
    for (int i = 2; i * i <= n; i++) {
        if (!ret[i]) continue;
        for (int j = i + i; j <= n; j += i) ret[j] = false;
    }
    return ret;
}

vector<int> id5(const int &n) {
    vector<int> ret(n + 1);
    iota(begin(ret), end(ret), 0);
    if (n >= 0) ret[0] = -1;
    if (n >= 1) ret[1] = -1;
    for (int i = 2; i * i <= n; i++) {
        if (ret[i] < i) continue;
        for (int j = i + i; j <= n; j += i) ret[j] = min(ret[j], i);
    }
    return ret;
}

template <typename T>
vector<int> z_algorithm(const T &s) {
    int n = s.size();
    vector<int> ret(n);
    ret[0] = n;
    int i = 1, j = 0;
    while (i < n) {
        while (i + j < n && s[j] == s[i + j]) j++;
        ret[i] = j;
        if (j == 0) {
            i++;
            continue;
        }
        int k = 1;
        while (i + k < n && k + ret[k] < j) ret[i + k] = ret[k], k++;
        i += k, j -= k;
    }
    return ret;
}

int main() {
    string S, T;
    cin >> S >> T;
    int K = sz(MODS), N = sz(S), M = sz(T);

    vector<ll> mods;
    int L = 20;
    rep(i, L) {
        while (true) {
            ll x = rng(100000000, 1000000000);
            if (is_prime(x)) {
                mods.eb(x);
                break;
            }
        }
    }

    vector<vector<ll>> s(L, vector<ll>(N + 1, 0));
    vector<vector<ll>> pw(L, vector<ll>(N + 1, 1));
    vector<ll> ans(L, 0);

    rep(i, L) {
        rep(j, N) {
            s[i][j + 1] = s[i][j] * 10 + (S[j] - '0');
            s[i][j + 1] %= mods[i];
            pw[i][j + 1] = pw[i][j] * 10;
            pw[i][j + 1] %= mods[i];
        }
        rep(j, M) {
            ans[i] = ans[i] * 10 + (T[j] - '0');
            ans[i] %= mods[i];
        }
    }

    auto judge = [&](int l, int m, int r) {
        rep(i, L) {
            ll a = s[i][m] + (mods[i] - s[i][l]) * pw[i][m - l];
            ll b = s[i][r] + (mods[i] - s[i][m]) * pw[i][r - m];
            ll c = (a + b) % mods[i];
            if (c != ans[i]) return false;
        }
        return true;
    };

    

    rep(i, N + 1) {
        if (i + 2 * (M - 1) > N) break;
        if (judge(i, i + M - 1, i + 2 * (M - 1))) {
            cout << i + 1 << ' ' << i + M - 1 << '\n';
            cout << i + M << ' ' << i + 2 * (M - 1) << '\n';
            return 0;
        }
    }

    vector<int> v = z_algorithm(T + S);

    

    rep(i, N + 1) {
        int x = v[M + i];
        if (x >= M) continue;
        rep2(j, M - x - 1, M - x) {
            if (i + M + j > N) break;
            if (judge(i, i + M, i + M + j)) {
                cout << i + 1 << ' ' << i + M << '\n';
                cout << i + M + 1 << ' ' << i + M + j << '\n';
                return 0;
            }
        }
    }

    

    rep(i, N + 1) {
        int x = v[M + i];
        if (x >= M) continue;
        rep2(j, M - x - 1, M - x) {
            if (i + M > N || i - j < 0) break;
            if (judge(i - j, i, i + M)) {
                cout << i - j + 1 << ' ' << i << '\n';
                cout << i + 1 << ' ' << i + M << '\n';
                return 0;
            }
        }
    }
}