


















using namespace std;

template <class T>
inline vector < T > readin (int n = 0)
{
    


    if ( ! n ) cin >> n;
    vector < T > a ( n );

    copy_n ( istream_iterator <int> ( cin ), n, a.begin() );

    return a;
}
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































template < class T >
map < typename T::value_type, typename T::difference_type >
count_each ( const T & x )
{
    map < typename T::value_type, typename T::difference_type > count;

    for ( typename T::const_iterator iter = x.begin(); iter != x.end(); ++iter )
        ++ count [ * iter ];

    return count;
}

const char * a296 ( ) 
{
    const vector < int > x ( readin < int > ( ) );

    typedef typename vector < int >::difference_type value_type;

    map < int, value_type > count = count_each ( x );

    value_type k = 0;
    for ( map < int, value_type >::const_iterator iter = count.begin();
            iter != count.end(); ++ iter )
        k = max ( k, iter->second );

    return k <= static_cast < value_type > ( ( x.size() + 1 ) / 2 ) ? "YES" : "NO";
}

int main()
{
    cout << a296 ();

    return EXIT_SUCCESS;
}
