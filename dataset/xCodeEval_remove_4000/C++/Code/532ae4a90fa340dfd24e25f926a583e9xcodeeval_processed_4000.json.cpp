   




























































































using namespace std;































typedef struct{ int sum,suf,pre,max;} Node;
int toint(const string &s) { stringstream ss; ss << s; int x; ss >> x; return x; }
const int MAXN = 2e5+100;
const int UP = 31;


const int mod = 1e9+7;
const ll highest = 1e18;    




const double pi = acos(-1);
const double Phi =  1.618033988749894;
const int logn = 20;
const ll inf = 1e18;
const double root5 = 2.236067977;   
const ll inf64=1e16;


const int ini = -1e9;

int n;
int l[110],r[110],ord[110];
int ans[110];
bool cmp(int &a,int &b){
    return l[a]<l[b];
}
struct Cmp{
    bool operator()(const int &a,const int &b)const{
        return r[a]>r[b];
    }
};
priority_queue<int,std::vector<int>,Cmp> q;
int main(){
    scanf("%d",&n);
    for(int i=0;i<n;++i){
        scanf("%d%d",l+i,r+i);
    }
    for(int i=0;i<n;++i)ord[i] = i;
    sort(ord,ord+n,cmp);
    for(int beg = 0;beg<n;){
        int end = beg + 1;
        while(end<n && l[ord[beg]]==l[ord[end]]){++end;}
        int curt = l[ord[beg]];
        for(int i=beg;i<end;++i){
            q.push(ord[i]);
        }
        while(!q.empty()){
            int v = q.top();
            q.pop();
            ans[v] = curt++;
            while(end<n && l[ord[end]] == curt){
                q.push(ord[end]);
                ++end;
            }
        }
        beg = end;
    }
    for(int i=0;i<n;++i){
        cout<<ans[i]<<" ";
    }
    cout<<"\n";
    return 0;
}






















































































































































































































        












        








 



































        
































































































































































































































































































































































































































































