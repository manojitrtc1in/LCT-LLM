



using LL = long long;
const int MOD = 998244353;


int f[13][13][13] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,0,0,0,0,0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,2,12,2,0,0,0,0,0,0,0,0,0,0,2,12,4,0,0,0,0,0,0,0,0,0,0,0,9,6,0,0,0,0,0,0,0,0,0,0,0,3,6,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,10,1,0,0,0,0,0,0,0,0,0,0,3,28,13,0,0,0,0,0,0,0,0,0,0,4,35,29,1,0,0,0,0,0,0,0,0,0,3,35,41,4,0,0,0,0,0,0,0,0,0,1,30,44,7,0,0,0,0,0,0,0,0,0,0,17,45,7,0,0,0,0,0,0,0,0,0,0,8,30,11,0,0,0,0,0,0,0,0,0,0,1,19,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,20,6,0,0,0,0,0,0,0,0,0,0,4,55,50,3,0,0,0,0,0,0,0,0,0,6,80,118,18,0,0,0,0,0,0,0,0,0,6,95,186,48,0,0,0,0,0,0,0,0,0,6,101,230,85,2,0,0,0,0,0,0,0,0,2,94,260,113,4,0,0,0,0,0,0,0,0,2,72,254,137,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,35,21,1,0,0,0,0,0,0,0,0,0,5,96,145,26,0,0,0,0,0,0,0,0,0,8,155,358,124,3,0,0,0,0,0,0,0,0,9,207,616,313,16,0,0,0,0,0,0,0,0,11,250,859,567,53,0,0,0,0,0,0,0,0,9,273,1074,844,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,56,56,8,0,0,0,0,0,0,0,0,0,6,154,350,126,4,0,0,0,0,0,0,0,0,10,268,898,552,48,0,0,0,0,0,0,0,0,12,389,1654,1404,204,1,0,0,0,0,0,0,0,16,515,2516,2657,564,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,84,126,36,1,0,0,0,0,0,0,0,0,7,232,742,448,43,0,0,0,0,0,0,0,0,12,427,1967,1887,357,6,0,0,0,0,0,0,0,15,659,3824,4899,1391,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,120,252,120,10,0,0,0,0,0,0,0,0,8,333,1428,1302,252,5,0,0,0,0,0,0,0,14,640,3892,5380,1782,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,165,462,330,55,1,0,0,0,0,0,0,0,9,460,2550,3276,1065,64,0,0,0,0,0,0 };
int g[23][13][13][13];
int n, K, X;

inline int Pow(int a, int b) {
	int ret = 1;
	for (; b > 0; b >>= 1, a = MUL(a, a))
		if (b & 1)
			ret = MUL(ret, a);
	return ret;
}

inline int Inv(int x) {
	assert(x <= 12);
	static int fct[13], fnv[13];
	if (!fct[0]) {
		fct[0] = 1;
		for (int i = 1; i < 13; ++i)
			fct[i] = MUL(fct[i - 1], i);
		fnv[13 - 1] = Pow(fct[13 - 1], MOD - 2);
		for (int i = 13 - 1; i > 0; --i)
			fnv[i - 1] = MUL(fnv[i], i);
		for (int i = 1; i < 13; ++i)
			fnv[i] = MUL(fnv[i], fct[i - 1]);
	}
	return fnv[x];
}

inline int C(int n, int m) {
	if (n < 0 || m < 0 || m > n)
		return 0;
	int ret = 1;
	for (int i = 1; i <= m; ++i) {
		

		

		ret = MUL(ret, MUL(n - i + 1, Inv(i)));
	}
	

	

	

	

	return ret;
}

inline void Solve() {
	scanf("%d%d%d", &n, &K, &X);
	int ans = 0;
	for (int i = 1; i <= std::min(n, 22); ++i)
		for (int l = 1; l <= 12; ++l)
			(ans += MUL(C(n - i + l, l), g[i][K][X][l])) %= MOD;
	printf("%d\n", ans < 0 ? ans + MOD : ans);
}

int main() {
	

	

	

	

	

	



	g[0][0][0][0] = 1;
	FOR (l, 1, 12)
		FOR (i0, 0, 22)  

			FOR (i1, 0, 12) {
				if (i0 + i1 > 22)
					break;
				FOR (j0, 0, 12)
					FOR (j1, 0, 12) {
						if (j0 + j1 > 12)
							break;
						FOR (k0, 0, 12)
							FOR (k1, 0, 12) {
								if (k0 + k1 > 12)
									break;
								(g[i0 + i1][j0 + j1][k0 + k1][l] += MUL(g[i0][j0][k0][l - 1], f[i1][j1][k1])) %= MOD;
							}
					}
			}


	int T;
	scanf("%d", &T);
	while (T--)
		Solve();
	return 0;
}	
