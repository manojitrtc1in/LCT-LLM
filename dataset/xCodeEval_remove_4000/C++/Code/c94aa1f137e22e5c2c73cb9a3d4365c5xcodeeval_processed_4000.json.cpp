
using namespace std;












void ppp(int a)          { cerr<<a; }
void ppp(ll a)           { cerr<<a; }
void ppp(long double a)  { cerr<<a; }
void ppp(double a)       { cerr<<a; }
void ppp(char a)         { cerr<<a; }
void ppp(string a)       { cerr<<a; }
void ppp(bool a)         { cerr<<a; } 
template<class T , class V> void ppp(pair<T,V> p) {cerr<<"{"; ppp(p.ff); cerr<<','; ppp(p.ss); cerr<<"}";}
template<class T> void ppp(vector<T> v)  {cerr<<"[ ";for(T x:v) ppp(x), cerr<<" ";cerr<<']';}
template<class T> void ppp(set<T> v){cerr<<"[ ";for(T x:v) ppp(x) , cerr<<" ";cerr<<']';}
template<class T, class V> void ppp(map<T,V> m){cerr<<endl;for(auto x:m){ppp(x.ff);cerr<<" -> ";ppp(x.ss);cerr<<endl;}cerr<<endl;}
template<class T> void ppp(deque<T> v)  {cerr<<"[ ";for(T x:v) ppp(x), cerr<<" ";cerr<<']';}
template <typename T, typename... V> void ppp(T t, V... v){ppp(t);  if (sizeof...(v))   cerr << ", ";   ppp(v...);}






vector<vector<pair<ll,pair<ll,bool>>>> l;
vector<ll> v; 
ll cnt;
void dfs(ll n , ll val)
{
    cnt++;
    v[n] = 1;
    for(auto x:l[n]){
        bool blocked = x.ss.ss;
        bool id0 = val & x.ss.ff;
        if(id0 || blocked || v[x.ff]) continue;
        dfs(x.ff, val);
    }
}

int main()
{
    JSM
    ll t,n,m,x,y,p,q,i,j,k,answer=0;
    cin>>t;
    while(t--)
    {
        cin>>n>>m;
        l = vector<vector<pair<ll,pair<ll,bool>>>> (n+1);
        for(i=0;i<m;i++){
            cin>>x>>y>>p;
            l[x].pb({y,{p,false}});
            l[y].pb({x,{p,false}});
        }
        for(i=32;i>=0;i--){
            v = vector<ll> (n+1 , 0);
            ll val = 1LL << i;
            cnt = 0;
            dfs(1,val);
            if(cnt == n){
                for(j=1;j<=n;j++){
                    for(auto &x : l[j]){
                        if(x.ss.ff & val){
                            x.ss.ss = true;
                        }
                    }
                }
            }
        }
        answer = 0;
        for(j=1;j<=n;j++){
            for(auto x : l[j]){
                if(x.ss.ss == false){
                    answer |= x.ss.ff;
                }
            }
        }
        cout<<answer<<endl;
    }
}











































































































































































































































































        



















































































































































































































































































































































































        















































































































































































































































































        



