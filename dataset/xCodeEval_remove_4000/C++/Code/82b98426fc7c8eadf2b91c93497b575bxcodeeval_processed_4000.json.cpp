



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































using namespace std;
using namespace __gnu_pbds;





















int fp(int a, int n)
{
	int ans = 1;
	while (n > 0)
	{
		bool lb = n & 1;
		if (lb)
			ans = (ans * a) % mod;
		a = (a * a) % mod;
		n = n >> 1;
	}
	return ans;
}
int id0(int x)
{
	int count = 0;
	while (x)
	{
		x &= (x - 1);
		count++;
	}
	return count;
}
typedef tree<int, null_type, less<int>, rb_tree_tag,
        tree_order_statistics_node_update>
        PBDS;
int gcd(int a, int b) { return (b == 0) ? a : gcd(b, a % b); }
int lcm(int a, int b) { return (a / gcd(a, b)) * b; }
void i_n()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

}
int ele;
bool cmp(int a, int b) {
	return gcd(ele, a) > gcd(ele, b);
}
main() {
	i_n();
	w(t) {
		int n, m;
		cin >> n >> m;
		int tiles[2 * n][2];
		for (int i = 0; i < 2 * n; i++) {
			for (int j = 0; j < 2; j++) {
				cin >> tiles[i][j];
			}
		}
		bool check = false;
		for (int i = 0; i < 2 * n; i += 2) {
			if (tiles[i][1] == tiles[i + 1][0]) {
				check = true;
			}
		}
		if (m % 2 != 0) {
			check = false;
		}

		check == true ? cout << "YES\n" : cout << "NO\n";
	}
}

