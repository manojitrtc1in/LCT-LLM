









using namespace std;
const long double PI = 3.1415926535897932384626;
typedef long long ll;
typedef vector<ll> vli;
typedef pair<ll, ll> pii;









    ios_base::sync_with_stdio(0); \
    cin.tie(0);                   \
    cout.tie(0);























bool collinear(int x1, int y1, int x2, int y2, int x3, int y3)
{
    return (y1 - y2) * (x1 - x3) != (y1 - y3) * (x1 - x2);
}
bool isInt(double num)
{
    return (num == (int)num);
}

























































































































































































































































































































































































































































































































double id1(ll x1, ll y1, ll x2, ll y2)
{
    return sqrt(abs(x1 - x2) * abs(x1 - x2) * 1.000 + abs(y1 - y2) * abs(y1 - y2) * 1.000);
}

ll binpow(ll a, ll b)
{
    ll res = 1;
    while (b > 0)
    {
        if (b & 1)
            res = res * a;
        a = a * a;
        b >>= 1;
    }
    return res;
}

ll id2(ll a, ll b, ll MOD)
{
    ll res = 1;
    while (b > 0)
    {
        if (b & 1)
        {
            res = ((res % MOD) * (a % MOD)) % MOD;
        }
        b = b >> 1;
        a = ((a % MOD) * (a % MOD)) % MOD;
    }
    return res;
}











































































































































































































































































































































string convert_binary(ll n)
{
    string str = "";
    while (n)
    {
        if (n & 1)
        {
            str.push_back('1');
        }
        else
        {
            str.push_back('0');
        }
        n = n / 2;
    }
    reverse(str.begin(), str.end());
    return str;
}



























































































































































































































































































































































































































































































































































































































































































































































ll check(string str1, string str2)
{
    if (str2.find(str1) != string::npos)
    {
        return 1;
    }
    return 0;
}
ll findMex(vli arr, ll n)
{
    sort(arr.begin(), arr.end());
    if (arr[0] != 0)
        return 0;
    rep(i, 1, n - 1)
    {
        if (arr[i] - arr[i - 1] <= 1)
            continue;
        return arr[i - 1] + 1;
    }
    return arr[n - 1] + 1;
}
const int maxn = 2e5 + 5;

vector<int> convert_string(ll a)
{
    vector<int> ans;
    ll b = a;
    while (b)
    {
        ans.push_back(b % 10);
        b /= 10;
    }
    return ans;
}




























































































































































































































int freq[26] = {0};
ll n, k;
string str;
ll even, odd;
bool id5(int mid)
{
    ll ev = even, od = odd;
    for (int i = 0; i < k; i++)
    {
        if ((mid % 2) == 1)
        {
            if (od > 0)
            {
                od--;
                ev -= (mid - 1);
            }
            else
            {
                ev -= (mid + 1);
                od++;
            }
        }
        else
        {
            ev -= mid;
        }
    }
    if (ev < 0)
    {
        return false;
    }
    return true;
}
vector<int> id3(string str)
{
    vector<int> v;
    for (auto it : str)
    {
        v.push_back(it - '0');
    }
    return v;
}


int vis[100005];
int dist[100005];
vector<pair<int,int>> adj[100005];
struct node
{
    int zero;
    int one;
};






































void solve()
{
    ll n;
    cin>>n;
    vector<ll> arr(n,0);
    int id6=0,id4=0,id0=0;
    for(auto &a:arr)
    {
        cin>>a;
        if(a==0)
        {
            id6+=1;
        }
        if(a==1)
        {
            id4+=1;
        }
    }
    sort(arr.begin(),arr.end());
    int prev=arr[0];
    for(int i=1;i<n;i++)
    {
        if((arr[i]==prev+1) && (id4>0) and (id6==0))
        {
            cout<<"NO\n";
            return;
        }
        prev=arr[i];
    }
    if(id4==n||id6==n)
    {
        cout<<"YES\n";
        return;
    }
    if(((id4>0)&&(id6>0)))
    {
        cout<<"NO\n";
        return;
    }
    cout<<"YES\n";
}

int main()
{

    

    

    

    

    

    

    ll t;
    scanf("%lld", &t);
    

    

    

    

    for (int i = 1; i <= t; i++)
    {
        

        solve();
    }
}









