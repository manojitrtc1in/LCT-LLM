




























































































using namespace std;

































typedef struct{ int sum,suf,pre,max;} Node;
int toint(const string &s) { stringstream ss; ss << s; int x; ss >> x; return x; }
const int MAXN = 2e5+100;
const int UP = 31;
const ll highest = 1e18;    
const double Phi =  1.618033988749894;
const int logn = 20;
const double root5 = 2.236067977;   



















































































































































const int N = 3e6+100;
int child[N][2],val[N];
int q,sz = 1;






string op;
void _insert(int x){
	int pos = 0;  
    for (int i=29; i>=0; --i){  
        int id = (x>>i)&1;  
        if (!child[pos][id])  
            child[pos][id] = sz++;  
        pos = child[pos][id];  
        ++val[pos];  
    }  
}
void _delete(int x){
	int pos = 0;  
    for (int i=29; i>=0; --i){  
        int id = (x>>i)&1;  
        pos = child[pos][id];  
        --val[pos];  
    }  
}
int qry(int x){
	int ans = 0,pos = 0;
	for(int i=29;i>=0;--i){
		int id = (x>>i)&1;
		if(id==1){
			if (child[pos][0] && val[child[pos][0]])
			{	
				pos = child[pos][0];
			}else{
				pos = child[pos][1];
				ans |= (1<<i);
			}
		}else{
			if(child[pos][1] && val[child[pos][1]]){
				pos = child[pos][1];
				ans |= (1<<i);
			}else{
				pos = child[pos][0];
			}
		}
	}
	return ans^x;
}
int main(){
	scanf("%d",&q);
	int num;
	_insert(0);
	while(q--){
		cin>>op>>num;
		if(op=="+"){
			_insert(num);
		}else if(op=="-"){
			_delete(num);
		}else{
			cout<<(qry(num))<<"\n";
		}
	}
	return 0;
}



























































































































































































































        












        








 



































        































































































































































































































































































































































































































































