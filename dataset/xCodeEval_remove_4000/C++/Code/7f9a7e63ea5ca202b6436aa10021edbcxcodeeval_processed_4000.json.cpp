




























































































using namespace std;
































typedef struct{ int sum,suf,pre,max;} Node;
int toint(const string &s) { stringstream ss; ss << s; int x; ss >> x; return x; }
const int MAXN = 2e5+100;
const int UP = 31;




const ll highest = 1e18;    




const double pi = acos(-1);
const double Phi =  1.618033988749894;
const int logn = 20;
const double root5 = 2.236067977;   
const ll inf = 1e18;
const int mod = 1e9+7;  
const int ini = -1e9;



int dx[4] = {-1,0,1,0};
int dy[4] = {0,1,0,-1};
const int N = 500;
int offset = 250;
int dp[N][N];
int n,cas;
void doit(int a,int b){
    int i,j,k,c = dp[a][b]/4;
    for(k=0;k<4;++k){
        int nx = a + dx[k];
        int ny = b + dy[k];
        dp[nx][ny] += c;
    }
    dp[a][b] -= 4*c;
}
int main(){
    int i,j,n,t,a,b;
    scanf("%d%d",&n,&t);
    dp[offset][offset] = n;
    bool ok = 1;
    while(ok){
        ok = 0;
        for(int i=1;i<N;++i){
            for(int j=1;j<N;++j){
                if(dp[i][j]>=4){
                    doit(i,j);  
                    ok = 1;
                }
            }
        }
    }
    int x,y;
    while(t--){
        scanf("%d%d",&x,&y);
        x += offset;
        y += offset;
        if(!inrange(x,y,N,N)){
            cout<<0<<"\n";
            continue;
        }
        cout<<dp[x][y]<<"\n";
    }
    return 0;
}   






















































































































































































































        












        








 



































        
































































































































































































































































































































































































































































