

















using namespace std;
typedef long long LL;



typedef unsigned long long UINT64;
typedef          long long  INT64;

class z64 {
private:
    static unsigned size;           

    static unsigned char *v;        

    static UINT64 maxPrime;         

    static UINT64 id0;          

    static unsigned *w;             


    

    static void SetComposite(UINT64 n);

    static void   fillFinish();     


    

    static bool   EisPrime( UINT64 n);  

    static UINT64 EithPrime( UINT64 i); 

    static UINT64 EPi( UINT64 n);       

    

    static UINT64 factor_Pollard_rho (UINT64 n);

    static bool   isPrime32(unsigned n);


public:
    

    z64 (){};
    ~z64(){};

    static void    toString(char *s, UINT64 n, int w=0);            

    static char   *toString(UINT64 n, int w=0);                     

    

    static bool    isFullSq (UINT64 n);                             

    static bool    isDiv357_11_13(UINT64 n);                        

    static UINT64  gcd      (UINT64 a, UINT64 b);                   

    static UINT64  mul_mod  (UINT64 a, UINT64 b, UINT64 n);         

    static UINT64  pow_mod  (UINT64 a, UINT64 b, UINT64 c);         

    static bool  MillerRabin(UINT64 a,UINT64 n);                    

    static void    euclid   (UINT64 a, UINT64 b, INT64 &x, INT64 &y, UINT64 &d); 

    static UINT64  inverse  (UINT64 a, UINT64 n);                   

    static bool    chineese (UINT64 a1, UINT64 b1, UINT64 a2, UINT64 b2, UINT64 &a3, UINT64 &b3); 


    

    static void   Efill(UINT64 mN);     

    static void   Efree();              

    static int    Esave(const char *fname); 

    static int    Eload(const char *fname); 

    

    

    


    

    static UINT64 maxN();               

    static UINT64 nPrimes();            

    static UINT64 maxP();               


    

    static bool   isPrime( UINT64 n);   

    static UINT64 p( UINT64 i);         

    static UINT64 Pi( UINT64 n);        

    static UINT64 NextPrime( UINT64 n); 

    static UINT64 PrevPrime( UINT64 n); 


    

    

    static UINT64 primeFactor( UINT64 n);       


    

    static UINT64 order( UINT64 a, UINT64 n);   

    static int    jacobi(UINT64 a, UINT64 n);   

    static char * factorString(UINT64 n);       

    static UINT64 msqrt( UINT64 a, UINT64 p);   


};



class Node{
public:
    LL value;
    LL factor_ptr;
    vector<LL> factors;
    bool operator<(const Node& other) const {return this->value > other.value;};
};

vector<LL> factorize(LL n){
    vector<LL> result;
    if(z64::isPrime(n)){
        result.push_back(n);
        return result;
    }
    for(LL i = 2; i <= n; i++){
        while(n % i == 0){
            result.push_back(i);
            n /= i;
            if(z64::isPrime(n)){
                result.push_back(n);
                sort(result.begin(), result.end());
                return result;
            }
        }
    }
    return result;
}

int nPrinted = 0;
void print(LL x){
    cout << x << " "; 
    nPrinted++;
    if(nPrinted == 100000) exit(0);    
}

void recurse(LL n, LL depth, LL maxDepth){
    priority_queue<Node> Q;
    Node root;
    root.value = 1;
    root.factor_ptr = 0;
    root.factors = {};
    vector<LL> factors = factorize(n);
    Q.push(root);
    while(!Q.empty()){
        Node X = Q.top(); Q.pop();
        bool prime = (X.factors.size() == 1);
        if(X.value == 1) print(1);
        else if(prime){
            for(LL i = 0; i < maxDepth - depth; i++) print(1);
            print(X.value);
        }
        else if(!prime){
            if(depth != maxDepth){
                recurse(X.value, depth + 1, maxDepth);
            }
            else print(X.value);
        }

        for(LL i = X.factor_ptr; i < factors.size(); i++){
            if(i == X.factor_ptr || factors[i] != factors[i-1]){
                Node Y;
                Y.value = X.value * factors[i];
                Y.factor_ptr = i + 1;
                Y.factors = X.factors;
                Y.factors.push_back(factors[i]);
                sort(Y.factors.begin(), Y.factors.end());
                Q.push(Y);
            }
        }
    }
}

int main(){
    LL X,k;
    cin >> X >> k;
    if(k == 0){
        cout << X << endl;
        return 0;
    }
    recurse(X,1,k);
    cout << endl;
}









unsigned z64::size;             

unsigned char *z64::v;          

UINT64 z64::maxPrime;           

UINT64 z64::id0;            

unsigned *z64::w;               






static int byte_weights[256] = {    

    0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8
}; 



static unsigned short small_primes[1024] = {
    

       2,   3,   5,   7,  11,  13,  17,  19,  23,  29,  31,  37,  41,  43,  47,  53,  

      59,  61,  67,  71,  73,  79,  83,  89,  97, 101, 103, 107, 109, 113, 127, 131,  

     137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,  

     227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,  

     313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409,  

     419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,  

     509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613,  

     617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719,  

     727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827,  

     829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941,  

     947, 953, 967, 971, 977, 983, 991, 997,1009,1013,1019,1021,1031,1033,1039,1049,  

    1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,  

    1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,  

    1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,  

    1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,  

    1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,  

    1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,  

    1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,  

    1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,  

    2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,  

    2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,  

    2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,  

    2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,  

    2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,  

    2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,  

    2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,  

    2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,  

    3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,  

    3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,  

    3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,  

    3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,  

    3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,  

    3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,  

    3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,  

    3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,  

    4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,  

    4217,4219,4229,4231,4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,  

    4339,4349,4357,4363,4373,4391,4397,4409,4421,4423,4441,4447,4451,4457,4463,4481,  

    4483,4493,4507,4513,4517,4519,4523,4547,4549,4561,4567,4583,4591,4597,4603,4621,  

    4637,4639,4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,  

    4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,  

    4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,5011,  

    5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,5153,5167,  

    5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,5297,5303,5309,  

    5323,5333,5347,5351,5381,5387,5393,5399,5407,5413,5417,5419,5431,5437,5441,5443,  

    5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,5527,5531,5557,5563,5569,5573,  

    5581,5591,5623,5639,5641,5647,5651,5653,5657,5659,5669,5683,5689,5693,5701,5711,  

    5717,5737,5741,5743,5749,5779,5783,5791,5801,5807,5813,5821,5827,5839,5843,5849,  

    5851,5857,5861,5867,5869,5879,5881,5897,5903,5923,5927,5939,5953,5981,5987,6007,  

    6011,6029,6037,6043,6047,6053,6067,6073,6079,6089,6091,6101,6113,6121,6131,6133,  

    6143,6151,6163,6173,6197,6199,6203,6211,6217,6221,6229,6247,6257,6263,6269,6271,  

    6277,6287,6299,6301,6311,6317,6323,6329,6337,6343,6353,6359,6361,6367,6373,6379,  

    6389,6397,6421,6427,6449,6451,6469,6473,6481,6491,6521,6529,6547,6551,6553,6563,  

    6569,6571,6577,6581,6599,6607,6619,6637,6653,6659,6661,6673,6679,6689,6691,6701,  

    6703,6709,6719,6733,6737,6761,6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,  

    6841,6857,6863,6869,6871,6883,6899,6907,6911,6917,6947,6949,6959,6961,6967,6971,  

    6977,6983,6991,6997,7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,7109,7121,  

    7127,7129,7151,7159,7177,7187,7193,7207,7211,7213,7219,7229,7237,7243,7247,7253,  

    7283,7297,7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,7417,7433,7451,7457,  

    7459,7477,7481,7487,7489,7499,7507,7517,7523,7529,7537,7541,7547,7549,7559,7561,  

    7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,7649,7669,7673,7681,7687,7691,  

    7699,7703,7717,7723,7727,7741,7753,7757,7759,7789,7793,7817,7823,7829,7841,7853,  

    7867,7873,7877,7879,7883,7901,7907,7919,7927,7933,7937,7949,7951,7963,7993,8009,  

    8011,8017,8039,8053,8059,8069,8081,8087,8089,8093,8101,8111,8117,8123,8147,8161   

}; 

static unsigned char small_pi[1024] = { 



   0,   0,   1,   2,   2,   3,   3,   4,   4,   4,   4,   5,   5,   6,   6,   6,  

   6,   7,   7,   8,   8,   8,   8,   9,   9,   9,   9,   9,   9,  10,  10,  11,  

  11,  11,  11,  11,  11,  12,  12,  12,  12,  13,  13,  14,  14,  14,  14,  15,  

  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  17,  17,  18,  18,  18,  

  18,  18,  18,  19,  19,  19,  19,  20,  20,  21,  21,  21,  21,  21,  21,  22,  

  22,  22,  22,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  

  24,  25,  25,  25,  25,  26,  26,  27,  27,  27,  27,  28,  28,  29,  29,  29,  

  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  

  31,  31,  31,  32,  32,  32,  32,  32,  32,  33,  33,  34,  34,  34,  34,  34,  

  34,  34,  34,  34,  34,  35,  35,  36,  36,  36,  36,  36,  36,  37,  37,  37,  

  37,  37,  37,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  40,  40,  40,  

  40,  40,  40,  41,  41,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  43,  

  43,  44,  44,  44,  44,  45,  45,  46,  46,  46,  46,  46,  46,  46,  46,  46,  

  46,  46,  46,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  48,  

  48,  48,  48,  49,  49,  50,  50,  50,  50,  51,  51,  51,  51,  51,  51,  52,  

  52,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  54,  54,  54,  54,  54,  

  54,  55,  55,  55,  55,  55,  55,  56,  56,  56,  56,  56,  56,  57,  57,  58,  

  58,  58,  58,  58,  58,  59,  59,  59,  59,  60,  60,  61,  61,  61,  61,  61,  

  61,  61,  61,  61,  61,  62,  62,  62,  62,  62,  62,  62,  62,  62,  62,  62,  

  62,  62,  62,  63,  63,  63,  63,  64,  64,  65,  65,  65,  65,  66,  66,  66,  

  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  67,  67,  67,  67,  67,  

  67,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  69,  69,  70,  70,  70,  

  70,  71,  71,  71,  71,  71,  71,  72,  72,  72,  72,  72,  72,  72,  72,  73,  

  73,  73,  73,  73,  73,  74,  74,  74,  74,  74,  74,  75,  75,  75,  75,  76,  

  76,  76,  76,  76,  76,  77,  77,  77,  77,  77,  77,  77,  77,  78,  78,  78,  

  78,  79,  79,  79,  79,  79,  79,  79,  79,  80,  80,  80,  80,  80,  80,  80,  

  80,  80,  80,  81,  81,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  83,  

  83,  84,  84,  84,  84,  84,  84,  85,  85,  85,  85,  86,  86,  86,  86,  86,  

  86,  87,  87,  87,  87,  87,  87,  87,  87,  88,  88,  88,  88,  89,  89,  90,  

  90,  90,  90,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  92,  

  92,  92,  92,  92,  92,  92,  92,  93,  93,  93,  93,  94,  94,  94,  94,  94,  

  94,  94,  94,  95,  95,  95,  95,  96,  96,  96,  96,  96,  96,  97,  97,  97,  

  97,  97,  97,  97,  97,  97,  97,  97,  97,  98,  98,  99,  99,  99,  99,  99,  

  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99, 100, 100, 100,  

 100, 100, 100, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 102, 102, 102,  

 102, 102, 102, 103, 103, 103, 103, 103, 103, 104, 104, 105, 105, 105, 105, 105,  

 105, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107,  

 107, 108, 108, 108, 108, 108, 108, 109, 109, 110, 110, 110, 110, 110, 110, 111,  

 111, 111, 111, 111, 111, 112, 112, 112, 112, 113, 113, 114, 114, 114, 114, 114,  

 114, 114, 114, 114, 114, 114, 114, 115, 115, 115, 115, 115, 115, 115, 115, 115,  

 115, 116, 116, 117, 117, 117, 117, 118, 118, 118, 118, 118, 118, 119, 119, 119,  

 119, 119, 119, 120, 120, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121,  

 121, 122, 122, 122, 122, 123, 123, 123, 123, 123, 123, 124, 124, 124, 124, 124,  

 124, 124, 124, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 126, 126, 126,  

 126, 126, 126, 126, 126, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 128,  

 128, 128, 128, 128, 128, 128, 128, 129, 129, 129, 129, 129, 129, 130, 130, 130,  

 130, 130, 130, 131, 131, 131, 131, 132, 132, 132, 132, 132, 132, 132, 132, 133,  

 133, 133, 133, 133, 133, 134, 134, 134, 134, 135, 135, 135, 135, 135, 135, 135,  

 135, 136, 136, 136, 136, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137,  

 137, 137, 137, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 139, 139, 139,  

 139, 139, 139, 139, 139, 139, 139, 139, 139, 140, 140, 141, 141, 141, 141, 141,  

 141, 141, 141, 141, 141, 142, 142, 143, 143, 143, 143, 144, 144, 145, 145, 145,  

 145, 145, 145, 145, 145, 145, 145, 146, 146, 146, 146, 146, 146, 146, 146, 146,  

 146, 146, 146, 146, 146, 147, 147, 147, 147, 148, 148, 149, 149, 149, 149, 150,  

 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 151, 151, 151,  

 151, 152, 152, 153, 153, 153, 153, 154, 154, 154, 154, 154, 154, 154, 154, 154,  

 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 155, 155, 155, 155, 156,  

 156, 156, 156, 156, 156, 156, 156, 157, 157, 157, 157, 157, 157, 157, 157, 157,  

 157, 158, 158, 158, 158, 158, 158, 158, 158, 159, 159, 159, 159, 160, 160, 160,  

 160, 160, 160, 161, 161, 161, 161, 161, 161, 162, 162, 162, 162, 162, 162, 162,  

 162, 162, 162, 162, 162, 162, 162, 163, 163, 163, 163, 164, 164, 164, 164, 164,  

 164, 165, 165, 165, 165, 165, 165, 166, 166, 166, 166, 166, 166, 166, 166, 167,  

 167, 167, 167, 167, 167, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,  

 168, 169, 169, 169, 169, 170, 170, 170, 170, 170, 170, 171, 171, 172, 172, 172   

}; 


static unsigned char coprime_3_5_7_11_11[1877] = { 

     22,  1,139,160,101,202, 32,108,153,150, 76, 82,162, 44, 82,148, 73, 75,180, 97,  

    216, 48, 44,145,166, 68, 88,132, 44,147, 18, 73,195,176,101, 26, 50, 69,137, 54,  

     72, 89,  2, 45,210,134, 33,201,180,100, 18, 18,104,145,178, 72, 82,166, 13,193,  

    132, 41,201, 48,  5,218,  2,101,153, 52, 76, 11,  6, 45,147,146, 97, 74,180,  5,  

    202, 48,105, 25, 38,  8, 89,166, 36,211,148,104,137,132, 97, 82, 50, 77, 24,180,  

      4, 11,166, 41,192, 22, 41,203,  4,101,202, 48, 44,153,148, 68, 83,162,  9, 82,  

    146, 72,195,164, 97,216, 34, 45,145,162, 68, 91,164, 32, 19,150,105,195, 48, 37,  

     90, 18, 77,136,150,  8, 89, 36, 45, 67,134, 97,139,180,100,146, 18, 77,145,162,  

     76, 90,162, 13,193,150, 97,129, 52, 36,202, 34, 97, 25,148, 76, 26,132, 45,211,  

    144,105, 74,148, 65,202, 50,104,129, 54, 12, 25,166, 37,211,144, 72,139,144,101,  

    146, 34,109,  8, 54, 76, 67,134, 40,208, 22, 41, 75,164,101, 90, 48, 40,153,150,  

     76, 82,130, 45, 80,  6, 73,203,176, 65,152, 50, 37,153,166, 68, 75, 32, 44,147,  

    134,105,192,176, 37, 82, 48, 76,  9,182, 72, 89, 38, 44,211,132, 33,201,164,100,  

    154, 18, 77,145, 50, 68, 10,166, 13,131, 22, 97,201, 20,  5,218, 34, 37,153,164,  

     76, 25,134, 41,211,146,104, 66,180, 65, 72, 34,105,153, 48, 12, 91,166, 37,146,  

    148,104,139, 20,101,194, 18,109, 24,182,  4, 75,164,  9, 81, 18, 41,203,164,100,  

    208, 48,108,145,134, 76, 83,162,  9, 82,150, 65,139,180, 33,200, 50, 45,152,134,  

     68, 90, 36, 44,131,148,105,  3,176, 97, 90, 50, 76,129,178, 72, 89, 38, 45,209,  

    130, 65,195,180,100,154, 18,105,  1, 50, 76, 90,132, 13,194,150, 41,200, 20, 37,  

     90, 34, 97,137,180, 76, 19,134, 37,209,130, 73, 74,176, 69,202, 34, 97,153, 54,  

     12, 67, 38, 36,211,148,104, 10,148, 37,210, 48, 45, 24,182, 72, 74,134, 40,209,  

     22, 41,201,164,101,154, 48, 68,153,150, 68, 19,162, 45, 66,  6, 73,201,148, 97,  

    208, 50, 44,153,164, 64, 91,164, 40,147,148, 40,195,176,101, 88,  2, 77,137, 50,  

     72, 73, 38, 37,147,134, 97,203, 52, 68,154, 18,109,144,162, 12, 88,164, 13, 67,  

    150,104,201, 52, 32, 82, 34,101,153,164, 12, 27,130, 13,210,146, 97, 10, 52, 69,  

    202, 50,105,153, 22,  4, 90,166,  5,211,144,104, 11,132, 97,208, 50,108, 16,182,  

     76, 73,166, 41, 81, 18,  9,203,164, 37,154, 48,108,136, 22, 76, 83,  2, 45, 66,  

    150,  9,139,180, 97, 88, 50,  9,153,162, 68, 83,164, 44,145,134,105,195,176, 68,  

     90, 50, 65,  9,182, 72, 73, 36, 45,211,134, 97,202,148, 36,154, 16,109,  1,178,  

     72, 26,166,  4,195,150, 73,201, 32, 37,218, 34, 69,153,180, 68, 19,134, 44,195,  

     18,105, 74,148, 69,202, 48, 41,153, 52, 12, 90,134, 33,211, 20,104,131,148,101,  

    144, 34,101, 24,178, 76, 75,162, 33,145,  6, 41,201, 36,101,210, 16,108,152,150,  

      8, 83,160, 45, 82,148,  9,203,180, 96,208, 18, 45,153, 38, 68, 75,160, 12,147,  

    150, 97,131,176, 69, 74, 50, 77,137,134, 72, 88, 38, 45,211,132, 96, 75,180, 96,  

     26, 18,108,145,176, 12, 88,166, 13,194,146, 73,201, 52, 37,138, 34,101,137, 52,  

     68, 27,134, 13,210,146, 41, 74,164, 69, 72, 50,105,145, 54, 12, 83,166, 33, 81,  

    132,104,139,144,  5,210, 50,101, 24,150, 76, 75, 38, 41,193, 22, 41,138,164, 37,  

    218, 48, 76, 25,146, 72, 83,162, 44, 80,150, 73,193,164, 96,216, 50,  9, 25,166,  

     68, 27,164, 44,131, 22,105,194,144,101, 90, 50, 13,137,180, 72, 25, 38, 33,211,  

    134, 64,195,176,100,152,  2,109,145,178, 76, 82,166,  4,131,150,105, 73, 52, 37,  

    218,  0, 37,152,180, 12, 26,132, 45, 83, 18,105, 74,180, 68,130, 50, 97,153, 38,  

     12, 91,162,  5,211,132, 96,137,148,101,194, 50,108, 24,150, 72, 74,166, 41,209,  

     20, 41, 75,164, 97,218, 16,108,145, 22, 76, 65,162, 45, 18,146, 65,203,180, 65,  

    152, 50, 45,137, 38, 68, 89,132, 44,146,150, 40,195,176, 97, 90, 50, 73,137,180,  

      8, 81, 38, 45,208,134, 97,203, 48, 68,138, 18,101,145,178, 68, 74, 38, 13,195,  

    146,105,200, 36, 37,216, 32,101, 17,180, 72, 27,134, 40, 83,146,105, 72,164,  5,  

    202, 50, 73,152, 22,  4, 27, 38, 37,195, 20,104,139,148,101,210, 50, 13, 24,176,  

     76, 75,166, 41,209, 22, 40,195,164,100,216, 32,104, 25,146, 76, 83,160, 37, 18,  

    150, 73,202, 20, 97,216, 18, 45,136,166,  4, 27,164, 36, 19,150, 73,195,176,100,  

     82, 34, 77,137,166, 72, 81, 34, 12,211,134, 97, 11,180,100,138, 16, 45,145,146,  

     76, 90,134, 13,195, 20,105, 73, 52, 33,154, 34,100,145,180, 76, 25,130, 45,211,  

    130, 73, 72,180, 69,130, 50,104,137, 54,  8, 91,134, 37,210,148, 40,139,148,101,  

     82, 18,105, 24, 54, 76, 67,166, 41,145,  6, 33,203,160, 69,218, 48,100,153,134,  

     76, 65, 34, 45, 82,150, 72,202,180, 33, 88, 48, 45, 25,164,  0, 91,164, 44,146,  

    150,105,193, 32,101, 74, 50, 77,137,182, 64, 25, 38, 13,195,  2, 97,203,132,100,  

    152, 18, 45,145,176, 76, 90,166,  9, 67,150,104,193, 52, 37,216, 34,101,152,144,  

     76, 27,  6, 37,131,146,105, 10, 52, 69,202, 18, 73,152, 50, 12, 91,164, 37, 81,  

    148,104,131,148,100,210, 50,105, 24,166, 76, 75,160,  9,209, 22, 33,138,132,101,  

    202, 48,108,137,150, 76, 18,162, 37, 82,148, 73, 75,176, 97,216, 34, 44,145,166,  

     68, 81,164, 44,147,146, 73, 67,176,101, 26, 48, 13,137, 54, 72, 88,  6, 45,210,  

      6, 33,203,180,100, 26, 18, 97,145,178, 76, 82,162, 13,193,134,105,201, 48,  5,  

    210, 34,100,153,180, 72, 11,  6, 45,211,144, 41, 74,180,  5,202, 16,105, 25, 54,  

      8, 75,166, 36,147,148, 96,137,132, 69,210, 50, 77, 24,166, 68,  9,166, 41,193,  

     22, 40,203,132, 97, 90, 48, 44,153,148, 12, 83,162, 41, 82,150, 72,195, 52, 97,  

    200, 34, 45,153,162, 68, 91,164,  4,147,146,105,195, 32,101, 88, 18, 77,128,182,  

      8, 89, 36, 41, 83,134, 97,203,180, 36,146, 18,109,144,130, 76, 90, 34, 13,195,  

    150, 97,137, 52, 37,202, 34, 69,153,144, 76, 26,134, 45,209,144,105, 66,180, 64,  

    202, 50,104, 17, 54, 12, 89,164, 37,211,144, 72,138,148,101,146, 50,109,  8, 54,  

     76, 11,134, 33,208, 22,  9,203,160,101, 90, 32,104,153,150, 76, 83,162, 44, 80,  

    134, 73, 75,176, 65,216, 48, 37,153,166, 68, 74,  4, 44,147, 22,105,194,176, 37,  

     26, 48, 69,  9,182, 72, 89, 34, 44,211,134, 97,201,164,100,146, 18, 76,145,178,  

     64, 26,166, 13,195, 20, 41,201, 20, 37,218,  2, 37,153, 52, 76, 11,134, 41,147,  

    146, 96, 66,180, 69,200, 34,105,153, 34, 12, 89,166, 37,147,148,104,139, 20, 97,  

     82, 18,109, 24,180, 12, 75,164, 41, 80, 22, 41,203, 36,100,194, 48,108,153,134,  

     68, 83,162, 13, 82,146, 65,139,164, 97,200, 50, 45,145,134, 68, 90,164, 40, 19,  

    148,105, 67,176, 33, 90, 50, 76,128,150, 72, 89, 38, 45,195,130, 65,139,180,100,  

    154, 18, 77,129, 50, 76, 90,134, 13,192,150, 41,193, 52, 36, 90, 34, 97, 25,180,  

     76, 19,132, 45,209,130,105, 74,144, 69,202, 50, 97,137, 54, 12, 11, 38, 37,211,  

    148, 72,138,144, 37,210, 32,109, 24,182, 72, 67,166, 40,209, 22, 41, 73,164,101,  

    218, 48, 12,153,150, 68, 18,130, 45, 66, 22, 73,203,148, 97,152, 50, 37,153,164,  

     68, 91,160, 40,147,134,104,193,176,101, 80, 34, 76,137,178, 72, 89, 38, 37,147,  

    132, 33,203, 52,100,154, 18,109,144, 50, 12, 74,164, 13,  3,150, 97,201, 52,  4,  

    210, 34,101,153,164, 76, 25,130, 13,211,146, 96, 10,180, 65, 74, 50,105,153, 20,  

     12, 90,166, 37,210,148,104, 11, 20, 97,194, 50,108, 16,182, 68, 73,166,  9,209,  

     18,  9,203,164,101,152, 48,108,129, 22, 76, 83,130, 41, 82,150,  9,203,180, 33,  

     88, 50, 41,152,134, 68, 83, 36, 44,129,134,105,131,176, 69, 90, 50, 69,137,178,  

     72, 73, 38, 45,209,134, 97,194,180, 36,154, 16,105, 17,178, 72, 90,164, 12,195,  

    150,105,200,  4, 37,218, 34, 69,137,180, 68, 27,134, 37,195, 18, 73, 74,144, 69,  

    202, 34, 41,153, 52, 12, 83,166, 32,211,148,104,  3,148,101,208, 32, 45, 24,178,  

     76, 74,134, 33,145, 22, 41,203, 36,101,154, 16,100,152,150, 12, 83,160, 45, 82,  

    134, 73,201,180, 96,208, 50, 44,153,166, 64, 91,160, 12,147,148, 33,131,176,101,  

     74, 18, 77,137, 22, 72, 72, 38, 45,147,132, 97, 75,180, 64,154, 18,108,145,162,  

     76, 88,166, 13,195,146, 72,201, 52, 33, 26, 34,101,137, 52, 12, 27,134, 45,210,  

    146, 41, 74, 52, 69, 74, 50,105,153, 54,  4, 83,166,  5,209,128,104               

};






static unsigned BCompos[NBCompos] = {
       1373653U,    1530787U,    1987021U,    2284453U,    3116107U,    5173601U,    6787327U,   11541307U,
      13694761U,   15978007U,   16070429U,   16879501U,   25326001U,   27509653U,   27664033U,   28527049U,
      54029741U,   61832377U,   66096253U,   74927161U,   80375707U,  101649241U,  102690677U,  105919633U,
     106485121U,  117987841U,  143168581U,  154287451U,  161304001U,  193949641U,  206304961U,  218642029U,
     223625851U,  247318957U,  252853921U,  259765747U,  275619961U,  314184487U,  326695141U,  390612221U,
     393611653U,  489994201U,  540654409U,  572228929U,  579606301U,  581618143U,  682528687U,  717653129U,
     745745461U,  787085857U,  846961321U,  871157233U,  927106561U,  938376181U,  960946321U,  979363153U,
     981484561U, 1028494429U, 1157839381U, 1168256953U, 1236313501U, 1463178817U, 1481626513U, 1518290707U,
    1521221473U, 1538012449U, 1638294661U, 1854940231U, 1856689453U, 1860373241U, 1909566073U, 1921309633U,
    1991063449U, 1995830761U, 2057835781U, 2117555641U, 2217879901U, 2284660351U, 2311558021U, 2323147201U,
    2412172153U, 2431144801U, 2626783921U, 2693739751U, 2736316301U, 2781117721U, 2837917633U, 3028586471U,
    3056100623U, 3215031751U, 3299246833U, 3344191241U, 3407772817U, 3513604657U, 3697278427U, 3708905341U,
    3863326897U, 3867183937U, 4060942381U, 4079665633U, 4117447441U, 4275011401U, 4277526901U };


bool z64::isPrime32(unsigned N)         

{
    if( N <   2) return false;
    if( N <1024) return small_pi[N-1]==small_pi[N]? false : true;
    

    if( (N& 1) == 0) return false;              

    if( (N% 3) == 0) return false;
    if( (N% 5) == 0) return false;
    if( (N% 7) == 0) return false;
    if( (N%11) == 0) return false;
    if( (N%13) == 0) return false;
    if( (N%17) == 0) return false;
    if( (N%19) == 0) return false;
    if( !MillerRabin( 2, N) ) return false;
    if( !MillerRabin( 3, N) ) return false;

    

    

    int lo =0, hi=NBCompos-1, mid=hi>>1;
    while(lo<hi-1)
    {
        unsigned k = BCompos[mid];
        if( k==N ) return false;
        if( k> N ) hi=mid; else lo=mid;
        mid = (lo+hi)>>1;
    }
    return true;
} 



void    z64::toString(char *s, UINT64 n, int w) 

{
    

    

    

    

    

    

    

    

    

    int wi = n<                  10  ? 1 :
             n<                 100  ? 2 :
             n<                1000  ? 3 :
             n<               10000  ? 4 :
             n<              100000  ? 5 :
             n<             1000000  ? 6 :
             n<            10000000  ? 7 :
             n<           100000000  ? 8 :
             n<          1000000000  ? 9 :
             n<         10000000000LL?10 :
             n<        100000000000LL?11 :
             n<       1000000000000LL?12 :
             n<      10000000000000LL?13 :
             n<     100000000000000LL?14 :
             n<    1000000000000000LL?15 :
             n<   10000000000000000LL?16 :
             n<  100000000000000000LL?17 :
             n< 1000000000000000000LL?18 :
             n<10000000000000000000ULL?19 : 20;
    if( w<wi ) w=wi;
    s[w--]=0;
    s[w]=48;
    for( int i=0; i<=w-wi; i++ ) s[i]=32;       

    for( ; n>0; n/=10  ) s[w--] = 48 + (n%10);
}


static char z64_toString[32];
char * z64::toString(UINT64 n, int w)   

{
    toString(z64_toString, n, w);
    return z64_toString;
}





bool z64::isFullSq (UINT64 n)                               

{
    UINT64 sq = sqrt64(n);
    return sq*sq==n;
}


bool z64::isDiv357_11_13(UINT64 n)  

{
    

    

    

    unsigned x = (unsigned)(n%15015);
    return ((coprime_3_5_7_11_11[x>>3])&(1<<(x&7)))==0;
}


UINT64  z64::gcd(UINT64 a, UINT64 b)    

{
    UINT64 t;
    if( a==0 ) return b;
    if( b==0 ) return a;
    if( a<b ) { t=a; a=b; b=t; }
    

    while( b>0 ) { t=a%b; a=b; b=t; }
    return a;
} 



UINT64  z64::mul_mod(UINT64 a, UINT64 b, UINT64 c)        

{

    UINT64 res=0;
    if(a>c) a %= c;
    while(b){
        if(b&1) {res+=a; if(res>c) res-=c; b--; }
        else    { a<<=1; if(a  >c) a  -=c; b>>=1;}
    }
    return res;

  UINT64 d;                     

  

  asm ("mov %1, %%rax;"         

       "mul %2;"                

       "div %3;"                

       "mov %%rdx, %0;"         

       :"=r"(d)                 

       :"r"(a), "r"(b), "r"(c)  

       :"%rax", "%rdx"          

      );
  return d;

} 



UINT64 z64::pow_mod(UINT64 a, UINT64 b, UINT64 c)   

{
    if( c==0 ) return 0; 

    if( a>c) a %= c;
    UINT64 x = 1;
    while(b>0) {
        if(b & 1) x = mul_mod(x,a,c);
        a = mul_mod(a,a,c);
        b>>=1;
    }
    return x;
} 



void z64::euclid(UINT64 a, UINT64 b, INT64 &x, INT64 &y, UINT64 &d) 

{
    INT64 q, r, x1, x2, y1, y2;
    if(b==0) { d = a, x = 1, y = 0; return; }
    if(a==0) { d = b, x = 0, y = 1; return; }
    if(b==1) { d = 1, x = 0, y = 1; return; }
    if(a==1) { d = 1, x = 1, y = 0; return; }
    

    x2 = 1; x1 = 0; y2 = 0; y1 = 1;
    while(b>0) {
        q = a/b;        r = a - q*b;
        x = x2 - q*x1;  y = y2 - q*y1;
        a = b;          b = r;
        x2 = x1;        x1 = x;
        y2 = y1;        y1 = y;
    }
    d = a; x = x2; y = y2;
}



UINT64  z64::inverse(UINT64 a, UINT64 n)        

{
    if( n<2 ) return 0;
    UINT64 d;
    INT64 x, y;
    euclid(a, n, x, y, d);
    if(d==1)
    {
        while(x<0) x+=n;
        return x;
    }
    return 0;
} 











bool    z64::chineese (UINT64 a1, UINT64 b1, UINT64 a2, UINT64 b2, UINT64 &a3, UINT64 &b3) 

{
    double a12;
    if( b1>=a1 ) b1 %=a1;
    if( b2>=a2 ) b2 %=a2;
    a3=b3=0;
    if( a1==0 || a2==0 ) return false;
    if( a1==1 ) { a3=a2; b3=b2; return true; }
    if( a2==1 ) { a3=a1; b3=b1; return true; }
    

    UINT64 d = gcd(a1,a2);
    if( d==1 )                                              

    {
        a12 = (double)a1; a12 *= a2; if( a12>1e19) { a3=b3=0; return false; } 

        a3 = a1*a2;
        UINT64 r = (b2>=b1? b2-b1 :  a2 + b2 - b1%a2) ;     

        r = z64::mul_mod(r, z64::inverse(a1,a2), a2 );      

        b3 = b1 + z64::mul_mod(r, a1, a3);                  

        if( b3>a3 ) b3 -= a3;
        return true;
    }
    

    UINT64 id2 = a2/d;
    a12 = (double)a1; a12 *= id2; if( a12>1e19) { a3=b3=0; return false; } 

    a3 = a1*id2;                                            

    UINT64 r = (b2>=b1? b2-b1 :  a2 + b2 - b1%a2) ;         

    if( r%d != 0 ) return false;
    r /= d;                                                 

    r = z64::mul_mod(r, z64::inverse(a1/d, id2), id2);
    b3 = b1 + z64::mul_mod(r, a1, a3);                      

    if( b3>a3 ) b3 -= a3;
    return true;
}



bool z64::MillerRabin(UINT64 a, UINT64 N)   





















{
    if( (N&1) == 0) return false;           

    UINT64 q=N>>1;                          

    int k=1;
    while( (q&1)==0 ) { k++; q>>=1; }
    UINT64 x = pow_mod(a, q, N);            

    if( x==1 ) return true;
    while( k-- >0 )
    {
        if( x+1==N ) return true;
        x = mul_mod(x,x,N);
    }
    return false;
} 

























void   z64::Efree()             

{
    if( size==0 ) return;
    delete[]v; delete[]w;
    size=0;
    maxPrime=id0=0;
}


int   z64::Esave(const char *fname) 

{
    if( size==0 ) return 3;
    FILE *f=fopen(fname, "wb");
    if( !f ) { fclose(f); return 1; }
    unsigned res = fwrite( v, 1, (unsigned)size, f );
    fclose(f);
    return res == (unsigned)size? 0 : 2;
}


int   z64::Eload(const char *fname) 

{
    if( size>0 ) Efree();
    FILE *f=fopen(fname, "rb");
    if( !f ) { fclose(f); return 1; }
    

    fseek( f, 0, SEEK_END);
    unsigned Size = ftell(f);
    

    fseek( f, 0, SEEK_SET);

    if( size>0 ) { delete[]v; delete[]w; }
    size = Size;
    v = new unsigned char[size];
    w = new unsigned [size/64];
    unsigned res = fread( v, 1, Size, f );
    fclose(f);
    if( res != Size) return 2;
    fillFinish();               

    return 0;
}


UINT64 z64::maxN()   { return 16*(UINT64)size+1; }  

UINT64 z64::maxP()   { return maxPrime;  }  

UINT64 z64::nPrimes(){ return id0;   }  



bool  z64::EisPrime( UINT64 n)  

{
    if( size==0 ) Efill(1<<24); 

    if( (n&1) == 0 ) return false;
    UINT64 y = (n>>1)-1;
    unsigned x8 = (unsigned)(y>>3);
    if( x8>=size ) return true;
    unsigned x3 = (unsigned)(y &7);
    return  (v[x8]&(1<<x3))> 0? 1 : 0;
}


static int power2D[8] = {255-1, 255-2, 255-4, 255-8, 255-16, 255-32, 255-64, 255-128};
void z64::SetComposite(UINT64 n)    

{
    UINT64 y = (n>>1)-1;
    unsigned x8 = (unsigned)(y>>3);
    unsigned x3 = (unsigned)(y &7);
    v[x8] &= power2D[x3];
}


void z64::Efill(UINT64 mN)  

{
    if( mN > 17179869184ULL ) return;           

    unsigned usize =(unsigned) ((mN+14)>>4);
    if( usize<=size ) return;               

    if( size>0 ) Efree();
    if( usize==0) usize=64;
    usize = (usize+63)& 0xFFFFFFC0;         

    size = usize;
    v = new unsigned char[usize];
    w = new unsigned [usize/64];
    memset(v,255,usize);

    UINT64 nMax = maxN();
    UINT64 n=3;
    UINT64 dn = 2;  

    UINT64 n2;      

    UINT64 nn;      

    UINT64 k;

    for(n=3; n<=nMax; )
    {
        if( EisPrime(n))
        {
            n2 = n+n; nn = n*n;
            for( k=nn; k<=nMax; k+=n2)
                SetComposite(k);
            if( nn>nMax ) break;
        }
        

        if(n==3) n=5;
        else
        {
            n  += dn;
            dn = 6-dn;  

        }
    }
    fillFinish();               

}



void   z64::fillFinish()        

{
    maxPrime = maxN();
    while( !EisPrime(maxPrime) ) maxPrime -= 2;
    

    w[0] = 172;
    id0 = w[0];
    unsigned i,j, k, kj;
    for( i=1, j=64; j<size; i++, j+=64 )
    {
        w[i] = w[i-1];
        for( k=0, kj=j; k<64; k++, kj++ )
            w[i] += byte_weights[v[kj]];
        id0 = w[i];
    }
}



static unsigned byteWeight( unsigned char *v, unsigned i0, unsigned i1 )
{
    unsigned s=0;
    for( unsigned i=i0; i<i1; i++ )
        s += byte_weights[v[i]];
    return s;
}


UINT64 z64::EPi( UINT64 n) 

{
    

    

    if( n<1024 ) return small_pi[n];
    if( n>=maxPrime ) return id0;

    

    UINT64 y = (n-3)>>1;
    unsigned iv = (unsigned)(y>>3);     

    unsigned iw = iv>>6;                

    unsigned pi = (iw==0? 1: w[iw-1]);
    pi += byteWeight(v, iv&0xFFFFFFC0, iv );
    

    int iy = 1+(int) (y&7);
    int viv = v[iv];
    while( iy>0 && viv>0 )
    {
        if(viv&1) pi++;
        iy--;
        viv>>=1;
    }
    return pi;
}



UINT64 z64::EithPrime( UINT64 i)    

{
    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    if( i<1024 ) return small_primes[i];
    if(id0<i) z64::Efill(i+1);
    if(i>=id0) return 0;                            

    

    unsigned iw, np;
    unsigned wsize=size>>6;
    if     (i<172) {iw=0; np=  1;}
    else if(i<309) {iw=1; np=172;}
    else
    {
        double co = 0.0011*log((double)i);
        iw = (unsigned) (co*i);                     

        if( iw>=wsize ) iw=wsize-1;
        

        int delta = (int)(i-w[iw]);
        iw += (int)(co*delta);
        if( iw>=wsize ) iw=wsize-1;

        while( w[iw] <=i && iw<wsize ) iw++;
        while( w[iw-1]>i ) iw--;
        np=w[iw-1];
    }
    

    unsigned iv;
    for( iv=64*iw; ; iv++ )
    {
        unsigned dnp = byte_weights[v[iv]];
        if( np+dnp>i ) break;
        np += dnp;
    }
    

    UINT64 p = iv;
    p <<=4; p+=3;           

    

    int viv=v[iv];
    while( viv>0 )
    {
        if( viv&1) np++;
        if( np>i ) break;
        viv >>= 1;
        p += 2;
    }
    return p;
} 



bool   z64::isPrime( UINT64 n)  

{
    if( n <   2) return false;
    if( n <1024) return small_pi[n-1]==small_pi[n]? false : true;
    if( (n& 1) == 0) return false;              

    

    if(isDiv357_11_13(n) ) return false;        

    
    for( int i=0; i<12; i++ )
        if( !MillerRabin( small_primes[i], n) ) return false;
    return true;
}


UINT64 z64::p( UINT64 i)    

{
    return i==0? 0 : EithPrime(i-1);
}


UINT64 z64::Pi( UINT64 n)       

{
    return EPi(n);
}


UINT64 z64::NextPrime( UINT64 n) 

{
    if( n <2 ) return 2;
    if( n==2 ) return 3;
    if( size==0 ) Efill(1<<24); 

    if( n&1 ) n+=2; else n++;   

    while( !isPrime(n) ) n+=2;
    return n;
}


UINT64 z64::PrevPrime( UINT64 n) 

{
    if( n <3 ) return 0;
    if( n==3 ) return 2;
    if( size==0 ) Efill(1<<24); 

    if( n&1 ) n-=2; else n--;   

    while( !isPrime(n) ) n-=2;
    return n;
}


UINT64 z64::factor_Pollard_rho (UINT64 n)   

{
    

    UINT64 sn = sqrt64(n);
    if( sn*sn==n ) return sn;
    UINT64 x, y, i, stage, diff, g, x0;
    for( x0=1; x0<100000; x0+=3 )
    {
        for( x=x0, y=0, i=0, stage=2; i<=1100000; i++ )
        {
            diff = x>y? x-y: y-x;                   

            if( diff==0 ) break;                    

            if( (g=gcd(diff,n))>1 ) return g;
            if( i==stage ) { y=x; stage*=2; }
            x = 1+mul_mod(x,x,n);   if(x==n)x=0;
        }
    }
    return 1;   

}



UINT64 z64::primeFactor( UINT64 n)      

{
    if( n<2 ) return 1;
    if( (n&1) == 0) return 2;           

    if( (n%3) == 0) return 3;
    if( (n%5) == 0) return 5;
    if( (n%7) == 0) return 7;
    while( n>1 && !z64::isPrime(n) ) n =factor_Pollard_rho(n);
    return n;
}



UINT64 z64::order( UINT64 a, UINT64 n)  

{
    UINT64 ord=n-1, n1=n-1, p, ord1;
    for( ;; )
    {
        p = z64::primeFactor(n1);
        if( p==1 ) return ord;
        while( ord%p==0 && z64::pow_mod(a, ord1=ord/p, n)==1 ) ord=ord1;
        while( n1%p==0 ) n1 /= p;
        if(n1==1) return ord;
    }
}



int z64::jacobi (UINT64 a, UINT64 n)    


{
    a %= n;
    int s=1;
    for(;;)
    {
        if (a == 0) return 0;
        if( (n&1)==0 )                  

        {
            if( (a&1)==0 ) return 0;    

            while( (n&1)==0 ) n>>=1;
            

        } else                          

        {
            while( (a&3)==0 ) a>>=2;    

            if( (a&1)==0 )              

            {
                int n7 = (int) n&7;
                if( n7==3 || n7==5 ) s=-s;
                a >>=1;
            }
            

        }
        

        if (a == 1) return s;
        if( n-a<a ) 

        {
            if(n&2) s=-s;
            a=n-a;
            continue;
        }
        

        if( (a&2) && (n&2) ) s=-s;
        UINT64 t=a; a=n%a; n=t;         

    }
    return 777;     

}



static char id1[1024];
char * z64::factorString(UINT64 n)  

{
    

    char factorString_1[24];
    UINT64 fct;
    int k;
    char *s1=id1;
    *s1=0;
    while(n>1)
    {
        fct = z64::primeFactor(n);
        for(k=0; n%fct == 0; k++)
            n/=fct;
        

        

        if(k==1) toString(factorString_1, fct );
        else     sprintf(factorString_1, "%s^%d", toString(fct ), k );
        

        

        

        

        

        

        strcpy(s1, factorString_1);
        s1 += strlen(factorString_1);
        if(n>1) strcpy(s1++, "*");
    }
    return id1;
}



UINT64 z64::msqrt( UINT64 a, UINT64 p)  

{
    if( !isPrime(p) ) return 0;
    if( jacobi(a,p) != 1 ) return 0;
    if( a>p ) a %= p;
    UINT64 sq = sqrt64(a);
    if( sq*sq==a ) return sq;

    

    unsigned r;
    r = (unsigned) (p&3);               

    if( r==3 )
    {
        UINT64 k = (p+1)>>2;            

        return z64::pow_mod(a, k, p);   

    }
    

    r = (unsigned) (p&7);               

    if( r==5 )
    {
        UINT64 k = (p>>3)+1;            

        UINT64 y =z64::pow_mod(a, k, p);

        if( z64::mul_mod(y,y,p) == a ) return y;
        

        return z64::mul_mod( z64::pow_mod(2, 2*k-1, p), y, p);
    }
    

    

    int s=1; UINT64 k = p>>1;
    while( (k&1)==0 ) { s++; k>>=1;}
    

    UINT64 b=2;
    while( jacobi(b,p) != -1 ) b = NextPrime(b);
    const int N60=60;
    UINT64 apow[N60], bk;
    apow[0] = z64::pow_mod(a,k,p);
    int i;
    for(i=1; i<s; i++ )
    {
        apow[i] = z64::mul_mod(apow[i-1], apow[i-1], p);
    }
    bk = z64::pow_mod(b, k, p);
    unsigned ps = 1<<(s-1);                             

    

    

    

    unsigned v=0;
    UINT64 pv=1;                

    for(i=s-2; i>=0;i--)
    {
        

        

        v = v>>1;                                   

        pv = z64::pow_mod(bk, v, p);                

        UINT64 t = z64::mul_mod(apow[i],  pv, p);   

        if( t != 1 ) v += ps;
    }
    

    pv = z64::pow_mod(bk, v/2, p);                  

    sq = z64::pow_mod(a,  (k+1)>>1,p);              

    sq = z64::mul_mod(sq, pv,  p);
    return sq;
}



