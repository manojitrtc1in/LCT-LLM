




























































































using namespace std;

































typedef struct{ int sum,suf,pre,max;} Node;
int toint(const string &s) { stringstream ss; ss << s; int x; ss >> x; return x; }
const int MAXN = 2e5+100;
const int UP = 31;
const ll highest = 1e18;    
const double Phi =  1.618033988749894;
const int logn = 20;
const double root5 = 2.236067977;   



















































































































































const int N = 1e5+100;
pair<int,int> a[N];
std::vector<pair<int,int> > res;
int n;
void solve(int l,int r){
    if (l >= r)
        return;
    int m = (l + r) / 2;
    int x = a[m].first;
    int l1 = l, r1 = l;
    while (r1 < r && a[r1].first < x)
        ++r1;
    int l2 = r, r2 = r;
    while (l2 > l && a[l2 - 1].first > x)
        --l2;
    for (int i = l; i < r; ++i)
        res.pb(mk(x,a[i].second));
    solve(l1, r1);
    solve(l2, r2);
}
int main(){
    int n;
    cin >> n;
    for(int i=0;i<n;++i){
        cin >> a[i].first >> a[i].second;
    }
    sort(a, a + n);
    solve(0, n);
    sort(res.begin(), res.end());
    res.erase(unique(res.begin(), res.end()), res.end());
    cout << (int)res.size() << '\n';
    for (auto p: res)
        cout << p.first << ' ' << p.second << '\n';
    return 0;
}



























































































































































































































        












        








 



































        































































































































































































































































































































































































































































