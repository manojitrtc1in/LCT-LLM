











using namespace std;

long long n , k , modulo = 1000000007 , a[500000] , num = 0  , Ans = 0 , unluck = 0 , factrl[500000];
long long dp[1048][1048];
long long lucky[] = {};
map <long long , long long> gt;
map <long long , long long> Number;

long long id0(long long a , long long b , long long m)
{
    long long ans = 1;
    while ( b )
    {
        if ( b & 1 )
            ans = (ans * a) % m , b -- ;
        else
            a = (a * a) % m , b >>= 1;
    }
    return ans % m;
}


long long rev(long long x)
{
    return id0(x , modulo - 2 , modulo);
}

long long C(long long n , long long k)
{
    if ( n < k || k < 0)
        return 0;
    if ( n == k || k == 0 )
        return 1;
    long long a = factrl[n] % modulo;
    long long b = rev(factrl[n - k]) % modulo;
    long long c = rev(factrl[k]) % modulo;
    b = (b * c) % modulo;
    return (a * b) % modulo;
}

int main()
{




scanf("%lld%lld",&n,&k);
for (int i = 1 ; lucky[i] > 0 ; i ++ )
    Number[lucky[i]] = ++num;
factrl[0] = 1;
for (int i = 1 ; i <= n ; i ++ )
    factrl[i] = (factrl[i - 1] * i) % modulo;
for (int i = 1 ; i <= n ; i ++ )
{
    scanf("%lld",&a[i]);
    if ( Number[a[i]] != 0 )
        gt[Number[a[i]]] ++ ;
    else
        unluck ++ ;
}
for (int i = 0 ; i <= num ; i ++ )
    dp[i][0] = 1;
for (int i = 1 ; i <= num ; i ++ )
    for (int j = 1 ; j <= num ; j ++ )
        dp[j][i] = (dp[j - 1][i] + (dp[j - 1][i - 1] * gt[j]) % modulo ) % modulo;

for (int i = 1 ; i <= min(k , num) ; i ++ )
    Ans = ( Ans % modulo + (dp[num][i] * C(unluck , k - i) ) % modulo) % modulo;

printf("%lld\n",(Ans + C(unluck , k) ) % modulo );
return 0 ;
}