import collections
import heapq
import sys

infile = sys.stdin.buffer
def gs()  : return infile.readline().rstrip()
def gi()  : return int(gs())
def gss() : return gs().split()
def gis() : return [int(x) for x in gss()]

MOD = 998244353
mem = {}

def dijskta():
    heap = [(0,1)]
    rel = [1000 for _ in range(2000+1)]
    while(heap):
        d,u = heapq.heappop(heap)
        if u > 1000:
            continue
        if u not in rel:
            rel[u] = d
        if rel[u] > d:
            continue

    
        for t in range(1,u+1):
            v = u+ u//t
            if (rel[v] > d+1):
                rel[v] = d+1
                heapq.heappush(heap, (d+1,v))
    print (rel)
    return rel
    



rr = [1000, 0, 1, 2, 2, 3, 3, 4, 3, 4, 4, 5, 4, 5, 5, 5, 4, 5, 5, 5, 5, 5, 6, 6, 5, 6, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 6, 6, 6, 7, 6, 7, 6, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 8, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 8, 8, 7, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 8, 9, 9, 9, 8, 9, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 9, 8, 9, 8, 9, 8, 8, 9, 9, 8, 8, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 8, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 9, 10, 9, 9, 9, 10, 9, 9, 9, 10, 9, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 9, 10, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 9, 10, 10, 10, 9, 10, 10, 10, 9, 10, 10, 10, 9, 10, 9, 10, 10, 10, 10, 10, 9, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 10, 10, 10, 10, 10, 10, 10, 11, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 10, 10, 10, 11, 10, 10, 10, 11, 11, 11, 11, 11, 10, 11, 11, 11, 10, 11, 10, 11, 10, 11, 11, 11, 10, 11, 10, 10, 10, 11, 11, 11, 10, 10, 10, 11, 10, 11, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 10, 11, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 10, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 10, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 10, 10, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 10, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 10, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 11, 12, 11, 11, 11, 11, 12, 12, 11, 11, 11, 12, 11, 11, 11, 12, 11, 12, 11, 11, 11, 11, 12, 12, 11, 12, 11, 12, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 11, 11, 11, 11, 11, 12, 11, 12, 11, 11, 12, 12, 11, 12, 11, 11, 11, 12, 11, 12, 11, 11, 11, 11, 11, 12, 11, 11, 11, 12, 11, 12, 11, 11, 12, 12, 11, 12, 11, 11, 11, 12, 12, 12, 11, 12, 11, 12, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 11, 11, 12, 12, 11, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 11, 12, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 11, 12, 11, 12, 11, 11, 12, 12, 11, 12, 12, 12, 11, 12, 11, 12, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 11, 12, 11, 11, 10, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 13, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 12, 13, 11, 13, 12, 12, 11, 13, 12, 12, 11, 12, 12, 12, 11, 12, 12, 12, 11, 12, 12, 12, 11, 12, 11, 13, 11, 12, 12, 12, 11, 12, 12, 12, 11, 13, 12, 12, 11, 12, 12, 12, 11, 13, 12, 12, 11, 12, 11, 13, 12, 13, 12, 12, 12, 12, 12, 12, 11, 12, 12, 13, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 12, 12, 12, 12, 11, 12, 11, 12, 12, 12, 12, 13, 12, 12, 12, 12, 12, 13, 12, 12, 11, 12, 12, 13, 12, 12, 12, 12, 11, 12, 11, 12, 12, 12, 12, 1000, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 12, 13, 12, 12, 11, 13, 12, 12, 12, 12, 12, 13, 11, 13, 12, 12, 11, 13, 12, 13, 12, 12, 12, 13, 12, 12, 12, 12, 12, 13, 12, 13, 12, 12, 12, 13, 12, 13, 12, 12, 12, 13, 12, 12, 12, 13, 12, 1000, 12, 13, 12, 12, 12, 13, 12, 13, 12, 13, 12, 1000, 12, 13, 12, 12, 12, 13, 12, 12, 11, 13, 12, 1000, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 1000, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 1000, 12, 13, 12, 13, 12, 13, 12, 12, 12, 13, 12, 1000, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 1000, 12, 13, 12, 13, 12, 1000, 12, 13, 12, 12, 12, 1000, 11, 13, 12, 13, 12, 1000, 12, 13, 12, 13, 12, 1000, 12, 13, 12, 12, 11, 1000, 12, 12, 11, 13, 12, 1000, 12, 13, 12, 13, 12, 1000, 12, 13, 12, 12, 12, 1000, 12, 12, 12, 13, 12, 1000, 12, 13, 12, 13, 12, 1000, 12, 13, 12, 13, 12, 1000, 12, 13, 12, 13, 12, 1000, 12, 13, 12, 13, 12, 1000, 12, 13, 12, 13, 12, 1000, 12, 13, 12, 13, 12, 1000, 12, 13, 12, 13, 12, 1000, 12, 13, 12, 13, 12, 1000, 12, 13, 12, 13, 12, 1000, 12, 13, 13, 13, 12, 1000, 12, 13, 12, 13, 12, 1000, 12, 13, 12, 13, 12, 1000, 12, 13, 12, 13, 12, 1000, 12, 13, 12, 13, 12, 1000, 13, 13, 12, 13, 13, 1000, 12, 13, 12, 13, 12, 1000, 12, 13, 13, 13, 13, 1000, 12, 13, 12, 13, 12, 1000, 13, 13, 12, 13, 12, 1000, 12, 1000, 13, 1000, 12, 1000, 13, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 13, 1000, 13, 1000, 12, 1000, 13, 1000, 12, 1000, 13, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 11, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 13, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 13, 1000, 12, 1000, 13, 1000, 12, 1000, 12, 1000, 13, 1000, 13, 1000, 12, 1000, 13, 1000, 12, 1000, 12, 1000, 12, 1000, 13, 1000, 12, 1000, 13, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 12, 1000, 13, 1000, 12, 1000, 12, 1000, 12, 1000, 13, 1000, 12, 1000, 13, 1000, 12, 1000, 12, 1000, 13, 1000, 13, 1000, 12, 1000, 13, 1000, 12, 1000, 12, 1000, 12, 1000, 13, 1000, 13, 1000, 13, 1000, 12, 1000, 13, 1000, 12, 1000, 13, 1000, 12, 1000, 12, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 12, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 12, 1000, 13, 1000, 13, 1000, 13, 1000, 12, 1000, 12, 1000, 13, 1000, 13, 1000, 12, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 12, 1000, 13, 1000, 13, 1000, 13, 1000, 12, 1000, 13, 1000, 12, 1000, 12, 1000, 12, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 12, 1000, 13, 1000, 12, 1000, 13, 1000, 12, 1000, 12, 1000, 13, 1000, 13, 1000, 12, 1000, 13, 1000, 13, 1000, 13, 1000, 12, 1000, 13, 1000, 12, 1000, 13, 1000, 12, 1000, 12, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 12, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 12, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13, 1000, 13]
def f(n,k,b,c):
    p = [(rr[e],r) for e,r in zip(b,c)]
    pp = []
    ans = 0
    for u,v in p:
        if u == 0:
            ans += v
        else:
            pp.append((u,v))
    
    k = min(k, sum([u for u,v in pp] or [0]))
    h = [0] * (k+1)
    if k < min([u for u,v in pp] or [0]):
        return ans
    for i in range(len(pp)):
        cos, rew = pp[i]
        for t in range(k+1)[::-1]:
            if t- cos>=0:
                h[t] = max(h[t], h[t - cos] +rew)
    return ans + h[k]

def main(infn="") :
    global infile
    infile = open(infn,"r") if infn else open(sys.argv[1],"r") if len(sys.argv) > 1 else sys.stdin
    
    cs = gi()
    for case in range(1, cs + 1):
        n,k = gis()
        print (f(n,k,gis(),gis()))
    
if __name__ == '__main__' : main()