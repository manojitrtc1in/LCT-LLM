from sys import stdin
from collections import deque

mod = 10**9 + 7
import sys
import random
sys.setrecursionlimit(10**6)
from queue import PriorityQueue
from collections import Counter as cc


from bisect import bisect_right
from bisect import bisect_left
from collections import defaultdict
from math import sqrt,factorial,gcd,log2,inf,ceil



import heapq

input = lambda : sys.stdin.readline().rstrip()
from sys import stdin, stdout
from heapq import heapify, heappush, heappop
from itertools import permutations
from math import factorial as f



def ncr(n, r, p):
    num = den = 1
    for i in range(r):
        num = (num * (n - i)) % p
        den = (den * (i + 1)) % p
    return (num * pow(den,
                      p - 2, p)) % p

import sys










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































    







































































































n = int(input())

l1 = list(map(int,input().split()))
l2 = list(map(int,input().split()))
hash = defaultdict(list)
boo = defaultdict(bool)
par = defaultdict(set)
for i in range(n):
    k = i+1

    if boo[k] == False:
     boo[k] = True
     par[k].add(k)
     while True:


        z = l2[k-1]
        if z!=-1:
         par[z].add(k)
        if boo[z] == True:

            hash[k].append(z)
            break

        if z == -1:
            break
        boo[z] = True

        hash[k].append(z)
        k = z

final = 0
ans = []
seti = set()

for i in par:
    if i in par[i] and len(par[i])>1:
        par[i].remove(i)

for i in range(1,n+1):
    if len(par[i]) == 1 and i in par[i]:

      seti.add(list(par[i])[0])
ka = []

for i in seti:

    k = i
    while True:


        try:
         z = hash[k][0]
        except:
            ans.append(k)
            break
        if l1[z-1]+l1[k-1]>=l1[z-1]:
          l1[z-1]+=l1[k-1]
          ans.append(k)
        else:
            ka.append(k)
        if len(par[z])>1 :
            par[z].remove(k)
            break
        k = z


ka.reverse()



print(sum(l1))
print(*(ans+ka))




