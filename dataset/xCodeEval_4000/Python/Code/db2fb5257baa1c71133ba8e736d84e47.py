def check(hc, dc, hm, dm):
    count = (hc + dm - 1) // dm
    return count * dc >= hm

for _ in range(int(input())):
    n, K = map(int, input().split())
    a = [1] * (n + 1)
    b = [0] + list(map(int, input().split()))
    c = [0] + list(map(int, input().split()))

    P = c
    W = [0] * (n + 1)

    K = min(K, n * 15)

    d = {1:0,2:1,3:2,4:2,5:3,6:3,7:4,8:3,9:4,10:4,11:5,12:4,13:5,14:5,15:5,16:4,17:5,18:5,19:5,20:5,21:5,22:6,23:6,24:5,25:6,26:6,27:6,28:6,29:7,30:6,31:6,32:5,33:6,34:6,35:6,36:6,37:6,38:6,39:7,40:6,41:7,42:6,43:7,44:7,45:7,46:7,47:7,48:6,49:7,50:7,51:7,52:7,53:7,54:7,55:7,56:7,57:7,58:8,59:8,60:7,61:8,62:7,63:7,64:6,65:7,66:7,67:7,68:7,69:7,70:7,71:7,72:7,73:7,74:7,75:8,76:7,77:8,78:8,79:8,80:7,81:8,82:8,83:8,84:7,85:7,86:8,87:8,88:8,89:8,90:8,91:8,92:8,93:8,94:8,95:8,96:7,97:8,98:8,99:8,100:8,101:8,102:8,103:8,104:8,105:8,106:8,107:9,108:8,109:8,110:8,111:8,112:8,113:8,114:8,115:8,116:9,117:9,118:9,119:9,120:8,121:9,122:9,123:9,124:8,125:9,126:8,127:8,128:7,129:8,130:8,131:8,132:8,133:8,134:8,135:8,136:8,137:8,138:8,139:8,140:8,141:9,142:8,143:9,144:8,145:9,146:8,147:9,148:8,149:8,150:9,151:9,152:8,153:8,154:9,155:9,156:9,157:9,158:9,159:9,160:8,161:9,162:9,163:9,164:9,165:9,166:9,167:9,168:8,169:9,170:8,171:9,172:9,173:9,174:9,175:9,176:9,177:9,178:9,179:9,180:9,181:9,182:9,183:9,184:9,185:9,186:9,187:9,188:9,189:9,190:9,191:9,192:8,193:9,194:9,195:9,196:9,197:9,198:9,199:9,200:9,201:9,202:9,203:9,204:9,205:9,206:9,207:9,208:9,209:9,210:9,211:9,212:9,213:9,214:10,215:10,216:9,217:10,218:9,219:9,220:9,221:10,222:9,223:9,224:9,225:10,226:9,227:10,228:9,229:9,230:9,231:10,232:10,233:10,234:10,235:10,236:10,237:10,238:10,239:10,240:9,241:10,242:10,243:10,244:10,245:10,246:10,247:10,248:9,249:10,250:10,251:10,252:9,253:10,254:9,255:9,256:8,257:9,258:9,259:9,260:9,261:9,262:9,263:9,264:9,265:9,266:9,267:9,268:9,269:9,270:9,271:9,272:9,273:9,274:9,275:9,276:9,277:9,278:9,279:9,280:9,281:9,282:10,283:10,284:9,285:10,286:10,287:10,288:9,289:10,290:10,291:10,292:9,293:10,294:10,295:10,296:9,297:10,298:9,299:10,300:10,301:10,302:10,303:10,304:9,305:10,306:9,307:9,308:10,309:10,310:10,311:10,312:10,313:10,314:10,315:10,316:10,317:10,318:10,319:10,320:9,321:10,322:10,323:10,324:10,325:10,326:10,327:10,328:10,329:10,330:10,331:10,332:10,333:10,334:10,335:10,336:9,337:10,338:10,339:10,340:9,341:9,342:10,343:10,344:10,345:10,346:10,347:10,348:10,349:10,350:10,351:10,352:10,353:10,354:10,355:10,356:10,357:10,358:10,359:10,360:10,361:10,362:10,363:10,364:10,365:10,366:10,367:10,368:10,369:10,370:10,371:11,372:10,373:10,374:10,375:10,376:10,377:10,378:10,379:11,380:10,381:10,382:10,383:10,384:9,385:10,386:10,387:10,388:10,389:10,390:10,391:10,392:10,393:10,394:10,395:10,396:10,397:10,398:10,399:10,400:10,401:10,402:10,403:10,404:10,405:10,406:10,407:11,408:10,409:10,410:10,411:10,412:10,413:10,414:10,415:10,416:10,417:10,418:10,419:11,420:10,421:10,422:10,423:11,424:10,425:10,426:10,427:11,428:11,429:11,430:11,431:11,432:10,433:11,434:11,435:11,436:10,437:11,438:10,439:11,440:10,441:11,442:11,443:11,444:10,445:11,446:10,447:10,448:10,449:11,450:11,451:11,452:10,453:10,454:10,455:11,456:10,457:11,458:10,459:10,460:10,461:11,462:11,463:11,464:11,465:11,466:11,467:11,468:11,469:11,470:11,471:11,472:11,473:11,474:11,475:11,476:11,477:11,478:11,479:11,480:10,481:11,482:11,483:11,484:11,485:11,486:11,487:11,488:11,489:11,490:11,491:11,492:11,493:11,494:11,495:11,496:10,497:11,498:11,499:11,500:11,501:11,502:11,503:11,504:10,505:11,506:11,507:11,508:10,509:11,510:10,511:10,512:9,513:10,514:10,515:10,516:10,517:10,518:10,519:10,520:10,521:10,522:10,523:10,524:10,525:10,526:10,527:10,528:10,529:10,530:10,531:10,532:10,533:10,534:10,535:10,536:10,537:10,538:10,539:11,540:10,541:11,542:10,543:11,544:10,545:11,546:10,547:11,548:10,549:11,550:10,551:10,552:10,553:11,554:10,555:11,556:10,557:11,558:10,559:11,560:10,561:11,562:10,563:10,564:11,565:11,566:11,567:11,568:10,569:11,570:11,571:11,572:11,573:11,574:11,575:11,576:10,577:11,578:11,579:11,580:11,581:11,582:11,583:11,584:10,585:10,586:11,587:11,588:11,589:11,590:11,591:11,592:10,593:11,594:11,595:11,596:10,597:10,598:11,599:11,600:11,601:11,602:11,603:11,604:11,605:11,606:11,607:11,608:10,609:11,610:11,611:11,612:10,613:11,614:10,615:11,616:11,617:11,618:11,619:11,620:11,621:11,622:11,623:11,624:11,625:11,626:11,627:11,628:11,629:11,630:11,631:11,632:11,633:11,634:11,635:11,636:11,637:11,638:11,639:11,640:10,641:11,642:11,643:11,644:11,645:11,646:11,647:11,648:11,649:11,650:11,651:11,652:11,653:11,654:11,655:11,656:11,657:11,658:11,659:11,660:11,661:11,662:11,663:11,664:11,665:11,666:11,667:11,668:11,669:11,670:11,671:11,672:10,673:11,674:11,675:11,676:11,677:11,678:11,679:11,680:10,681:11,682:10,683:11,684:11,685:11,686:11,687:11,688:11,689:11,690:11,691:11,692:11,693:11,694:11,695:11,696:11,697:11,698:11,699:11,700:11,701:11,702:11,703:11,704:11,705:11,706:11,707:11,708:11,709:11,710:11,711:11,712:11,713:11,714:11,715:11,716:11,717:11,718:11,719:11,720:11,721:12,722:11,723:11,724:11,725:11,726:11,727:11,728:11,729:11,730:11,731:11,732:11,733:11,734:11,735:12,736:11,737:12,738:11,739:11,740:11,741:11,742:12,743:12,744:11,745:11,746:11,747:12,748:11,749:11,750:11,751:12,752:11,753:12,754:11,755:11,756:11,757:11,758:12,759:12,760:11,761:12,762:11,763:12,764:11,765:11,766:11,767:11,768:10,769:11,770:11,771:11,772:11,773:11,774:11,775:11,776:11,777:11,778:11,779:11,780:11,781:11,782:11,783:11,784:11,785:11,786:11,787:11,788:11,789:11,790:11,791:11,792:11,793:11,794:11,795:11,796:11,797:11,798:11,799:11,800:11,801:11,802:11,803:12,804:11,805:11,806:11,807:11,808:11,809:12,810:11,811:12,812:11,813:11,814:12,815:12,816:11,817:12,818:11,819:11,820:11,821:12,822:11,823:12,824:11,825:11,826:11,827:11,828:11,829:12,830:11,831:11,832:11,833:12,834:11,835:12,836:11,837:11,838:12,839:12,840:11,841:12,842:11,843:11,844:11,845:12,846:12,847:12,848:11,849:12,850:11,851:12,852:11,853:11,854:12,855:12,856:12,857:12,858:12,859:12,860:12,861:12,862:12,863:12,864:11,865:12,866:12,867:12,868:12,869:12,870:12,871:12,872:11,873:12,874:12,875:12,876:11,877:11,878:12,879:12,880:11,881:12,882:12,883:12,884:12,885:12,886:12,887:12,888:11,889:12,890:12,891:12,892:11,893:12,894:11,895:11,896:11,897:12,898:12,899:12,900:12,901:12,902:12,903:12,904:11,905:12,906:11,907:12,908:11,909:11,910:12,911:12,912:11,913:12,914:12,915:12,916:11,917:12,918:11,919:12,920:11,921:11,922:12,923:12,924:12,925:12,926:12,927:12,928:12,929:12,930:12,931:12,932:12,933:12,934:12,935:12,936:12,937:12,938:12,939:12,940:12,941:12,942:12,943:12,944:12,945:12,946:12,947:12,948:12,949:12,950:12,951:12,952:12,953:12,954:12,955:12,956:12,957:12,958:12,959:12,960:11,961:12,962:12,963:12,964:12,965:12,966:12,967:12,968:12,969:12,970:12,971:12,972:12,973:12,974:12,975:12,976:12,977:12,978:12,979:12,980:12,981:12,982:12,983:12,984:12,985:12,986:12,987:12,988:12,989:12,990:12,991:12,992:11,993:12,994:12,995:12,996:12,997:12,998:12,999:12,1000:12}

    for i in range(1, n + 1):
        W[i] = d[b[i]]
    
    ans = 0
    for i in range(1, n + 1):
        if W[i] == 0:
            ans += P[i]
            W[i] = 10 ** 18

    F = [0] * (K + 1)
    for i in range(1, n + 1):
        newF = [0] * (K + 1)
        for k in range(1, K + 1):
            if k >= W[i]:
                newF[k] = max(F[k], F[k - W[i]] + P[i]) 
            else: 
                newF[k] = F[k]
        
        F = newF
    
    print(F[K] + ans)    
