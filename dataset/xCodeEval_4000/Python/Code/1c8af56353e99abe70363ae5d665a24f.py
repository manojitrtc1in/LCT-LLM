



















































































































































































































































































































































































































































































































































from collections import defaultdict, deque
def solve():
    def topo(graph, indegree, n):
        c = 0
        queue = deque([])
        ans = defaultdict(lambda : 1)
        for i in range(n):
            if indegree[i + 1] == 0:
                queue.append(i + 1)
        while queue:
            node = queue.popleft()
            c += 1
            for v in graph[node]:
                indegree[v] -= 1
                if v < node:
                    ans[v] = max(ans[v], ans[node] + 1)
                else:
                    ans[v] = max(ans[v], ans[node])
                if indegree[v] == 0:
                    queue.append(v)
        if c != n:
            return False
        if ans:
            return max(ans.values())
        return 1




    n = int(input())
    graph = defaultdict(list)
    indegree = defaultdict(int)
    for i in range(n):
        arr = list(map(int, input().split()))
        
        for j in range(1, arr[0] + 1):
            indegree[i + 1] += 1
            graph[arr[j]].append(i + 1)
    
    res = topo(graph, indegree, n)
    if res == False:
        return -1
    return res
t = int(input())
while t:
    print(solve())
    t -= 1