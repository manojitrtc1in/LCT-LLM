

































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#include <iostream>
#include <cstring>
#include <algorithm>
#include <cstdio>
#include <cmath>
using namespace std;
const double eps = 1e-6;
int sgn(double x)
{
    if(fabs(x) < eps) return 0;
    if(x < 0) return -1;
    else return 1;
}
struct Point
{
    double x, y;
    Point(){}
    Point(double xx, double yy) : x(xx), y(yy){}
    Point operator - (const Point &a) const
    {
        return Point(x-a.x, y-a.y);
    }
    double operator ^ (const Point &a) const
    {
        return x*a.y-y*a.x;
    }
    double operator * (const Point &a) const
    {
        return x*a.x + y*a.y;
    }
    void transXY(double B)
    {
        double tx = x, ty = y;
        x = tx*cos(B) - ty*sin(B);
        y = tx*sin(B) - ty*cos(B);
    }
};
struct Line
{
    Point s, e;
    Line(){}
    Line(Point ss, Point ee) : s(ss), e(ee){}
    pair<int, Point> operator & (const Line &b) const
    {
        Point res = s;
        if(sgn((s-e)^(b.s-b.e)) == 0)
        {
            if(sgn((s-b.e)^(s-b.s)) == 0)
                return make_pair(0, res);
            else return make_pair(1, res);
        }
        double t =((s-b.s)^(b.s-b.e))/((s-e)^(b.s-b.e));
        res.x += (e.x-s.x)*t;
        res.y += (e.y-s.y)*t;
        return make_pair(2, res);
    }
};
double dist(Point a, Point b)
{
    return sqrt((a-b)*(a-b));
}
Point NearestPointToLineSeg(Point P,Line L)
{
    Point result;
    double t = ((P-L.s)*(L.e-L.s))/((L.e-L.s)*(L.e-L.s));
    if(t >=0 && t <= 1)
    {
    result.x = L.s.x + (L.e.x - L.s.x)*t;
    result.y = L.s.y + (L.e.y - L.s.y)*t;
    }
    else
    {
    if(dist(P,L.s) < dist(P,L.e))
    result = L.s;
    else result = L.e;
    }
    return result;
}
const int maxn = 1e3 + 5;
Point p[maxn];
int main()
{
    int n;
    scanf("%d", &n);
    for(int i = 1; i <= n; i++)
        scanf("%lf%lf", &p[i].x, &p[i].y);
    double ans = 2e100 + 5;
    p[0] = p[n];
    p[n+1] = p[1];
    for(int i = 1; i <= n; i++)
    {
        ans = min(ans, dist(p[i],NearestPointToLineSeg(p[i],Line(p[i-1],p[i+1]))));
    }
    printf("%.10f\n", ans*0.5);
    return 0;
}
