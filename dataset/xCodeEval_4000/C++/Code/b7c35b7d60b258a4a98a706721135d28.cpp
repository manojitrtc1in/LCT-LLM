#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
ll INF = 1e9+7;
ll MOD = 998244353;
typedef pair<ll,ll> ii;
#define iii pair<ii,ll>
#define f(i,a,b) for(ll i = a;i < b;i++)
#define rf(i,a,b) for(long long i=a;i>=b;i--)
#define fastio ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define w(t) while(t--)
#define c(n); cin>>n;
#define p(n) cout<<n;
#define pl(n) cout<<n<<"\n";
#define ps(n); cout<<n<<" ";
#define F first
#define S second
#define pb(a) push_back(a)
#define all(x) (x).begin(), (x).end()
#define ull unsigned long long
#define vll vector<ll>
#define vii vector<ii>
#define mkp make_pair
#define ld long double
#define arrin(a,n) f(i,0,n){cin>>a[i];}
#define arrout(a,n) f(i,0,n){cout<<a[i]<<" ";}
#define printclock cerr<<"Time : "<<*(ld)clock()/(ld)CLOCKS_PER_SEC<<"ms\n";
#define PI (2*acos(0))
#define EPS 1e-18
const long long N = 1e5+5;
const long long M = 1e6+5;
vll visit,dist,taken;
vector<vll> adj;
vector<vii> adj2;
priority_queue<ii,vector<ii>, greater<ii> > pq;
ll bit[N]={0};
ll an[N][35];
ll depth[N]={0};
ll siz;
ll res = 0;
ll mycbrt(ll num){ll l = 1,r = 1000000;ll ans = 0;while(l <= r){ll mid = (l+r)/2;if(mid * mid * mid <= num){l = mid + 1;ans = max(ans,mid);}else{r = mid - 1;}}return ans;}
ll lcm(ll a,ll b){return (a * b) / __gcd(a,b);}
ll gcd(ll a,ll b){return __gcd(a,b);}
ll power(ll a,ll b){if(b == 0)return 1;if(b == 1)return a;ll ans = power(a,b/2) % MOD;ans *= ans;ans %= MOD;if(b % 2 == 1)ans *= a;return ans%MOD;}
ll inverse(ll x){x%=MOD;return power(x,MOD-2);}
void BITup(ll k, ll x){while(k <= siz){bit[k]+=x;k += k & -k;}}
ll BITq(ll k){ll s=0;while(k>=1){s+=bit[k];k -= k &-k;}return s;}
struct point{ll x,y,idx;};
void dfs(ll v){visit[v] = 1;for(auto x:adj[v]){if(!visit[x])dfs(x);}}
void bfs(ll s){visit[s] = 1;queue<ll>q;q.push(s);while(!q.empty()){ll u = q.front();ps(u);q.pop();for(auto x:adj[u]){if(!visit[x]){visit[x] = 1;q.push(x);}}}}
void dijkstra(ll s){pq.push(ii(0,s));dist[s] = 0;while(!pq.empty()){ii f = pq.top();pq.pop();ll w = f.F;ll u = f.S;if(w > dist[u]){continue;}for(auto v:adj2[u]){if(dist[u] + v.S < dist[v.F]){dist[v.F] = dist[u] + v.S;pq.push(ii(dist[v.F],v.F));}}}}
void prim(ll edge) {taken[edge] = 1;for(auto v:adj2[edge]) {if (taken[v.first]==0)pq.push(ii(v.second, v.first));}}
ll mst(ll s){taken.assign(N, 0);prim(s);ll cost = 0;while(!pq.empty()){ii front = pq.top();pq.pop();ll w = front.first;ll u = front.second;if(taken[u]==0)cost += w;prim(u);}return cost;}
void bfs01(ll s){deque<ll>q;dist[s] = 0;q.push_back(s);while(!q.empty()){ll v = q.front();q.pop_front();for(auto x:adj2[v]){if(dist[x.F] > dist[v] + x.S){dist[x.F] = dist[v] + x.S;if(x.S == 0){q.push_front(x.F);}else{q.push_back(x.F);}}}}}
void build(ll s,ll p){an[s][0] = p;f(i,1,35){an[s][i] = an[an[s][i-1]][i-1];}for(auto x:adj[s]){if(x != p){depth[x] = depth[s] + 1;build(x,s);}}}
ll kth(ll x,ll k){ll ans = x;if(depth[x] < k){return -1;}ll pos = 0;while(k > 0){if(k % 2){ans = an[ans][pos];}pos++;k /= 2;}return ans;}
ll lca(ll a,ll b){if(depth[a] > depth[b]){swap(a,b);}b = kth(b,abs(depth[a] - depth[b]));if(a == b){return a;}for(ll i = 34;i >= 0;i--){if(an[a][i] == an[b][i]){continue;}a = an[a][i];b = an[b][i];}return an[a][0];}
void YESNO(ll a){if(!!a){pl("DA");}else{pl("NET");}}
void filesin(void){freopen("tracing.in","r",stdin);}
void filesout(void){freopen("tracing.out","w",stdout);}












ll ans[1500] ={1, 2, 3, 4, 5, 6, 7, 8, 9, 19, 29, 39, 49, 59, 69, 79, 89, 99, 199, 299, 399, 499, 599, 699, 799, 899, 999, 1999, 2999, 3999, 4999, 5999, 6999, 7999, 8999, 9999, 19999, 29999, 39999, 49999, 59999, 69999, 79999, 89999, 99999, 199999, 299999, 399999, 499999, 599999, 699999, 799999, 899999, 999999, 1999999, 2999999, 3999999, 4999999, 5999999, 6999999, 7999999, 8999999, 9999999, 19999999, 29999999, 39999999, 49999999, 59999999, 69999999, 79999999, 89999999, 99999999, 199999999, 299999999, 399999999, 499999999, 599999999, 699999999, 799999999, 899999999, 999999999, 1999999999, 2999999999, 3999999999, 4999999999, 5999999999, 6999999999, 7999999999, 8999999999, 9999999999, 19999999999, 29999999999, 39999999999, 49999999999, 59999999999, 69999999999, 79999999999, 89999999999, 99999999999, 199999999999, 299999999999, 399999999999, 499999999999, 599999999999, 699999999999, 799999999999, 899999999999, 999999999999, 1999999999999, 2999999999999, 3999999999999, 4999999999999, 5999999999999, 6999999999999, 7999999999999, 8999999999999, 9999999999999, 19999999999999, 29999999999999, 39999999999999, 49999999999999, 59999999999999, 69999999999999, 79999999999999, 89999999999999, 99999999999999, 199999999999999, 299999999999999, 399999999999999, 499999999999999, 599999999999999, 699999999999999, 799999999999999, 899999999999999, 999999999999999, 1999999999999999, 2999999999999999, 3999999999999999, 4999999999999999, 5999999999999999, 6999999999999999, 7999999999999999, 8999999999999999, 9999999999999999, 19999999999999999, 29999999999999999, 39999999999999999, 49999999999999999, 59999999999999999, 69999999999999999,0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 2, -1, -1, -1, -1, -1, -1, -1, 9, -1, 1, 0, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 19, 3, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, 2, -1, -1, -1, -1, -1, -1, 7, 4, 9, 1, 0, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, 49, 5, 3, -1, -1, -1, -1, -1, -1, 18, -1, 19, 9, -1, -1, -1, -1, -1, 59, -1, 8, 2, -1, -1, -1, -1, -1, 28, 6, -1, -1, 1, 0, -1, -1, -1, 69, -1, 4, -1, -1, -1, -1, -1, -1, 38, -1, 29, 8, -1, -1, -1, -1, -1, 79, 7, 18, 19, 9, -1, -1, -1, -1, 48, -1, 7, 3, -1, -1, -1, -1, -1, 89, -1, 5, -1, -1, -1, -1, -1, -1, 58, 17, 39, 7, 2, -1, -1, -1, -1, 189, -1, 28, 18, -1, 1, 0, -1, -1, 68, -1, 17, 29, -1, -1, -1, -1, -1, 289, 27, 6, 4, 7, 9, -1, -1, -1, 78, -1, 49, 6, -1, -1, -1, -1, -1, 389, -1, 38, 17, -1, 8, -1, -1, -1, 88, 37, 27, 28, 3, -1, -1, -1, -1, 489, -1, 16, 39, -1, 7, -1, -1, -1, 98, -1, 59, 5, -1, 2, -1, -1, -1, 589, 47, 48, 16, 5, 6, 1, 0, -1, 198, -1, 37, 27, -1, 19, 9, -1, -1, 689, -1, 26, 38, -1, 5, 8, -1, -1, 298, 57, 69, 49, 4, 18, 7, -1, -1, 789, -1, 58, 15, -1, 4, 6, -1, -1, 398, -1, 47, 26, -1, 17, 5, -1, -1, 889, 67, 36, 37, 15, 3, 4, -1, -1, 498, -1, 79, 48, -1, 16, 3, -1, -1, 989, -1, 68, 59, -1, 29, 2, -1, -1, 598, 77, 57, 25, 14, 15, 19, 1, 0, 1989, -1, 46, 36, -1, 28, 18, -1, 1, 698, -1, 89, 47, -1, 14, 17, -1, 2, 2989, 87, 78, 58, 25, 27, 16, -1, 3, 798, -1, 67, 69, -1, 13, 15, -1, 4, 3989, -1, 56, 35, -1, 26, 14, -1, 5, 898, 97, 189, 46, 24, 39, 13, -1, 6, 4989, -1, 88, 57, -1, 25, 12, -1, 7, 998, -1, 77, 68, -1, 38, 29, -1, 8, 5989, 197, 66, 79, 35, 24, 28, 11, 9, 1998, -1, 289, 45, -1, 37, 27, -1, 10, 6989, -1, 188, 56, -1, 23, 26, -1, 11, 2998, 297, 87, 67, 34, 36, 25, -1, 12, 7989, -1, 76, 78, -1, 49, 24, -1, 13, 3998, -1, 389, 89, -1, 35, 23, -1, 14, 8989, 397, 288, 55, 45, 48, 22, -1, 15, 4998, -1, 187, 66, -1, 34, 39, -1, 16, 9989, -1, 86, 77, -1, 47, 38, -1, 17, 5998, 497, 489, 88, 44, 33, 37, 21, 18, 19989, -1, 388, 189, -1, 46, 36, -1, 19, 6998, -1, 287, 65, -1, 59, 35, -1, 20, 29989, 597, 96, 76, 55, 45, 34, -1, 21, 7998, -1, 589, 87, -1, 58, 33, -1, 22, 39989, -1, 488, 188, -1, 44, 32, -1, 23, 8998, 697, 387, 289, 54, 57, 49, -1, 24, 49989, -1, 196, 75, -1, 43, 48, -1, 25, 9998, -1, 689, 86, -1, 56, 47, -1, 26, 59989, 797, 588, 187, 65, 69, 46, 31, 27, 19998, -1, 487, 288, -1, 55, 45, -1, 28, 69989, -1, 296, 389, -1, 68, 44, -1, 29, 29998, 897, 789, 85, 64, 54, 43, -1, 30, 79989, -1, 688, 186, -1, 67, 42, -1, 31, 39998, -1, 587, 287, -1, 53, 59, -1, 32, 89989, 997, 396, 388, 75, 66, 58, -1, 33, 49998, -1, 889, 489, -1, 79, 57, -1, 34, 99989, -1, 788, 95, -1, 65, 56, -1, 35, 59998, 1997, 687, 286, 74, 78, 55, 41, 36, 199989, -1, 496, 387, -1, 64, 54, -1, 37, 69998, -1, 989, 488, -1, 77, 53, -1, 38, 299989, 2997, 888, 589, 85, 63, 52, -1, 39, 79998, -1, 787, 195, -1, 76, 69, -1, 40, 399989, -1, 596, 386, -1, 89, 68, -1, 41, 89998, 3997, 1989, 487, 84, 75, 67, -1, 42, 499989, -1, 988, 588, -1, 88, 66, -1, 43, 99998, -1, 887, 689, -1, 74, 65, -1, 44, 599989, 4997, 696, 295, 185, 87, 64, 51, 45, 199998, -1, 2989, 486, -1, 73, 63, -1, 46, 699989, -1, 1988, 587, -1, 86, 62, -1, 47, 299998, 5997, 987, 688, 94, 189, 79, -1, 48, 799989, -1, 796, 789, -1, 85, 78, -1, 49, 399998, -1, 3989, 395, -1, 188, 77, -1, 50, 899989, 6997, 2988, 586, 285, 84, 76, -1, 51, 499998, -1, 1987, 687, -1, 187, 75, -1, 52, 999989, -1, 896, 788, -1, 83, 74, -1, 53, 599998, 7997, 4989, 889, 194, 186, 73, 61, 54, 1999989, -1, 3988, 495, -1, 289, 72, -1, 55, 699998, -1, 2987, 686, -1, 185, 89, -1, 56, 2999989, 8997, 996, 787, 385, 288, 88, -1, 57, 799998, -1, 5989, 888, -1, 184, 87, -1, 58, 3999989, -1, 4988, 989, -1, 287, 86, -1, 59, 899998, 9997, 3987, 595, 294, 93, 85, -1, 60, 4999989, -1, 1996, 786, -1, 286, 84, -1, 61, 999998, -1, 6989, 887, -1, 389, 83, -1, 62, 5999989, 19997, 5988, 988, 485, 285, 82, 71, 63, 1999998, -1, 4987, 1989, -1, 388, 189, -1, 64, 6999989, -1, 2996, 695, -1, 284, 188, -1, 65, 2999998, 29997, 7989, 886, 394, 387, 187, -1, 66, 7999989, -1, 6988, 987, -1, 193, 186, -1, 67, 3999998, -1, 5987, 1988, -1, 386, 185, -1, 68, 8999989, 39997, 3996, 2989, 585, 489, 184, -1, 69, 4999998, -1, 8989, 795, -1, 385, 183, -1, 70, 9999989, -1, 7988, 986, -1, 488, 92, -1, 71, 5999998, 49997, 6987, 1987, 494, 384, 289, 81, 72, -1, -1, 4996, 2988, -1, 487, 288, -1, 73, 6999998, -1, 9989, 3989, -1, 293, 287, -1, 74, -1, 59997, 8988, 895, 685, 486, 286, -1, 75, 7999998, -1, 7987, 1986, -1, 589, 285, -1, 76, -1, -1, 5996, 2987, -1, 485, 284, -1, 77, 8999998, 69997, 19989, 3988, 594, 588, 283, -1, 78, -1, -1, 9988, 4989, -1, 484, 192, -1, 79, 9999998, -1, 8987, 995, -1, 587, 389, -1, 80, -1, 79997, 6996, 2986, 785, 393, 388, 91, 81, -1, -1, 29989, 3987, -1, 586, 387, -1, 82, -1, -1, 19988, 4988, -1, 689, 386, -1, 83, -1, 89997, 9987, 5989, 694, 585, 385, -1, 84, -1, -1, 7996, 1995, -1, 688, 384, -1, 85, -1, -1, 39989, 3986, -1, 584, 383, -1, 86, -1, 99997, 29988, 4987, 885, 687, 292, -1, 87, -1, -1, 19987, 5988, -1, 493, 489, -1, 88, -1, -1, 8996, 6989, -1, 686, 488, -1, 89, -1, 199997, 49989, 2995, 794, 789, 487, 191, 90, -1, -1, 39988, 4986, -1, 685, 486, -1, 181, -1, -1, 29987, 5987, -1, 788, 485, -1, 182, -1, 299997, 9996, 6988, 985, 684, 484, -1, 183, -1, -1, 59989, 7989, -1, 787, 483, -1, 184, -1, -1, 49988, 3995, -1, 593, 392, -1, 185, -1, 399997, 39987, 5986, 894, 786, 589, -1, 186, -1, -1, 19996, 6987, -1, 889, 588, -1, 187, -1, -1, 69989, 7988, -1, 785, 587, -1, 188, -1, 499997, 59988, 8989, 1985, 888, 586, 291, 189, -1, -1, 49987, 4995, -1, 784, 585, -1, 190, -1, -1, 29996, 6986, -1, 887, 584, -1, 281, -1, 599997, 79989, 7987, 994, 693, 583, -1, 282, -1, -1, 69988, 8988, -1, 886, 492, -1, 283, -1, -1, 59987, 9989, -1, 989, 689, -1, 284, -1, 699997, 39996, 5995, 2985, 885, 688, -1, 285};
ll ansi[150] = {1, -1, 2, -1, 3, -1, 4, -1, 5, 10, 6, 20, 7, 30, 8, 40, 9, 50, 19, 60, 29, 70, 39, 80, 49, 90, 59, 190, 69, 290, 79, 390, 89, 490, 99, 590, 199, 690, 299, 790, 399, 890, 499, 990, 599, 1990, 699, 2990, 799, 3990, 899, 4990, 999, 5990, 1999, 6990, 2999, 7990, 3999, 8990, 4999, 9990, 5999, 19990, 6999, 29990, 7999, 39990, 8999, 49990, 9999, 59990, 19999, 69990, 29999, 79990, 39999, 89990, 49999, 99990, 59999, 199990, 69999, 299990, 79999, 399990, 89999, 499990, 99999, 599990, 199999, 699990, 299999, 799990, 399999, 899990, 499999, 999990, 599999, 1999990, 699999, 2999990, 799999, 3999990, 899999, 4999990, 999999, 5999990, 1999999, 6999990, 2999999, 7999990, 3999999, 8999990, 4999999, 9999990, 5999999, 19999990, 6999999, 29999990, 7999999, 39999990, 8999999, 49999990, 9999999, 59999990, 19999999, 69999990, 29999999, 79999990, 39999999, 89999990, 49999999, 99999990, 59999999, 199999990, 69999999, 299999990, 79999999, 399999990, 89999999, 499999990, 99999999, 599999990, 199999999, 699999990, 299999999, 799999990, 399999999, 899999990};
int main(void){
    fastio;
    ll t;
    cin>>t;
    f(i,0,150){
        if(ansi[i] != -1){
            ansi[i]--;
        }
    }
    w(t){
        ll n,k;
        cin>>n>>k;
        if(k == 0){
            cout<<ans[n-1]<<"\n";
        }
        else if(k == 1){
            cout<<ansi[n-1]<<"\n";
        }
        else{
            cout<<ans[150 + 9 * (n-1) + k-1]<<"\n";
        }
    }
}
