




#include <stdio.h>
#include <vector>
#include <set>
#include <algorithm>
using namespace std;

int n,m,w;
class par
{
public:
	int n,max,len;
	vector<int> *stav;
	par();
};
par::par()
{
	stav=new(vector<int>);
}
bool f(par a,par b)
{
	return (a.max>b.max);
}
 #define all(c) c.begin(), c.end() 
 #define vi vector<int>
 #define vvi vector<vector<int>>

class dig
{
public:
	int num;
	int a[4];
	dig(int n);
	pair<int,int> check(dig d);
	bool ok();

};
pair<int,int> dig::check(dig d)
{
	int bk=0;
	int k=0;
	for(int i=0;i<4;i++)
		if(a[i]==d.a[i])
			bk++;
	
	for(int j=0;j<4;j++)
	{
		int u=0;
		for(int i=0;i<4;i++)
			if(a[j]==d.a[i])
				u=1;
		k+=u;
	}
	k-=bk;
	pair<int,int> h(bk,k);
	return h;

}
dig::dig(int n)
{
	num=n;
	a[0]=num/1000;
	a[1]=(num/100)%10;
	a[2]=(num/10)%10;
	a[3]=(num/1)%10;

}

bool dig::ok()
{
	if(a[0]!=a[1])
	if(a[0]!=a[2])
	if(a[0]!=a[3])
	if(a[2]!=a[1])
	if(a[3]!=a[1])
	if(a[2]!=a[3])
		return true;
	return false;

}
#define tr(container, it) for(decltype(container.begin()) it = container.begin(); it != container.end(); it++)
int findbest(vector<dig> &dgs)
{
	vvi res;
	res.resize(5);
	for(int i=0;i<5;i++)
		res[i].resize(5);
	int best=10000;
	int h=0;
	for(int gi=0;gi<10000;gi++)
	{
		for(int i=0;i<5;i++)
		for(int j=0;j<5;j++)
			res[i][j]=0;
		int worst=0;
		dig word(gi);
		tr(dgs,dz)
		{
			dig &d=*dz;
			if(d.ok())
			{
				pair<int,int> h=d.check(word);
				res[h.first][h.second]++;
			}
		}
		for(int i=0;i<5;i++)
		for(int j=0;j<5;j++)
			if(res[i][j]>worst)worst=res[i][j];
		if(worst<best)
		{best=worst;h=gi;}
	}
	return h;
}
vector<vector<vector<vector<int>>>> qpath;
vector<int> path;
void pr(int i)
{
	printf("qpath[%d][%d][%d][%d]=%d;\n",path[0],path[1],path[2],path[3],i);

}
bool solve(int left,vector<dig> &dgs)
{
	if(left==0)
		return false;
	if(dgs.size()<=1)
		return true;
	bool flag=true;
	int bd=findbest(dgs);
	if(left>3)
	pr(bd);
		dig word(bd);
	vector<vector<vector<dig>>> dgs2;
	dgs2.resize(5);
	for(int i=0;i<5;i++)
	{
		dgs2[i].resize(5);
	}
	tr(dgs,dz)
	{
		dig &d=*dz;
		if(d.ok())
		{
			pair<int,int> h=d.check(word);
			dgs2[h.first][h.second].push_back(*dz);
		}
	}
	for(int i=0;i<5;i++)
		for(int j=0;j<5;j++)
		{
			path[7-left]=i*5+j;
			flag=flag&&solve(left-1,dgs2[i][j]);
		}
	path[7-left]=25;
	return true;
}
int main()
{
	int a,b;
	path.resize(7);

	qpath.resize(30);
	for(int i=0;i<30;i++)
	{
		qpath[i].resize(30);
		for(int ii=0;ii<30;ii++)
		{
			qpath[i][ii].resize(30);
			for(int iii=0;iii<30;iii++)
			{
				qpath[i][ii][iii].resize(30);
				for(int iiii=0;iiii<30;iiii++)
					qpath[i][ii][iii][iiii]=0;
			}
		}
	}
	qpath[25][25][25][25]=123;
	qpath[0][25][25][25]=4567;
	qpath[0][2][25][25]=4889;
	qpath[0][2][2][25]=58;
	qpath[0][2][3][25]=468;
	qpath[0][2][6][25]=9586;
	qpath[0][2][7][25]=584;
	qpath[0][2][10][25]=680;
	qpath[0][2][11][25]=5486;
	qpath[0][3][25][25]=5678;
	qpath[0][3][2][25]=6494;
	qpath[0][3][3][25]=6484;
	qpath[0][3][4][25]=705;
	qpath[0][3][6][25]=9474;
	qpath[0][3][7][25]=458;
	qpath[0][3][8][25]=5685;
	qpath[0][3][10][25]=574;
	qpath[0][3][11][25]=684;
	qpath[0][3][12][25]=75;
	qpath[0][3][15][25]=40;
	qpath[0][4][25][25]=445;
	qpath[0][4][2][25]=670;
	qpath[0][4][6][25]=450;
	qpath[0][4][10][25]=640;
	qpath[0][6][25][25]=4889;
	qpath[0][6][2][25]=778;
	qpath[0][6][3][25]=8694;
	qpath[0][6][6][25]=5087;
	qpath[0][6][7][25]=4578;
	qpath[0][6][10][25]=65;
	qpath[0][6][11][25]=85;
	qpath[0][6][15][25]=87;
	qpath[0][7][25][25]=4578;
	qpath[0][7][2][25]=64;
	qpath[0][7][3][25]=5865;
	qpath[0][7][4][25]=450;
	qpath[0][7][6][25]=545;
	qpath[0][7][7][25]=586;
	qpath[0][7][8][25]=4;
	qpath[0][7][10][25]=46;
	qpath[0][7][11][25]=549;
	qpath[0][7][12][25]=4748;
	qpath[0][7][15][25]=4;
	qpath[0][8][25][25]=4456;
	qpath[0][8][3][25]=64;
	qpath[0][8][7][25]=65;
	qpath[0][10][25][25]=4678;
	qpath[0][10][2][25]=86;
	qpath[0][10][3][25]=800;
	qpath[0][10][6][25]=4;
	qpath[0][10][7][25]=86;
	qpath[0][11][25][25]=468;
	qpath[0][11][1][25]=47;
	qpath[0][11][2][25]=540;
	qpath[0][11][3][25]=5;
	qpath[0][11][5][25]=7;
	qpath[0][11][6][25]=508;
	qpath[0][11][7][25]=4;
	qpath[0][11][10][25]=4;
	qpath[0][11][11][25]=7;
	qpath[0][12][25][25]=4455;
	qpath[0][12][2][25]=4;
	qpath[0][12][6][25]=6;
	qpath[0][12][10][25]=5;
	qpath[0][15][25][25]=568;
	qpath[0][15][5][25]=5;
	qpath[0][15][6][25]=5;
	qpath[0][15][10][25]=4;
	qpath[1][25][25][25]=1456;
	qpath[1][0][25][25]=2077;
	qpath[1][0][1][25]=389;
	qpath[1][0][2][25]=7808;
	qpath[1][0][5][25]=3837;
	qpath[1][0][6][25]=878;
	qpath[1][0][10][25]=7;
	qpath[1][1][25][25]=4077;
	qpath[1][1][0][25]=2668;
	qpath[1][1][1][25]=839;
	qpath[1][1][2][25]=2706;
	qpath[1][1][3][25]=8;
	qpath[1][1][5][25]=1287;
	qpath[1][1][6][25]=2804;
	qpath[1][1][7][25]=18;
	qpath[1][1][10][25]=4278;
	qpath[1][1][11][25]=18;
	qpath[1][1][15][25]=78;
	qpath[1][2][25][25]=564;
	qpath[1][2][1][25]=7618;
	qpath[1][2][2][25]=4275;
	qpath[1][2][3][25]=4607;
	qpath[1][2][5][25]=5714;
	qpath[1][2][6][25]=4367;
	qpath[1][2][7][25]=4067;
	qpath[1][2][10][25]=2576;
	qpath[1][2][11][25]=67;
	qpath[1][3][25][25]=2571;
	qpath[1][3][1][25]=4605;
	qpath[1][3][2][25]=4285;
	qpath[1][3][3][25]=745;
	qpath[1][3][5][25]=4381;
	qpath[1][3][6][25]=781;
	qpath[1][3][7][25]=14;
	qpath[1][3][10][25]=4285;
	qpath[1][3][11][25]=60;
	qpath[1][3][15][25]=4;
	qpath[1][4][25][25]=501;
	qpath[1][4][2][25]=4;
	qpath[1][4][6][25]=1;
	qpath[1][4][10][25]=40;
	qpath[1][5][25][25]=2054;
	qpath[1][5][0][25]=3376;
	qpath[1][5][1][25]=267;
	qpath[1][5][2][25]=70;
	qpath[1][5][5][25]=375;
	qpath[1][5][6][25]=1752;
	qpath[1][5][10][25]=787;
	qpath[1][6][25][25]=2406;
	qpath[1][6][0][25]=575;
	qpath[1][6][1][25]=1760;
	qpath[1][6][2][25]=4670;
	qpath[1][6][5][25]=1478;
	qpath[1][6][6][25]=3478;
	qpath[1][6][7][25]=7086;
	qpath[1][6][10][25]=2545;
	qpath[1][6][11][25]=2467;
	qpath[1][7][25][25]=1557;
	qpath[1][7][1][25]=461;
	qpath[1][7][2][25]=485;
	qpath[1][7][3][25]=14;
	qpath[1][7][5][25]=14;
	qpath[1][7][6][25]=658;
	qpath[1][7][7][25]=556;
	qpath[1][7][10][25]=45;
	qpath[1][7][15][25]=4;
	qpath[1][8][25][25]=411;
	qpath[1][8][2][25]=4;
	qpath[1][8][6][25]=1;
	qpath[1][8][10][25]=1;
	qpath[1][10][25][25]=2435;
	qpath[1][10][0][25]=70;
	qpath[1][10][1][25]=67;
	qpath[1][10][2][25]=7308;
	qpath[1][10][5][25]=67;
	qpath[1][10][6][25]=276;
	qpath[1][10][7][25]=27;
	qpath[1][10][10][25]=37;
	qpath[1][10][11][25]=78;
	qpath[1][11][25][25]=7418;
	qpath[1][11][1][25]=219;
	qpath[1][11][2][25]=57;
	qpath[1][11][3][25]=47;
	qpath[1][11][5][25]=6;
	qpath[1][11][6][25]=51;
	qpath[1][11][7][25]=58;
	qpath[1][11][11][25]=6;
	qpath[1][12][25][25]=401;
	qpath[1][12][2][25]=4;
	qpath[1][12][6][25]=5;
	qpath[1][15][25][25]=1478;
	qpath[1][15][5][25]=24;
	qpath[1][15][6][25]=7;
	qpath[1][15][10][25]=5;
	qpath[1][15][11][25]=5;
	qpath[1][15][15][25]=5;
	qpath[2][25][25][25]=1204;
	qpath[2][1][25][25]=2350;
	qpath[2][1][1][25]=631;
	qpath[2][1][2][25]=135;
	qpath[2][1][3][25]=3505;
	qpath[2][1][5][25]=6718;
	qpath[2][1][6][25]=135;
	qpath[2][1][7][25]=2336;
	qpath[2][1][10][25]=2067;
	qpath[2][1][11][25]=2365;
	qpath[2][1][15][25]=670;
	qpath[2][2][25][25]=2345;
	qpath[2][2][0][25]=61;
	qpath[2][2][1][25]=516;
	qpath[2][2][2][25]=3416;
	qpath[2][2][3][25]=3426;
	qpath[2][2][4][25]=450;
	qpath[2][2][5][25]=16;
	qpath[2][2][6][25]=2056;
	qpath[2][2][7][25]=2336;
	qpath[2][2][8][25]=40;
	qpath[2][2][10][25]=3640;
	qpath[2][2][11][25]=672;
	qpath[2][2][12][25]=2;
	qpath[2][2][15][25]=67;
	qpath[2][3][25][25]=2560;
	qpath[2][3][1][25]=441;
	qpath[2][3][2][25]=4517;
	qpath[2][3][3][25]=45;
	qpath[2][3][5][25]=410;
	qpath[2][3][6][25]=4716;
	qpath[2][3][7][25]=6;
	qpath[2][3][10][25]=247;
	qpath[2][3][11][25]=5;
	qpath[2][3][15][25]=5;
	qpath[2][5][25][25]=256;
	qpath[2][5][0][25]=378;
	qpath[2][5][1][25]=378;
	qpath[2][5][2][25]=1367;
	qpath[2][5][3][25]=300;
	qpath[2][5][5][25]=7238;
	qpath[2][5][6][25]=3215;
	qpath[2][5][7][25]=330;
	qpath[2][5][10][25]=1736;
	qpath[2][6][25][25]=1562;
	qpath[2][6][0][25]=3074;
	qpath[2][6][1][25]=2334;
	qpath[2][6][2][25]=2700;
	qpath[2][6][3][25]=2517;
	qpath[2][6][4][25]=15;
	qpath[2][6][5][25]=1078;
	qpath[2][6][6][25]=1750;
	qpath[2][6][7][25]=571;
	qpath[2][6][10][25]=2578;
	qpath[2][6][11][25]=57;
	qpath[2][6][15][25]=67;
	qpath[2][7][25][25]=1442;
	qpath[2][7][2][25]=1054;
	qpath[2][7][3][25]=2516;
	qpath[2][7][6][25]=1405;
	qpath[2][7][7][25]=5067;
	qpath[2][7][10][25]=1045;
	qpath[2][7][15][25]=456;
	qpath[2][10][25][25]=256;
	qpath[2][10][0][25]=37;
	qpath[2][10][1][25]=1758;
	qpath[2][10][2][25]=1578;
	qpath[2][10][5][25]=3247;
	qpath[2][10][6][25]=1067;
	qpath[2][10][7][25]=175;
	qpath[2][10][10][25]=157;
	qpath[2][10][11][25]=7008;
	qpath[2][11][25][25]=1456;
	qpath[2][11][1][25]=74;
	qpath[2][11][2][25]=57;
	qpath[2][11][3][25]=5;
	qpath[2][11][6][25]=27;
	qpath[2][11][7][25]=0;
	qpath[2][11][10][25]=78;
	qpath[2][11][11][25]=4;
	qpath[2][15][25][25]=250;
	qpath[2][15][1][25]=67;
	qpath[2][15][5][25]=67;
	qpath[2][15][6][25]=67;
	qpath[3][25][25][25]=1242;
	qpath[3][1][25][25]=3031;
	qpath[3][1][2][25]=506;
	qpath[3][1][3][25]=5067;
	qpath[3][1][6][25]=567;
	qpath[3][1][7][25]=356;
	qpath[3][1][10][25]=567;
	qpath[3][1][11][25]=56;
	qpath[3][1][15][25]=536;
	qpath[3][2][25][25]=4315;
	qpath[3][2][1][25]=67;
	qpath[3][2][2][25]=1637;
	qpath[3][2][3][25]=0;
	qpath[3][2][5][25]=67;
	qpath[3][2][6][25]=367;
	qpath[3][2][7][25]=1;
	qpath[3][2][10][25]=67;
	qpath[3][2][15][25]=0;
	qpath[3][3][25][25]=1;
	qpath[3][5][25][25]=3220;
	qpath[3][5][2][25]=56;
	qpath[3][5][3][25]=56;
	qpath[3][5][6][25]=356;
	qpath[3][5][7][25]=56;
	qpath[3][5][11][25]=506;
	qpath[3][5][15][25]=567;
	qpath[3][6][25][25]=3512;
	qpath[3][6][2][25]=1067;
	qpath[3][6][3][25]=567;
	qpath[3][6][6][25]=1067;
	qpath[3][6][7][25]=67;
	qpath[3][6][10][25]=67;
	qpath[3][6][11][25]=3167;
	qpath[3][6][12][25]=2;
	qpath[3][6][15][25]=67;
	qpath[3][7][25][25]=12;
	qpath[3][7][2][25]=30;
	qpath[3][7][7][25]=1;
	qpath[3][7][10][25]=300;
	qpath[3][10][25][25]=4205;
	qpath[3][10][1][25]=367;
	qpath[3][10][2][25]=67;
	qpath[3][10][3][25]=1;
	qpath[3][10][5][25]=67;
	qpath[3][10][6][25]=267;
	qpath[3][10][7][25]=1;
	qpath[3][10][10][25]=67;
	qpath[3][11][25][25]=201;
	qpath[3][15][25][25]=1;
	qpath[4][25][25][25]=1;
	qpath[4][2][25][25]=230;
	qpath[4][6][25][25]=10;
	qpath[4][10][25][25]=200;
	qpath[5][25][25][25]=145;
	qpath[5][0][25][25]=2673;
	qpath[5][0][2][25]=7807;
	qpath[5][0][3][25]=86;
	qpath[5][0][6][25]=2896;
	qpath[5][0][7][25]=783;
	qpath[5][0][10][25]=886;
	qpath[5][0][11][25]=78;
	qpath[5][0][15][25]=8;
	qpath[5][1][25][25]=4627;
	qpath[5][1][0][25]=5580;
	qpath[5][1][1][25]=5750;
	qpath[5][1][2][25]=6578;
	qpath[5][1][3][25]=60;
	qpath[5][1][5][25]=288;
	qpath[5][1][6][25]=8526;
	qpath[5][1][7][25]=284;
	qpath[5][1][8][25]=4;
	qpath[5][1][10][25]=526;
	qpath[5][1][11][25]=2484;
	qpath[5][1][12][25]=4406;
	qpath[5][1][15][25]=487;
	qpath[5][2][25][25]=4526;
	qpath[5][2][2][25]=57;
	qpath[5][2][3][25]=50;
	qpath[5][2][6][25]=708;
	qpath[5][2][7][25]=274;
	qpath[5][2][10][25]=78;
	qpath[5][2][11][25]=7028;
	qpath[5][2][12][25]=4;
	qpath[5][2][15][25]=78;
	qpath[5][5][25][25]=616;
	qpath[5][5][0][25]=725;
	qpath[5][5][1][25]=7778;
	qpath[5][5][2][25]=6078;
	qpath[5][5][5][25]=7778;
	qpath[5][5][6][25]=7706;
	qpath[5][5][10][25]=678;
	qpath[5][6][25][25]=256;
	qpath[5][6][0][25]=4078;
	qpath[5][6][1][25]=1768;
	qpath[5][6][2][25]=427;
	qpath[5][6][3][25]=400;
	qpath[5][6][5][25]=407;
	qpath[5][6][6][25]=467;
	qpath[5][6][7][25]=78;
	qpath[5][6][10][25]=467;
	qpath[5][6][11][25]=57;
	qpath[5][6][15][25]=708;
	qpath[5][7][25][25]=4450;
	qpath[5][7][2][25]=67;
	qpath[5][7][3][25]=67;
	qpath[5][7][6][25]=67;
	qpath[5][7][7][25]=67;
	qpath[5][7][10][25]=67;
	qpath[5][7][11][25]=67;
	qpath[5][10][25][25]=56;
	qpath[5][10][0][25]=7;
	qpath[5][10][1][25]=75;
	qpath[5][10][2][25]=67;
	qpath[5][10][5][25]=7;
	qpath[5][10][6][25]=75;
	qpath[5][10][7][25]=67;
	qpath[5][10][10][25]=708;
	qpath[5][11][25][25]=465;
	qpath[5][11][2][25]=78;
	qpath[5][11][6][25]=78;
	qpath[5][11][7][25]=78;
	qpath[5][11][15][25]=78;
	qpath[5][15][25][25]=67;
	qpath[5][15][0][25]=8;
	qpath[5][15][1][25]=6;
	qpath[5][15][5][25]=8;
	qpath[5][15][6][25]=6;
	qpath[6][25][25][25]=145;
	qpath[6][0][25][25]=6728;
	qpath[6][0][2][25]=2667;
	qpath[6][0][3][25]=260;
	qpath[6][0][6][25]=369;
	qpath[6][0][7][25]=328;
	qpath[6][0][10][25]=308;
	qpath[6][0][11][25]=307;
	qpath[6][0][15][25]=6;
	qpath[6][1][25][25]=2653;
	qpath[6][1][1][25]=7800;
	qpath[6][1][2][25]=3047;
	qpath[6][1][3][25]=357;
	qpath[6][1][4][25]=300;
	qpath[6][1][5][25]=7800;
	qpath[6][1][6][25]=763;
	qpath[6][1][7][25]=3578;
	qpath[6][1][10][25]=7618;
	qpath[6][1][11][25]=57;
	qpath[6][1][12][25]=50;
	qpath[6][1][15][25]=708;
	qpath[6][2][25][25]=4613;
	qpath[6][2][0][25]=570;
	qpath[6][2][1][25]=1560;
	qpath[6][2][2][25]=471;
	qpath[6][2][3][25]=1;
	qpath[6][2][5][25]=7803;
	qpath[6][2][6][25]=1153;
	qpath[6][2][7][25]=1784;
	qpath[6][2][10][25]=4708;
	qpath[6][2][11][25]=407;
	qpath[6][2][15][25]=4781;
	qpath[6][3][25][25]=403;
	qpath[6][3][1][25]=1;
	qpath[6][3][2][25]=1;
	qpath[6][3][6][25]=0;
	qpath[6][3][10][25]=10;
	qpath[6][5][25][25]=216;
	qpath[6][5][1][25]=1337;
	qpath[6][5][2][25]=2178;
	qpath[6][5][3][25]=2067;
	qpath[6][5][5][25]=378;
	qpath[6][5][6][25]=1736;
	qpath[6][5][7][25]=67;
	qpath[6][5][10][25]=367;
	qpath[6][5][11][25]=78;
	qpath[6][5][15][25]=78;
	qpath[6][6][25][25]=256;
	qpath[6][6][0][25]=3174;
	qpath[6][6][1][25]=2107;
	qpath[6][6][2][25]=160;
	qpath[6][6][3][25]=7028;
	qpath[6][6][5][25]=781;
	qpath[6][6][6][25]=612;
	qpath[6][6][7][25]=578;
	qpath[6][6][10][25]=1576;
	qpath[6][6][11][25]=782;
	qpath[6][6][15][25]=278;
	qpath[6][7][25][25]=467;
	qpath[6][7][1][25]=852;
	qpath[6][7][2][25]=104;
	qpath[6][7][3][25]=6;
	qpath[6][7][5][25]=518;
	qpath[6][7][6][25]=253;
	qpath[6][7][7][25]=7;
	qpath[6][7][10][25]=14;
	qpath[6][7][11][25]=1;
	qpath[6][7][15][25]=1;
	qpath[6][8][25][25]=414;
	qpath[6][10][25][25]=264;
	qpath[6][10][0][25]=37;
	qpath[6][10][1][25]=247;
	qpath[6][10][2][25]=72;
	qpath[6][10][3][25]=2;
	qpath[6][10][5][25]=37;
	qpath[6][10][6][25]=378;
	qpath[6][10][7][25]=728;
	qpath[6][10][10][25]=278;
	qpath[6][10][11][25]=78;
	qpath[6][11][25][25]=265;
	qpath[6][11][1][25]=7008;
	qpath[6][11][2][25]=0;
	qpath[6][11][5][25]=708;
	qpath[6][11][6][25]=7008;
	qpath[6][11][7][25]=1;
	qpath[6][11][10][25]=718;
	qpath[6][12][25][25]=405;
	qpath[6][15][25][25]=2;
	qpath[7][25][25][25]=11;
	qpath[7][1][25][25]=233;
	qpath[7][1][2][25]=1456;
	qpath[7][1][3][25]=3456;
	qpath[7][1][6][25]=2456;
	qpath[7][1][7][25]=456;
	qpath[7][1][10][25]=456;
	qpath[7][1][11][25]=456;
	qpath[7][2][25][25]=2404;
	qpath[7][2][1][25]=536;
	qpath[7][2][2][25]=1567;
	qpath[7][2][5][25]=156;
	qpath[7][2][6][25]=506;
	qpath[7][2][7][25]=20;
	qpath[7][2][10][25]=2567;
	qpath[7][5][25][25]=233;
	qpath[7][5][2][25]=3456;
	qpath[7][5][3][25]=456;
	qpath[7][5][6][25]=456;
	qpath[7][5][7][25]=456;
	qpath[7][5][10][25]=456;
	qpath[7][5][11][25]=456;
	qpath[7][5][15][25]=456;
	qpath[7][6][25][25]=4526;
	qpath[7][6][0][25]=78;
	qpath[7][6][1][25]=45;
	qpath[7][6][5][25]=78;
	qpath[7][6][6][25]=4;
	qpath[7][10][25][25]=4214;
	qpath[7][10][1][25]=356;
	qpath[7][10][2][25]=5067;
	qpath[7][10][5][25]=156;
	qpath[7][10][6][25]=256;
	qpath[7][10][7][25]=21;
	qpath[7][10][10][25]=2567;
	qpath[8][25][25][25]=12;
	qpath[8][3][25][25]=20;
	qpath[8][7][25][25]=20;
	qpath[10][25][25][25]=245;
	qpath[10][0][25][25]=6067;
	qpath[10][0][0][25]=80;
	qpath[10][0][1][25]=78;
	qpath[10][0][5][25]=68;
	qpath[10][0][6][25]=60;
	qpath[10][1][25][25]=1653;
	qpath[10][1][1][25]=7;
	qpath[10][1][2][25]=76;
	qpath[10][1][5][25]=700;
	qpath[10][1][6][25]=1784;
	qpath[10][1][7][25]=578;
	qpath[10][1][10][25]=7008;
	qpath[10][1][11][25]=7008;
	qpath[10][2][25][25]=563;
	qpath[10][2][0][25]=74;
	qpath[10][2][1][25]=4678;
	qpath[10][2][5][25]=407;
	qpath[10][2][6][25]=57;
	qpath[10][2][10][25]=7008;
	qpath[10][3][25][25]=401;
	qpath[10][5][25][25]=366;
	qpath[10][5][1][25]=7008;
	qpath[10][5][5][25]=7;
	qpath[10][5][6][25]=70;
	qpath[10][5][7][25]=78;
	qpath[10][5][10][25]=67;
	qpath[10][5][11][25]=708;
	qpath[10][6][25][25]=1653;
	qpath[10][6][0][25]=7;
	qpath[10][6][1][25]=1784;
	qpath[10][6][2][25]=7028;
	qpath[10][6][5][25]=2678;
	qpath[10][6][6][25]=1578;
	qpath[10][6][7][25]=1;
	qpath[10][6][10][25]=708;
	qpath[10][7][25][25]=264;
	qpath[10][7][6][25]=278;
	qpath[10][7][7][25]=478;
	qpath[10][7][11][25]=708;
	qpath[10][10][25][25]=6175;
	qpath[10][10][0][25]=8;
	qpath[10][10][1][25]=6;
	qpath[10][10][5][25]=8;
	qpath[10][10][6][25]=6;
	qpath[10][10][10][25]=8;
	qpath[10][11][25][25]=267;
	qpath[10][11][6][25]=8;
	qpath[10][11][7][25]=6;
	qpath[11][25][25][25]=245;
	qpath[11][1][25][25]=1063;
	qpath[11][1][2][25]=78;
	qpath[11][1][6][25]=78;
	qpath[11][1][7][25]=7008;
	qpath[11][1][10][25]=708;
	qpath[11][1][11][25]=20;
	qpath[11][2][25][25]=26;
	qpath[11][2][1][25]=4;
	qpath[11][2][5][25]=4;
	qpath[11][2][6][25]=7008;
	qpath[11][2][10][25]=7008;
	qpath[11][3][25][25]=4;
	qpath[11][5][25][25]=167;
	qpath[11][5][6][25]=8;
	qpath[11][5][7][25]=6;
	qpath[11][5][10][25]=8;
	qpath[11][6][25][25]=2621;
	qpath[11][6][1][25]=4;
	qpath[11][6][2][25]=78;
	qpath[11][6][5][25]=78;
	qpath[11][6][6][25]=3;
	qpath[11][6][10][25]=708;
	qpath[11][7][25][25]=24;
	qpath[11][10][25][25]=167;
	qpath[11][10][5][25]=8;
	qpath[11][10][10][25]=1;
	qpath[11][11][25][25]=3;
	qpath[12][25][25][25]=11;
	qpath[12][2][25][25]=1;
	qpath[12][6][25][25]=2;
	qpath[12][10][25][25]=1;
	qpath[15][25][25][25]=145;
	qpath[15][5][25][25]=67;
	qpath[15][5][0][25]=8;
	qpath[15][5][1][25]=6;
	qpath[15][5][5][25]=8;
	qpath[15][5][6][25]=6;
	qpath[15][6][25][25]=4;
	qpath[15][10][25][25]=627;
	qpath[15][10][5][25]=8;
	qpath[15][10][6][25]=6;
	qpath[15][10][10][25]=8;
	qpath[15][11][25][25]=2;
	qpath[15][15][25][25]=2;

	for(int i=0;i<7;i++)
		path[i]=25;
	vector<dig> dgs; 
    for(int i=0;i<10000;i++)
	{
		dig d(i);
		if(d.ok())
			dgs.push_back(d);
	}
	int am[4];
	for(int i=0;i<4;i++)
		am[i]=25;
	int left=6;
	int w=123;
	while(1)
	{
		vector<vector<vector<dig>>> dgs2;
		dgs2.resize(5);
		for(int i=0;i<5;i++)
		{
			dgs2[i].resize(5);
		}
	
			dig word(w);
		tr(dgs,dz)
		{
			dig &d=*dz;
			if(d.ok())
			{
				pair<int,int> h=d.check(word);
				dgs2[h.first][h.second].push_back(*dz);
			}
		}
		printf("%d%d%d%d\n",word.a[0],word.a[1],word.a[2],word.a[3]);
		fflush(stdout);
		scanf("%d %d",&a,&b);
		dgs=dgs2[a][b];
		if(a==4)
			return 0;
		int tt=a*5+b;

		am[6-left]=tt;
		if(left>3)
		{
			w=qpath[am[0]][am[1]][am[2]][25];
			left--;
		}
		else
			w=findbest(dgs);
		if(dgs.size()==1)
			w=dgs[0].num;
		
	}
	return 0;
	
}