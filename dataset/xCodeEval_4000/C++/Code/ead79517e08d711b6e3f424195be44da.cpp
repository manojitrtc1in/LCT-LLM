#include<iostream>
#include<bits/stdtr1c++.h>
#include<vector>
#define ll long long
#define ld long double
#define precise cout << fixed << setprecision(4);

#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define zn(a,b,c) for(ll a=b;a<c;a++)
#define nz(a,b,c) for(ll a=b;a>c;a--)
using namespace std;








































double nthRoot(int A, int N) 
{ 
    
    double xPre = rand() % 10; 
  
 
    double eps = 1e-3; 

    double delX = INT_MAX; 

    double xK; 
  

    while (delX > eps) 
    { 
    
        xK = ((N - 1.0) * xPre + 
              (double)A/pow(xPre, N-1)) / (double)N; 
        delX = abs(xK - xPre); 
        xPre = xK; 
    } 
  
    return xK; 
} 
int _luck(ll x){
    ll d=log10(x)+1;
    ll n=x;
    ll c=0;
    while(n>0){
        ll r=n%10;
        if(r==4||r==7){
        c++;
        }
        n=n/10;
    }
    if(c==d) return 1;
    else return 0;
}

void print(ll arr[],ll n){
    zn(i,0,n){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
}

bool square(int n){


    for(int i=1;i*i<=n;i++){
        if((n%i==0) && (n/i==i)){
             return true;
    }
    }
    return false;
}
ll countDivisors(ll n) 
{ 
    ll cnt = 0; 
    for (ll i = 1; i <= sqrt(n); i++) { 
        if (n % i == 0) {  
            if (n / i == i) 
                cnt++; 
         else  
                cnt = cnt + 2; 
        } 
    } 
    return cnt; 
} 
ll maxdiv(ll n){
    ll ans=1;
    for(ll i=1;i<n;i++){
        if(n%i==0){
            ans=i;
        }
    }
    return ans;
}
bool isprime(ll n){
    bool flag=true;
    for(ll i=2;i<=sqrt(n);i++){
        if(n%i==0){
            flag=false;
        }
    }
    return flag;
}



    ll countFreq(string &pat, string &txt)
{
    ll M = pat.length();
    ll N = txt.length();
    ll res = 0;
    

    for (ll i = 0; i <= N - M; i++)
    {
      
        ll j;
        for (j = 0; j < M; j++)
            if (txt[i+j] != pat[j])
                break;
   
        
        if (j == M)
        {
           res++;
           j = 0;
        }
    }
    return res;
}
ll count(string a, string b)
{
    ll m = a.length();
    ll n = b.length();
    ll lookup[m + 1][n + 1];
    zn(i,0,m+1){
        zn(j,0,n+1){
            lookup[i][j] = 0;
        }
    }

    for (int i = 0; i <= n; ++i)
        lookup[0][i] = 0;
    for(int i = 0; i <= m; ++i)
        lookup[i][0] = 1;
  
    for(int i = 1; i <= m; i++)
    {
        for (int j = 1; j <= n; j++)
        {
            if (a[i - 1] == b[j - 1])
                lookup[i][j] = lookup[i - 1][j - 1] +
                               lookup[i - 1][j];
                  
            else
                lookup[i][j] = lookup[i - 1][j];
        }
    }
  
    return lookup[m][n];
}
ll solve(){
    ll n;
    cin>>n;
    ll q;
    cin>>q;
    string s;
    cin>>s;
    zn(i,0,q){
        ll x,y;
        cin>>x>>y;
        ll len = y-x;
        string c = s.substr(x-1,len+1);
        ll ans1 = count(s,c);
        ll ans2 = countFreq(c, s);
        

        if(abs(ans1 - ans2) >= 1 && ans1 != 0){
            cout<<"YES\n";
        }
        else{
            cout<<"NO\n";
        }
    }
    return 0;
}
int main(){
    ll t;
    cin>>t;
    while(t--){
        ll n;
        cin>>n;
        map<ll,ll> m;
        ll arr1[n];
        ll arr[n];
        zn(i,0,n) {
            cin>>arr[i];
            arr1[i]=arr[i];
            }
        sort(arr,arr+n);

        zn(i,0,n){
            m[arr[i]]++;
        }
        ll ans=-10;
        
            for(auto i:m){
                if(i.second==1){
                    ans=i.first;
                    break;
                }
            }
        
        if(ans==-10){
            cout<<-1<<endl;
            continue;

        }
       else{
           zn(i,0,n){
           if(arr1[i]==ans){
               cout<<i+1<<endl;
               break;
           }
       }
       }

    }
}
























































































            
















































































































        







































       



        



























        












































    















































































































        

































              




































































































































        








































































































































    






  


        






















     




































            






































        

























































       








































































































































































































































































                













    


    











































































































































































































































































































































































































       



























































































    



















































































































































































































































































































































































































































































































    
























































































































        
























    


























        




































    





























































        


























      




















         

















    






























     


      












       
        



































































































        








































































































































































































































        


















    


        
        































        
        










                






                






                






                








































