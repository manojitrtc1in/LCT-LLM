

#include <cstdio>
#include <ctime>
#include <cstdlib>
#include <cstring>
#include <queue>
#include <string>
#include <set>
#include <stack>
#include <map>
#include <cmath>
#include <vector>
#include <iostream>
#include <algorithm>
#include <bitset>
#include <fstream>
using namespace std;




#define FF(i, a, b) for(int i = (a); i < (b); ++i)
#define FD(i, b, a) for(int i = (b) - 1; i >= (a); --i)
#define FE(i, a, b) for(int i = (a); i <= (b); ++i)
#define FED(i, b, a) for(int i = (b); i>= (a); --i)
#define REP(i, N) for(int i = 0; i < (N); ++i)
#define CLR(A,value) memset(A,value,sizeof(A))
#define FC(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)




#define SZ(V) (int)V.size()
#define PB push_back
#define MP make_pair
#define all(x) (x).begin(),(x).end()
#define EQ(a, b) (fabs((a) - (b)) <= 1e-10)




#define RI(n) scanf("%d", &n)
#define RII(n, m) scanf("%d%d", &n, &m)
#define RIII(n, m, k) scanf("%d%d%d", &n, &m, &k)
#define RIV(n, m, k, p) scanf("%d%d%d%d", &n, &m, &k, &p)
#define RV(n, m, k, p, q) scanf("%d%d%d%d%d", &n, &m, &k, &p, &q)
#define RS(s) scanf("%s", s)




#define WI(n) printf("%d\n", n)
#define WS(n) printf("%s\n", n)








#define enter
#ifndef online_judge
#define debugt(a) cout << (#a) << "=" << a << " ";
#define debugI(a) debugt(a) cout << endl
#define debugII(a, b) debugt(a) debugt(b) cout << endl
#define debugIII(a, b, c) debugt(a) debugt(b) debugt(c) cout << endl
#define debugIV(a, b, c, d) debugt(a) debugt(b) debugt(c) debugt(d) cout << endl
#else
#define debugI(v)
#define debugII(a, b)
#define debugIII(a, b, c)
#endif




typedef long long LL;
typedef unsigned long long ULL;
typedef vector <int> VI;
const int INF = 0x3f3f3f3f;
const double eps = 1e-10;
const int MOD = 100000007;
const int MAXN = 300010;































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































int father[MAXN], ans[MAXN];

inline int findFather(int n)
{
    if (father[n] == n) return n;
    return father[n] = findFather(father[n]);
}

inline void merge(int a, int b)
{
    int fa = findFather(a), fb = findFather(b);
    if (fa == fb) return;
    father[fa] = fb;
}

void solve(int x, int y, int v)
{
    if (x > y) return;
    int t = findFather(x);
    while (t <= y)
    {
        int next = findFather(t);
        if (t == next)
        {
            ans[t] = v;
            merge(t, t + 1);
            t++;
        }
        else
        {
            t = next;
        }
    }
}

int main()
{


    int a, b, x, y, z;
    RII(a, b);
    FE(i, 1, a + 10) father[i] = i;
    REP(i, b)
    {
        RIII(x, y, z);
        solve(x, z - 1, z);
        solve(z + 1, y, z);
    }
    FE(i, 1, a)
    {
        if (i != 1) cout << ' ';
        cout << ans[i];
    }
    cout << endl;
    return 0;
}
