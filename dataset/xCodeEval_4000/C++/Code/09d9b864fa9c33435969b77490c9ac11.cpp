
#include <algorithm>
#include <cassert>
#include <iostream>
#include <string>
#include <map>
#include <vector>

using namespace std;

string f[256], fo[256];

bool has_or(const string& g) {
    int depth = 0;
    for (int i = 0; i < g.size(); i++) {
        if (g[i] == '(')
            depth++;
        else if (g[i] == ')')
            depth--;
        else if (depth == 0 && g[i] == '|')
            return true;
    }
    return false;
}

void check(int k, const string& g) {
    if (f[k].size() == 0
            || g.size() < f[k].size()
            || (g.size() == f[k].size() && g < f[k]))
        f[k] = g;
    if (!has_or(g)) {
        if (fo[k].size() == 0
                || g.size() < fo[k].size()
                || (g.size() == fo[k].size() && g < fo[k]))
            fo[k] = g;
    }
}

string convert(const string& g, bool check_or, bool check_and) {
    bool paren = false;
    int depth = 0;
    for (int i = 0; i < g.size(); i++) {
        if (g[i] == '(')
            depth++;
        if (g[i] == ')')
            depth--;
        if (depth == 0) {
            if (g[i] == '|' && check_or)
                paren = true;
            if (g[i] == '&' && check_and)
                paren = true;
        }
    }
    if (paren)
        return "(" + g + ")";
    return g;
}

void generate() {
    int xval = 0, yval = 0, zval = 0;
    for (int j = 0; j < 8; j++) {
        xval = 2 * xval + (j / 4);
        yval = 2 * yval + (j / 2) % 2;
        zval = 2 * zval + j % 2;
    }
    cout << xval << " " << yval << " " << zval << endl;
    f[xval] = fo[xval] = "x";
    f[yval] = fo[yval] = "y";
    f[zval] = fo[zval] = "z";

    for (int iter = 0; iter < 100; iter++) {
        for (int i = 0; i < 256; i++)
            if (f[i].size() != 0) {
                

                int k = 255 ^ i;
                string g = "!" + convert(f[i], true, true);
                check(k, g);
                if (fo[i].size() != 0)
                    check(k, "!" + convert(fo[i], true, true));
            }
        for (int i = 0; i < 256; i++)
            if (f[i].size() != 0)
                for (int j = 0; j < 256; j++)
                    if (f[j].size() != 0) {
                        string pi = convert(f[i], true, false);
                        string pj = convert(f[j], true, false);

                        

                        int k = (i & j);
                        string g = pi + "&" + pj;
                        check(k, g);
                        if (fo[i].size() != 0 && fo[j].size() != 0)
                            check(k, fo[i] + "&" + fo[j]);

                        

                        k = (i | j);
                        g = f[i] + "|" + f[j];
                        check(k, g);
                        if (fo[i].size() != 0 && fo[j].size() != 0)
                            check(k, fo[i] + "|" + fo[j]);
                    }
    }

    for (int i = 0; i < 256; i++) {
        

        string b = "";
        for (int j = 0; j < 8; j++)
            b += '0' + (i >> (7 - j)) % 2;
        printf("{\"%s\", \"%s\"},\n", b.c_str(), f[i].c_str());
    }
}

map <string, string> m = {
{"00000000", "!x&x"},
{"00000001", "x&y&z"},
{"00000010", "!z&x&y"},
{"00000011", "x&y"},
{"00000100", "!y&x&z"},
{"00000101", "x&z"},
{"00000110", "!y&x&z|!z&x&y"},
{"00000111", "(y|z)&x"},
{"00001000", "!y&!z&x"},
{"00001001", "!y&!z&x|x&y&z"},
{"00001010", "!z&x"},
{"00001011", "!z&x|x&y"},
{"00001100", "!y&x"},
{"00001101", "!y&x|x&z"},
{"00001110", "!(y&z)&x"},
{"00001111", "x"},
{"00010000", "!x&y&z"},
{"00010001", "y&z"},
{"00010010", "!x&y&z|!z&x&y"},
{"00010011", "(x|z)&y"},
{"00010100", "!x&y&z|!y&x&z"},
{"00010101", "(x|y)&z"},
{"00010110", "!x&y&z|!y&x&z|!z&x&y"},
{"00010111", "(x|y)&z|x&y"},
{"00011000", "!x&y&z|!y&!z&x"},
{"00011001", "!y&!z&x|y&z"},
{"00011010", "!x&y&z|!z&x"},
{"00011011", "!z&x|y&z"},
{"00011100", "!x&y&z|!y&x"},
{"00011101", "!y&x|y&z"},
{"00011110", "!(y&z)&x|!x&y&z"},
{"00011111", "x|y&z"},
{"00100000", "!x&!z&y"},
{"00100001", "!x&!z&y|x&y&z"},
{"00100010", "!z&y"},
{"00100011", "!z&y|x&y"},
{"00100100", "!x&!z&y|!y&x&z"},
{"00100101", "!x&!z&y|x&z"},
{"00100110", "!y&x&z|!z&y"},
{"00100111", "!z&y|x&z"},
{"00101000", "!(!x&!y|x&y|z)"},
{"00101001", "!(!x&!y|x&y|z)|x&y&z"},
{"00101010", "!z&(x|y)"},
{"00101011", "!z&(x|y)|x&y"},
{"00101100", "!x&!z&y|!y&x"},
{"00101101", "!x&!z&y|!y&x|x&z"},
{"00101110", "!y&x|!z&y"},
{"00101111", "!z&y|x"},
{"00110000", "!x&y"},
{"00110001", "!x&y|y&z"},
{"00110010", "!(x&z)&y"},
{"00110011", "y"},
{"00110100", "!x&y|!y&x&z"},
{"00110101", "!x&y|x&z"},
{"00110110", "!(x&z)&y|!y&x&z"},
{"00110111", "x&z|y"},
{"00111000", "!x&y|!y&!z&x"},
{"00111001", "!x&y|!y&!z&x|y&z"},
{"00111010", "!x&y|!z&x"},
{"00111011", "!z&x|y"},
{"00111100", "!x&y|!y&x"},
{"00111101", "!x&y|!y&x|x&z"},
{"00111110", "!(x&z)&y|!y&x"},
{"00111111", "x|y"},
{"01000000", "!x&!y&z"},
{"01000001", "!x&!y&z|x&y&z"},
{"01000010", "!x&!y&z|!z&x&y"},
{"01000011", "!x&!y&z|x&y"},
{"01000100", "!y&z"},
{"01000101", "!y&z|x&z"},
{"01000110", "!y&z|!z&x&y"},
{"01000111", "!y&z|x&y"},
{"01001000", "!(!x&!z|x&z|y)"},
{"01001001", "!(!x&!z|x&z|y)|x&y&z"},
{"01001010", "!x&!y&z|!z&x"},
{"01001011", "!x&!y&z|!z&x|x&y"},
{"01001100", "!y&(x|z)"},
{"01001101", "!y&(x|z)|x&z"},
{"01001110", "!y&z|!z&x"},
{"01001111", "!y&z|x"},
{"01010000", "!x&z"},
{"01010001", "!x&z|y&z"},
{"01010010", "!x&z|!z&x&y"},
{"01010011", "!x&z|x&y"},
{"01010100", "!(x&y)&z"},
{"01010101", "z"},
{"01010110", "!(x&y)&z|!z&x&y"},
{"01010111", "x&y|z"},
{"01011000", "!x&z|!y&!z&x"},
{"01011001", "!x&z|!y&!z&x|y&z"},
{"01011010", "!x&z|!z&x"},
{"01011011", "!x&z|!z&x|x&y"},
{"01011100", "!x&z|!y&x"},
{"01011101", "!y&x|z"},
{"01011110", "!(x&y)&z|!z&x"},
{"01011111", "x|z"},
{"01100000", "!(!y&!z|x|y&z)"},
{"01100001", "!(!y&!z|x|y&z)|x&y&z"},
{"01100010", "!x&!y&z|!z&y"},
{"01100011", "!x&!y&z|!z&y|x&y"},
{"01100100", "!x&!z&y|!y&z"},
{"01100101", "!x&!z&y|!y&z|x&z"},
{"01100110", "!y&z|!z&y"},
{"01100111", "!y&z|!z&y|x&y"},
{"01101000", "!(!x&!y|x&y|z)|!x&!y&z"},
{"01101001", "!(!x&!y|x&y|z)|!x&!y&z|x&y&z"},
{"01101010", "!x&!y&z|!z&(x|y)"},
{"01101011", "!x&!y&z|!z&(x|y)|x&y"},
{"01101100", "!x&!z&y|!y&(x|z)"},
{"01101101", "!x&!z&y|!y&(x|z)|x&z"},
{"01101110", "!y&(x|z)|!z&y"},
{"01101111", "!y&z|!z&y|x"},
{"01110000", "!x&(y|z)"},
{"01110001", "!x&(y|z)|y&z"},
{"01110010", "!x&z|!z&y"},
{"01110011", "!x&z|y"},
{"01110100", "!x&y|!y&z"},
{"01110101", "!x&y|z"},
{"01110110", "!(x&y)&z|!z&y"},
{"01110111", "y|z"},
{"01111000", "!x&(y|z)|!y&!z&x"},
{"01111001", "!x&(y|z)|!y&!z&x|y&z"},
{"01111010", "!x&(y|z)|!z&x"},
{"01111011", "!x&z|!z&x|y"},
{"01111100", "!x&(y|z)|!y&x"},
{"01111101", "!x&y|!y&x|z"},
{"01111110", "!x&y|!y&z|!z&x"},
{"01111111", "x|y|z"},
{"10000000", "!(x|y|z)"},
{"10000001", "!(x|y|z)|x&y&z"},
{"10000010", "!(!x&y|!y&x|z)"},
{"10000011", "!(x|y|z)|x&y"},
{"10000100", "!(!x&z|!z&x|y)"},
{"10000101", "!(x|y|z)|x&z"},
{"10000110", "!(!x&y|!y&x|z)|!y&x&z"},
{"10000111", "!(x|y|z)|(y|z)&x"},
{"10001000", "!y&!z"},
{"10001001", "!y&!z|x&y&z"},
{"10001010", "!(!x&y|z)"},
{"10001011", "!y&!z|x&y"},
{"10001100", "!(!x&z|y)"},
{"10001101", "!y&!z|x&z"},
{"10001110", "!(!x&y|z)|!y&x"},
{"10001111", "!y&!z|x"},
{"10010000", "!(!y&z|!z&y|x)"},
{"10010001", "!(x|y|z)|y&z"},
{"10010010", "!(!x&y|!y&x|z)|!x&y&z"},
{"10010011", "!(x|y|z)|(x|z)&y"},
{"10010100", "!(!x&z|!z&x|y)|!x&y&z"},
{"10010101", "!(x|y|z)|(x|y)&z"},
{"10010110", "!(!x&y|!y&x|z)|!x&y&z|!y&x&z"},
{"10010111", "!(x|y|z)|(x|y)&z|x&y"},
{"10011000", "!x&y&z|!y&!z"},
{"10011001", "!y&!z|y&z"},
{"10011010", "!(!x&y|z)|!x&y&z"},
{"10011011", "!(!x&y|z)|y&z"},
{"10011100", "!(!x&z|y)|!x&y&z"},
{"10011101", "!(!x&z|y)|y&z"},
{"10011110", "!(!x&y|z)|!x&y&z|!y&x"},
{"10011111", "!y&!z|x|y&z"},
{"10100000", "!x&!z"},
{"10100001", "!x&!z|x&y&z"},
{"10100010", "!(!y&x|z)"},
{"10100011", "!x&!z|x&y"},
{"10100100", "!x&!z|!y&x&z"},
{"10100101", "!x&!z|x&z"},
{"10100110", "!(!y&x|z)|!y&x&z"},
{"10100111", "!(!y&x|z)|x&z"},
{"10101000", "!(x&y|z)"},
{"10101001", "!(x&y|z)|x&y&z"},
{"10101010", "!z"},
{"10101011", "!z|x&y"},
{"10101100", "!x&!z|!y&x"},
{"10101101", "!(x&y|z)|x&z"},
{"10101110", "!y&x|!z"},
{"10101111", "!z|x"},
{"10110000", "!(!y&z|x)"},
{"10110001", "!x&!z|y&z"},
{"10110010", "!(!y&x|z)|!x&y"},
{"10110011", "!x&!z|y"},
{"10110100", "!(!y&z|x)|!y&x&z"},
{"10110101", "!(!y&z|x)|x&z"},
{"10110110", "!(!y&x|z)|!x&y|!y&x&z"},
{"10110111", "!x&!z|x&z|y"},
{"10111000", "!x&y|!y&!z"},
{"10111001", "!(x&y|z)|y&z"},
{"10111010", "!x&y|!z"},
{"10111011", "!z|y"},
{"10111100", "!(!x&!y&z|x&y)"},
{"10111101", "!x&!z|!y&x|y&z"},
{"10111110", "!x&y|!y&x|!z"},
{"10111111", "!z|x|y"},
{"11000000", "!x&!y"},
{"11000001", "!x&!y|x&y&z"},
{"11000010", "!x&!y|!z&x&y"},
{"11000011", "!x&!y|x&y"},
{"11000100", "!(!z&x|y)"},
{"11000101", "!x&!y|x&z"},
{"11000110", "!(!z&x|y)|!z&x&y"},
{"11000111", "!(!z&x|y)|x&y"},
{"11001000", "!(x&z|y)"},
{"11001001", "!(x&z|y)|x&y&z"},
{"11001010", "!x&!y|!z&x"},
{"11001011", "!(x&z|y)|x&y"},
{"11001100", "!y"},
{"11001101", "!y|x&z"},
{"11001110", "!y|!z&x"},
{"11001111", "!y|x"},
{"11010000", "!(!z&y|x)"},
{"11010001", "!x&!y|y&z"},
{"11010010", "!(!z&y|x)|!z&x&y"},
{"11010011", "!(!z&y|x)|x&y"},
{"11010100", "!(!z&x|y)|!x&z"},
{"11010101", "!x&!y|z"},
{"11010110", "!(!z&x|y)|!x&z|!z&x&y"},
{"11010111", "!x&!y|x&y|z"},
{"11011000", "!x&z|!y&!z"},
{"11011001", "!(x&z|y)|y&z"},
{"11011010", "!(!x&!z&y|x&z)"},
{"11011011", "!x&!y|!z&x|y&z"},
{"11011100", "!x&z|!y"},
{"11011101", "!y|z"},
{"11011110", "!x&z|!y|!z&x"},
{"11011111", "!y|x|z"},
{"11100000", "!(x|y&z)"},
{"11100001", "!(x|y&z)|x&y&z"},
{"11100010", "!x&!y|!z&y"},
{"11100011", "!(x|y&z)|x&y"},
{"11100100", "!x&!z|!y&z"},
{"11100101", "!(x|y&z)|x&z"},
{"11100110", "!(!y&!z&x|y&z)"},
{"11100111", "!x&!y|!z&y|x&z"},
{"11101000", "!((x|y)&z|x&y)"},
{"11101001", "!((x|y)&z|x&y)|x&y&z"},
{"11101010", "!x&!y|!z"},
{"11101011", "!x&!y|!z|x&y"},
{"11101100", "!x&!z|!y"},
{"11101101", "!x&!z|!y|x&z"},
{"11101110", "!y|!z"},
{"11101111", "!y|!z|x"},
{"11110000", "!x"},
{"11110001", "!x|y&z"},
{"11110010", "!x|!z&y"},
{"11110011", "!x|y"},
{"11110100", "!x|!y&z"},
{"11110101", "!x|z"},
{"11110110", "!x|!y&z|!z&y"},
{"11110111", "!x|y|z"},
{"11111000", "!x|!y&!z"},
{"11111001", "!x|!y&!z|y&z"},
{"11111010", "!x|!z"},
{"11111011", "!x|!z|y"},
{"11111100", "!x|!y"},
{"11111101", "!x|!y|z"},
{"11111110", "!(x&y&z)"},
{"11111111", "!x|x"},
};

int main() {
    


    int n;
    cin >> n;
    for (int i = 0; i < n; i++) {
        string s;
        cin >> s;
        cout << m[s] << endl;
    }
}
