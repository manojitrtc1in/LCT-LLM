#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>
#include <cstring>

#define int                         long long
#define endl                        '\n'
#define vb                          vector<bool>
#define vbb                         vector<vb>
#define vi                          vector<int>
#define vvi                         vector<vector<int>>
#define inf                         1e18
#define setbits(x)                  __builtin_popcountll(x)
#define loop(i,a,b)                 for(int i = a; i<=b; i+=1)
#define revloop(i,a,b)              for(int i = a; i>=b; i-=1)
#define pii                         pair<int,int>
#define w(x)                        int x; cin >> x; while(x--)
#define pb                          push_back
#define ust                         unordered_set
#define ump                         unordered_map
#define ff                          first
#define ss                          second
#define bug(...)                    __f (#__VA_ARGS__, __VA_ARGS__)
#define printV(v)                   for(auto &it: v) cout<<it<<" "; cout<<endl;
#define printVV(v)                  for(auto &it: v) {printV(it);}
#define all(v)                      v.begin(),v.end()
#define inp(i)                      int i; cin >> i;
#define inp2(i,j)                   int i,j; cin >> i >> j;
#define inp3(i,j,k)                 int i,j,k; cin >> i >> j >> k;
#define inp4(i,j,k,l)               int i,j,k,l; cin >> i >> j >> k >> l;
#define inparr(arr, n)              vi arr(n); for(auto &it: arr) cin >> it;
#define MOD                         1000000007ll
#define fill(a,b)                   memset(a, b, sizeof(a))
#define uniq(v)                     (v).erase(unique(all(v)),(v).end())
using namespace std;





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































set <int> res;
void dfs (vvi adj[], int curr, int par, int respect) {




    if (!respect) res.insert (par);
    for (auto &it: adj[curr]) {
        if (it[0] == par) continue;


        dfs (adj, it[0], curr, it[1]);
    }


}
void solve9 () {
    inp (n);
    set<int> res1;
    vvi adj[n + 1];
    int root = -1;
    for (int i = 1; i <= n; ++i) {
        inp2 (x, y);
        if (x == -1) { root = i; continue; }
        if (y == 1) res1.insert (i);
        adj[x].pb ({i, y});
    }
    dfs (adj, root,-1, 0);


































    res.insert (root);
    bool fl = 0;
    for (int i = 1; i <= n; ++i) {
        if (res.find (i) == res.end () && res1.find (i) != res1.end ()) {
            cout << i << " ";
            fl = 1;
        }
    }
    if (!fl) cout << -1;
   
}
int checkStrSz (int size, string &str) {


    int a[10] = {0};
    for (int i = 0; i < size ; ++i) {


        a[str[i] - '0']++;


    }








    int res = 0;
    int tmp = 0;
    tmp = max ({a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]});
    int z = (a[0] > 0) + (a[1] > 0) + (a[2] > 0) + (a[3] > 0) + (a[4] > 0) + (a[5] > 0) + (a[6] > 0) + (a[7] > 0) + (a[8] > 0) + (a[9] > 0);
    if (tmp <= z) res++;
    for (int i = size; i < str.size (); ++i) {






        a[str[i - size] - '0']--;
        a[str[i] - '0']++;


        
        tmp = max ({a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]});
        z = (a[0] > 0) + (a[1] > 0) + (a[2] > 0) + (a[3] > 0) + (a[4] > 0) + (a[5] > 0) + (a[6] > 0) + (a[7] > 0) + (a[8] > 0) + (a[9] > 0);










        if (tmp <= z) res++;
    }
    return res;
}
void solve11 () {
    inp (n);
    string str; cin >> str;
    int res = 0;
    for (int i = 1; i <= min (100ll, n); ++i) {
        int tres = checkStrSz(i, str);
        res += tres;


    }
    cout << res << endl;
    
    
}
int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    clock_t z = clock();
    cout << fixed << setprecision(12);
    w(x)
    {


        solve11();
    }
    cerr << "Run Time : " << ((double)(clock() - z) / CLOCKS_PER_SEC) << endl;
    
    return 0;
    
}

