


























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <cmath>
#include <cstring>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <ctime>
#include <cctype>
#include <stack>
#include <map>

using namespace std;

namespace fastIO {
#define BUF_SIZE 100000
    

    bool IOerror = 0;

    inline char nc() {
        static char buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;
        if (p1 == pend) {
            p1 = buf;
            pend = buf + fread(buf, 1, BUF_SIZE, stdin);
            if (pend == p1) {
                IOerror = 1;
                return -1;
            }
        }
        return *p1++;
    }

    inline bool blank(char ch) {
        return ch == ' ' || ch == '\n' || ch == '\r' || ch == '\t';
    }

    inline void read(int &x) {
        char ch;
        while (blank(ch = nc()));
        if (IOerror)
            return;
        for (x = ch - '0'; (ch = nc()) >= '0' && ch <= '9'; x = x * 10 + ch - '0');
    }

    inline void readll(long long int &x) {
        char ch;
        while (blank(ch = nc()));
        if (IOerror)
            return;
        for (x = ch - '0'; (ch = nc()) >= '0' && ch <= '9'; x = x * 10 + ch - '0');
    }

    inline void reads(char *s) {
        char ch;
        while (blank(ch = nc()));
        if (IOerror)return;
        s[0] = ch;
        for (int i = 1; (!blank(ch = nc())); ++i) {
            s[i] = ch;
        }
    }

#undef BUF_SIZE
};


#define loop(i, x) for(int i = 0; i < x; ++i)
#define circle(i, x) for(int i = 1; i <= x; ++i)
#define reverse(i, x) for(int i = x - 1; i >= 0; --i)
#define wh(t) while(t--)
#define mem(i, x) memset(i, x, sizeof(i))
#define dsc(x) scanf("%lld", &x)
#define ssc(x) scanf("%s", s)
#define lfsc(x) scanf("%lf", &x)

typedef long long ll;
typedef unsigned long long ull;
typedef int itn;

const double esp = 1e-7;
const double pi = acos(-1.0);
const int maxx = 100010;
const int mod = int(1e9 + 7);

bool ispr[maxx];
ll pr[maxx];
int pin;

void init() {
    pin = 0;
    mem(ispr, 0);
    for (int i = 2; i < maxx; ++i) {
        if (!ispr[i])pr[pin++] = i;
        for (int j = 0; j < pin; ++j) {
            ll q = i * pr[j];
            if (q >= maxx)break;
            ispr[q] = true;
            if (i == pr[j])break;
            if (i % pr[j] == 0)break;
        }
    }

}

ll a[maxx];
vector<pair<ll, ll>> v;

ll qpow(ll a, ll b) {
    ll ret = 1;

    return ret;
}

int main() {
    init();
    ll n, k;
    dsc(n);
    dsc(k);
    ll ans = 0;
    mem(a, 0);
    loop(i, n) {
        ll com;
        dsc(com);
        v.clear();
        loop(j, pin) {
            if (pr[j] * pr[j] > com)break;
            if (com % pr[j])continue;
            ll cnt = 0;
            while (com % pr[j] == 0) {
                com /= pr[j];
                cnt++;
            }
            v.emplace_back(pr[j], cnt % k);
        }
        if (com != 1) {
            v.emplace_back(com, 1);
        }
        ll q = 1;
        ll fi = 1;
        for (auto j : v) {
            if (!j.second)continue;
            ll cnt = j.second;
            while (cnt--) {
                q *= j.first;
            }
            cnt = k - j.second;
            while (cnt--) {
                fi *= j.first;
                if (fi < 0 || fi > maxx) {
                    fi = -1;
                    break;
                }
            }
        }


        if (fi > 0)ans += a[fi];
        a[q]++;
    }
    cout << ans << endl;
    return 0;
}
