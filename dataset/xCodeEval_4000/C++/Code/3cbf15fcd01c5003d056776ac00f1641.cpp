#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second


#define FILE "series"
#define ld long double
#define endl '\n'
#define pii pair <int, int>
#define last fedgfre


#define bigint long long










using namespace std;
using namespace __gnu_pbds;

typedef tree <int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const int N = 3e5 + 5;
const bigint mod = 998244353;
const int rx[8] = {1, -1, 0, 0, 1, 1, -1, -1 };
const int ry[8] = {0, 0, 1, -1, 1, -1, 1, -1 };
const ld pi = acos(-1.0);
const int B = (int)sqrt(N);

mt19937 gen(chrono::high_resolution_clock::now().time_since_epoch().count());































































































































































































































































































































































































































































































































































































































































































































































































































int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    

#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else




#endif 

    int n, k;
    cin >> n >> k;
    bigint res = n;
    k--;
    string s, t;
    cin >> s >> t;
    bigint big = 1e9 + 7;
























    bigint mamka = n;
    for (int i = 0; i < n; i++) {
        if (s[i] != t[i]) {
            mamka = i;
            break;
        }
    }
    int len = s.size();
    bigint cur = 0;
    bigint pr = 0;
    bigint vanya = 1;
    vector <pair <bigint, bigint>> kek;
    kek.pb({n - mamka, vanya});
    bigint curlen = len;
    for (int i = mamka + 1; i < n; i++) {
        cur = cur * 2;
        if (s[i] == 'a') cur = cur + 1;
        if (cur > big) {
            cur = big;
        }
        kek.pb({n - i, cur - pr});
        pr = cur;
        curlen--;
    }
    cur = 0;
    pr = 0;
    curlen = len;
    for (int i = mamka + 1; i < n; i++) {
        cur = cur * 2;
        if (t[i] == 'b') cur = cur + 1;
        if (cur > big) {
            cur = big;
        }
       

        kek.pb({n - i, cur - pr});
        pr = cur;
        curlen--;
    }
    sort(kek.begin(), kek.end());
    reverse(kek.begin(), kek.end());
    bigint cur_k = k;
    for (auto x : kek) {
        if (cur_k <= 0) break;
        res = res + min(cur_k, x.S) * x.F;
        cur_k -= x.S;
    }
    cout << res << endl;
    return 0;
}
