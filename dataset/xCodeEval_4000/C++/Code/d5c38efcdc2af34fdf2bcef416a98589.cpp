#include <bits/stdc++.h>
using namespace std;

const int Maxk = 405, Maxn = 100005, p = 1e9 + 7;
struct Basis
{
	int val[5];
	bool insert(int x)
	{
		for (int i = 4; i >= 0; i--)
			if (x & (1 << i))
			{
				if (val[i]) x ^= val[i];
				else
				{
					val[i] = x;
					for (int j = 0; j < i; j++)
						if (val[j] && val[i] & (1 << j))
							val[i] ^= val[j];
					for (int j = i + 1; j <= 4; j++)
						if (val[j] & (1 << i))
							val[j] ^= val[i];
					return true;
				}
			}
		return false;
	}
	int Hash(void)
	{
		return val[0] | val[1] << 1 | val[2] << 3 | val[3] << 6 | val[4] << 10;
	}
	void init(int x)
	{
		val[0] = x & 1;
		val[1] = x >> 1 & 3;
		val[2] = x >> 3 & 7;
		val[3] = x >> 6 & 15;
		val[4] = x >> 10 & 31;
	}
}B[Maxn];

int n, m, cnt, block_ct, edge_cnt, dfn_cnt, dfn[Maxn], root[Maxn], dis[Maxn], cyc[Maxn], bel[Maxn], head[Maxn], trans[Maxk][Maxk], id[Maxn], rk[Maxk];
bool vis_cyc[Maxn], done[Maxn];
struct edg
{
	int nxt, to, w;
} edge[2 * Maxn];
void add(int x, int y, int w)
{
	edge[++edge_cnt] = (edg){head[x], y, w};
	head[x] = edge_cnt;
}
void init(void)
{
	cnt = 374;
	id[1] = 1, rk[1] = 1;
	id[5] = 2, rk[2] = 5;
	id[37] = 3, rk[3] = 37;
	id[549] = 4, rk[4] = 549;
	id[16933] = 5, rk[5] = 16933;
	id[16421] = 6, rk[6] = 16421;
	id[24613] = 7, rk[7] = 24613;
	id[517] = 8, rk[8] = 517;
	id[16901] = 9, rk[9] = 16901;
	id[20997] = 10, rk[10] = 20997;
	id[773] = 11, rk[11] = 773;
	id[17157] = 12, rk[12] = 17157;
	id[21253] = 13, rk[13] = 21253;
	id[16389] = 14, rk[14] = 16389;
	id[20485] = 15, rk[15] = 20485;
	id[24581] = 16, rk[16] = 24581;
	id[28677] = 17, rk[17] = 28677;
	id[33] = 18, rk[18] = 33;
	id[545] = 19, rk[19] = 545;
	id[16929] = 20, rk[20] = 16929;
	id[18977] = 21, rk[21] = 18977;
	id[673] = 22, rk[22] = 673;
	id[17057] = 23, rk[23] = 17057;
	id[19105] = 24, rk[24] = 19105;
	id[16417] = 25, rk[25] = 16417;
	id[18465] = 26, rk[26] = 18465;
	id[24609] = 27, rk[27] = 24609;
	id[26657] = 28, rk[28] = 26657;
	id[49] = 29, rk[29] = 49;
	id[561] = 30, rk[30] = 561;
	id[16945] = 31, rk[31] = 16945;
	id[18993] = 32, rk[32] = 18993;
	id[689] = 33, rk[33] = 689;
	id[17073] = 34, rk[34] = 17073;
	id[19121] = 35, rk[35] = 19121;
	id[16433] = 36, rk[36] = 16433;
	id[18481] = 37, rk[37] = 18481;
	id[24625] = 38, rk[38] = 24625;
	id[26673] = 39, rk[39] = 26673;
	id[513] = 40, rk[40] = 513;
	id[16897] = 41, rk[41] = 16897;
	id[18945] = 42, rk[42] = 18945;
	id[20993] = 43, rk[43] = 20993;
	id[23041] = 44, rk[44] = 23041;
	id[641] = 45, rk[45] = 641;
	id[17025] = 46, rk[46] = 17025;
	id[19073] = 47, rk[47] = 19073;
	id[21121] = 48, rk[48] = 21121;
	id[23169] = 49, rk[49] = 23169;
	id[769] = 50, rk[50] = 769;
	id[17153] = 51, rk[51] = 17153;
	id[19201] = 52, rk[52] = 19201;
	id[21249] = 53, rk[53] = 21249;
	id[23297] = 54, rk[54] = 23297;
	id[897] = 55, rk[55] = 897;
	id[17281] = 56, rk[56] = 17281;
	id[19329] = 57, rk[57] = 19329;
	id[21377] = 58, rk[58] = 21377;
	id[23425] = 59, rk[59] = 23425;
	id[16385] = 60, rk[60] = 16385;
	id[18433] = 61, rk[61] = 18433;
	id[20481] = 62, rk[62] = 20481;
	id[22529] = 63, rk[63] = 22529;
	id[24577] = 64, rk[64] = 24577;
	id[26625] = 65, rk[65] = 26625;
	id[28673] = 66, rk[66] = 28673;
	id[30721] = 67, rk[67] = 30721;
	id[4] = 68, rk[68] = 4;
	id[36] = 69, rk[69] = 36;
	id[548] = 70, rk[70] = 548;
	id[16932] = 71, rk[71] = 16932;
	id[17956] = 72, rk[72] = 17956;
	id[612] = 73, rk[73] = 612;
	id[16996] = 74, rk[74] = 16996;
	id[18020] = 75, rk[75] = 18020;
	id[16420] = 76, rk[76] = 16420;
	id[17444] = 77, rk[77] = 17444;
	id[24612] = 78, rk[78] = 24612;
	id[25636] = 79, rk[79] = 25636;
	id[44] = 80, rk[80] = 44;
	id[556] = 81, rk[81] = 556;
	id[16940] = 82, rk[82] = 16940;
	id[17964] = 83, rk[83] = 17964;
	id[620] = 84, rk[84] = 620;
	id[17004] = 85, rk[85] = 17004;
	id[18028] = 86, rk[86] = 18028;
	id[16428] = 87, rk[87] = 16428;
	id[17452] = 88, rk[88] = 17452;
	id[24620] = 89, rk[89] = 24620;
	id[25644] = 90, rk[90] = 25644;
	id[516] = 91, rk[91] = 516;
	id[16900] = 92, rk[92] = 16900;
	id[17924] = 93, rk[93] = 17924;
	id[20996] = 94, rk[94] = 20996;
	id[22020] = 95, rk[95] = 22020;
	id[580] = 96, rk[96] = 580;
	id[16964] = 97, rk[97] = 16964;
	id[17988] = 98, rk[98] = 17988;
	id[21060] = 99, rk[99] = 21060;
	id[22084] = 100, rk[100] = 22084;
	id[772] = 101, rk[101] = 772;
	id[17156] = 102, rk[102] = 17156;
	id[18180] = 103, rk[103] = 18180;
	id[21252] = 104, rk[104] = 21252;
	id[22276] = 105, rk[105] = 22276;
	id[836] = 106, rk[106] = 836;
	id[17220] = 107, rk[107] = 17220;
	id[18244] = 108, rk[108] = 18244;
	id[21316] = 109, rk[109] = 21316;
	id[22340] = 110, rk[110] = 22340;
	id[16388] = 111, rk[111] = 16388;
	id[17412] = 112, rk[112] = 17412;
	id[20484] = 113, rk[113] = 20484;
	id[21508] = 114, rk[114] = 21508;
	id[24580] = 115, rk[115] = 24580;
	id[25604] = 116, rk[116] = 25604;
	id[28676] = 117, rk[117] = 28676;
	id[29700] = 118, rk[118] = 29700;
	id[6] = 119, rk[119] = 6;
	id[38] = 120, rk[120] = 38;
	id[550] = 121, rk[121] = 550;
	id[16934] = 122, rk[122] = 16934;
	id[17958] = 123, rk[123] = 17958;
	id[614] = 124, rk[124] = 614;
	id[16998] = 125, rk[125] = 16998;
	id[18022] = 126, rk[126] = 18022;
	id[16422] = 127, rk[127] = 16422;
	id[17446] = 128, rk[128] = 17446;
	id[24614] = 129, rk[129] = 24614;
	id[25638] = 130, rk[130] = 25638;
	id[46] = 131, rk[131] = 46;
	id[558] = 132, rk[132] = 558;
	id[16942] = 133, rk[133] = 16942;
	id[17966] = 134, rk[134] = 17966;
	id[622] = 135, rk[135] = 622;
	id[17006] = 136, rk[136] = 17006;
	id[18030] = 137, rk[137] = 18030;
	id[16430] = 138, rk[138] = 16430;
	id[17454] = 139, rk[139] = 17454;
	id[24622] = 140, rk[140] = 24622;
	id[25646] = 141, rk[141] = 25646;
	id[518] = 142, rk[142] = 518;
	id[16902] = 143, rk[143] = 16902;
	id[17926] = 144, rk[144] = 17926;
	id[20998] = 145, rk[145] = 20998;
	id[22022] = 146, rk[146] = 22022;
	id[582] = 147, rk[147] = 582;
	id[16966] = 148, rk[148] = 16966;
	id[17990] = 149, rk[149] = 17990;
	id[21062] = 150, rk[150] = 21062;
	id[22086] = 151, rk[151] = 22086;
	id[774] = 152, rk[152] = 774;
	id[17158] = 153, rk[153] = 17158;
	id[18182] = 154, rk[154] = 18182;
	id[21254] = 155, rk[155] = 21254;
	id[22278] = 156, rk[156] = 22278;
	id[838] = 157, rk[157] = 838;
	id[17222] = 158, rk[158] = 17222;
	id[18246] = 159, rk[159] = 18246;
	id[21318] = 160, rk[160] = 21318;
	id[22342] = 161, rk[161] = 22342;
	id[16390] = 162, rk[162] = 16390;
	id[17414] = 163, rk[163] = 17414;
	id[20486] = 164, rk[164] = 20486;
	id[21510] = 165, rk[165] = 21510;
	id[24582] = 166, rk[166] = 24582;
	id[25606] = 167, rk[167] = 25606;
	id[28678] = 168, rk[168] = 28678;
	id[29702] = 169, rk[169] = 29702;
	id[32] = 170, rk[170] = 32;
	id[544] = 171, rk[171] = 544;
	id[16928] = 172, rk[172] = 16928;
	id[17952] = 173, rk[173] = 17952;
	id[18976] = 174, rk[174] = 18976;
	id[20000] = 175, rk[175] = 20000;
	id[608] = 176, rk[176] = 608;
	id[16992] = 177, rk[177] = 16992;
	id[18016] = 178, rk[178] = 18016;
	id[19040] = 179, rk[179] = 19040;
	id[20064] = 180, rk[180] = 20064;
	id[672] = 181, rk[181] = 672;
	id[17056] = 182, rk[182] = 17056;
	id[18080] = 183, rk[183] = 18080;
	id[19104] = 184, rk[184] = 19104;
	id[20128] = 185, rk[185] = 20128;
	id[736] = 186, rk[186] = 736;
	id[17120] = 187, rk[187] = 17120;
	id[18144] = 188, rk[188] = 18144;
	id[19168] = 189, rk[189] = 19168;
	id[20192] = 190, rk[190] = 20192;
	id[16416] = 191, rk[191] = 16416;
	id[17440] = 192, rk[192] = 17440;
	id[18464] = 193, rk[193] = 18464;
	id[19488] = 194, rk[194] = 19488;
	id[24608] = 195, rk[195] = 24608;
	id[25632] = 196, rk[196] = 25632;
	id[26656] = 197, rk[197] = 26656;
	id[27680] = 198, rk[198] = 27680;
	id[40] = 199, rk[199] = 40;
	id[552] = 200, rk[200] = 552;
	id[16936] = 201, rk[201] = 16936;
	id[17960] = 202, rk[202] = 17960;
	id[18984] = 203, rk[203] = 18984;
	id[20008] = 204, rk[204] = 20008;
	id[616] = 205, rk[205] = 616;
	id[17000] = 206, rk[206] = 17000;
	id[18024] = 207, rk[207] = 18024;
	id[19048] = 208, rk[208] = 19048;
	id[20072] = 209, rk[209] = 20072;
	id[680] = 210, rk[210] = 680;
	id[17064] = 211, rk[211] = 17064;
	id[18088] = 212, rk[212] = 18088;
	id[19112] = 213, rk[213] = 19112;
	id[20136] = 214, rk[214] = 20136;
	id[744] = 215, rk[215] = 744;
	id[17128] = 216, rk[216] = 17128;
	id[18152] = 217, rk[217] = 18152;
	id[19176] = 218, rk[218] = 19176;
	id[20200] = 219, rk[219] = 20200;
	id[16424] = 220, rk[220] = 16424;
	id[17448] = 221, rk[221] = 17448;
	id[18472] = 222, rk[222] = 18472;
	id[19496] = 223, rk[223] = 19496;
	id[24616] = 224, rk[224] = 24616;
	id[25640] = 225, rk[225] = 25640;
	id[26664] = 226, rk[226] = 26664;
	id[27688] = 227, rk[227] = 27688;
	id[48] = 228, rk[228] = 48;
	id[560] = 229, rk[229] = 560;
	id[16944] = 230, rk[230] = 16944;
	id[17968] = 231, rk[231] = 17968;
	id[18992] = 232, rk[232] = 18992;
	id[20016] = 233, rk[233] = 20016;
	id[624] = 234, rk[234] = 624;
	id[17008] = 235, rk[235] = 17008;
	id[18032] = 236, rk[236] = 18032;
	id[19056] = 237, rk[237] = 19056;
	id[20080] = 238, rk[238] = 20080;
	id[688] = 239, rk[239] = 688;
	id[17072] = 240, rk[240] = 17072;
	id[18096] = 241, rk[241] = 18096;
	id[19120] = 242, rk[242] = 19120;
	id[20144] = 243, rk[243] = 20144;
	id[752] = 244, rk[244] = 752;
	id[17136] = 245, rk[245] = 17136;
	id[18160] = 246, rk[246] = 18160;
	id[19184] = 247, rk[247] = 19184;
	id[20208] = 248, rk[248] = 20208;
	id[16432] = 249, rk[249] = 16432;
	id[17456] = 250, rk[250] = 17456;
	id[18480] = 251, rk[251] = 18480;
	id[19504] = 252, rk[252] = 19504;
	id[24624] = 253, rk[253] = 24624;
	id[25648] = 254, rk[254] = 25648;
	id[26672] = 255, rk[255] = 26672;
	id[27696] = 256, rk[256] = 27696;
	id[56] = 257, rk[257] = 56;
	id[568] = 258, rk[258] = 568;
	id[16952] = 259, rk[259] = 16952;
	id[17976] = 260, rk[260] = 17976;
	id[19000] = 261, rk[261] = 19000;
	id[20024] = 262, rk[262] = 20024;
	id[632] = 263, rk[263] = 632;
	id[17016] = 264, rk[264] = 17016;
	id[18040] = 265, rk[265] = 18040;
	id[19064] = 266, rk[266] = 19064;
	id[20088] = 267, rk[267] = 20088;
	id[696] = 268, rk[268] = 696;
	id[17080] = 269, rk[269] = 17080;
	id[18104] = 270, rk[270] = 18104;
	id[19128] = 271, rk[271] = 19128;
	id[20152] = 272, rk[272] = 20152;
	id[760] = 273, rk[273] = 760;
	id[17144] = 274, rk[274] = 17144;
	id[18168] = 275, rk[275] = 18168;
	id[19192] = 276, rk[276] = 19192;
	id[20216] = 277, rk[277] = 20216;
	id[16440] = 278, rk[278] = 16440;
	id[17464] = 279, rk[279] = 17464;
	id[18488] = 280, rk[280] = 18488;
	id[19512] = 281, rk[281] = 19512;
	id[24632] = 282, rk[282] = 24632;
	id[25656] = 283, rk[283] = 25656;
	id[26680] = 284, rk[284] = 26680;
	id[27704] = 285, rk[285] = 27704;
	id[512] = 286, rk[286] = 512;
	id[16896] = 287, rk[287] = 16896;
	id[17920] = 288, rk[288] = 17920;
	id[18944] = 289, rk[289] = 18944;
	id[19968] = 290, rk[290] = 19968;
	id[20992] = 291, rk[291] = 20992;
	id[22016] = 292, rk[292] = 22016;
	id[23040] = 293, rk[293] = 23040;
	id[24064] = 294, rk[294] = 24064;
	id[576] = 295, rk[295] = 576;
	id[16960] = 296, rk[296] = 16960;
	id[17984] = 297, rk[297] = 17984;
	id[19008] = 298, rk[298] = 19008;
	id[20032] = 299, rk[299] = 20032;
	id[21056] = 300, rk[300] = 21056;
	id[22080] = 301, rk[301] = 22080;
	id[23104] = 302, rk[302] = 23104;
	id[24128] = 303, rk[303] = 24128;
	id[640] = 304, rk[304] = 640;
	id[17024] = 305, rk[305] = 17024;
	id[18048] = 306, rk[306] = 18048;
	id[19072] = 307, rk[307] = 19072;
	id[20096] = 308, rk[308] = 20096;
	id[21120] = 309, rk[309] = 21120;
	id[22144] = 310, rk[310] = 22144;
	id[23168] = 311, rk[311] = 23168;
	id[24192] = 312, rk[312] = 24192;
	id[704] = 313, rk[313] = 704;
	id[17088] = 314, rk[314] = 17088;
	id[18112] = 315, rk[315] = 18112;
	id[19136] = 316, rk[316] = 19136;
	id[20160] = 317, rk[317] = 20160;
	id[21184] = 318, rk[318] = 21184;
	id[22208] = 319, rk[319] = 22208;
	id[23232] = 320, rk[320] = 23232;
	id[24256] = 321, rk[321] = 24256;
	id[768] = 322, rk[322] = 768;
	id[17152] = 323, rk[323] = 17152;
	id[18176] = 324, rk[324] = 18176;
	id[19200] = 325, rk[325] = 19200;
	id[20224] = 326, rk[326] = 20224;
	id[21248] = 327, rk[327] = 21248;
	id[22272] = 328, rk[328] = 22272;
	id[23296] = 329, rk[329] = 23296;
	id[24320] = 330, rk[330] = 24320;
	id[832] = 331, rk[331] = 832;
	id[17216] = 332, rk[332] = 17216;
	id[18240] = 333, rk[333] = 18240;
	id[19264] = 334, rk[334] = 19264;
	id[20288] = 335, rk[335] = 20288;
	id[21312] = 336, rk[336] = 21312;
	id[22336] = 337, rk[337] = 22336;
	id[23360] = 338, rk[338] = 23360;
	id[24384] = 339, rk[339] = 24384;
	id[896] = 340, rk[340] = 896;
	id[17280] = 341, rk[341] = 17280;
	id[18304] = 342, rk[342] = 18304;
	id[19328] = 343, rk[343] = 19328;
	id[20352] = 344, rk[344] = 20352;
	id[21376] = 345, rk[345] = 21376;
	id[22400] = 346, rk[346] = 22400;
	id[23424] = 347, rk[347] = 23424;
	id[24448] = 348, rk[348] = 24448;
	id[960] = 349, rk[349] = 960;
	id[17344] = 350, rk[350] = 17344;
	id[18368] = 351, rk[351] = 18368;
	id[19392] = 352, rk[352] = 19392;
	id[20416] = 353, rk[353] = 20416;
	id[21440] = 354, rk[354] = 21440;
	id[22464] = 355, rk[355] = 22464;
	id[23488] = 356, rk[356] = 23488;
	id[24512] = 357, rk[357] = 24512;
	id[16384] = 358, rk[358] = 16384;
	id[17408] = 359, rk[359] = 17408;
	id[18432] = 360, rk[360] = 18432;
	id[19456] = 361, rk[361] = 19456;
	id[20480] = 362, rk[362] = 20480;
	id[21504] = 363, rk[363] = 21504;
	id[22528] = 364, rk[364] = 22528;
	id[23552] = 365, rk[365] = 23552;
	id[24576] = 366, rk[366] = 24576;
	id[25600] = 367, rk[367] = 25600;
	id[26624] = 368, rk[368] = 26624;
	id[27648] = 369, rk[369] = 27648;
	id[28672] = 370, rk[370] = 28672;
	id[29696] = 371, rk[371] = 29696;
	id[30720] = 372, rk[372] = 30720;
	id[31744] = 373, rk[373] = 31744;
	id[0] = 374, rk[374] = 0;
}
void get_trans(void)
{
	init();
	for (int i = 1; i <= 374; i++)
	{
		Basis tmp_i;
		tmp_i.init(rk[i]);
		for (int j = 1; j <= 374; j++)
		{
			Basis tmp_j;
			tmp_j.init(rk[j]);
			bool Done = false;
			for (int k = 0; k <= 4; k++)
				if (tmp_i.val[k])
					Done |= !tmp_j.insert(tmp_i.val[k]);
			if (!Done) trans[i][j] = id[tmp_j.Hash()];
		}
	}
}
void dfs(int u, int fa, int now)
{
	bel[u] = now;
	dfn[u] = ++dfn_cnt;
	for (int i = head[u]; i; i = edge[i].nxt)
	{
		int to = edge[i].to;
		if (!bel[to]) dis[to] = dis[u] ^ edge[i].w, dfs(to, u, now);
		else if (to != 1 && to != fa && dfn[to] < dfn[u])
			done[now] |= !B[now].insert(dis[to] ^ dis[u] ^ edge[i].w);
	}
}
long long f[Maxk], g[Maxk], ans;
int main()
{
	scanf("%d%d", &n, &m);
	init();
	get_trans();
	for (int i = 1; i <= m; i++)
	{
		int x, y, w;
		scanf("%d%d%d", &x, &y, &w);
		add(x, y, w);
		add(y, x, w);
	}
	bel[1] = -1;
	for (int i = head[1]; i; i = edge[i].nxt)
	{
		int to = edge[i].to;
		if (!bel[to]) root[++block_ct] = to, cyc[block_ct] = edge[i].w, dfs(to, 1, block_ct);
		else
		{
			int rt = root[bel[to]];
			for (int j = head[to]; j; j = edge[j].nxt)
				if (edge[j].to == rt)
				{
					cyc[bel[to]] = cyc[bel[to]] ^ edge[i].w ^ edge[j].w;
					vis_cyc[bel[to]] = true;
				}
		}
	}
	f[374] = 1;
	for (int i = 1; i <= block_ct; i++)
	{
		if (done[i]) continue;
		memcpy(g, f, sizeof(long long[cnt + 1]));
		if (!vis_cyc[i])
		{
			int now = id[B[i].Hash()];
			for (int j = 1; j <= cnt; j++)
				if (trans[j][now]) (f[trans[j][now]] += g[j]) %= p;
		}
		else
		{
			int now1 = id[B[i].Hash()];
			Basis tmp = B[i];
			bool Done = tmp.insert(cyc[i]);
			int now2 = id[tmp.Hash()];
			for (int j = 1; j <= cnt; j++)
			{
				if (trans[j][now1]) (f[trans[j][now1]] += 2 * g[j]) %= p;
				if (Done && trans[j][now2]) (f[trans[j][now2]] += g[j]) %= p;
			}
		}
	}
	for (int i = 1; i <= cnt; i++)
		(ans += f[i]) %= p;
	printf("%lld", ans);
	return 0;
}