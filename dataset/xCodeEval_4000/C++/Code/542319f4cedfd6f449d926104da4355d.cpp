#include<bits/stdc++.h>
#define MOD (lli)(1e9+7)
#define PR 998244353
#define INF LLONG_MAX
#define newl cout<<'\n'
#define space cout<<' '
#define bar cout<<'-'
#define mt make_tuple 
#define pb push_back
#define pob pop_back
#define ff first
#define ss second
#define vi vector<lli>
#define pll pair <lli,lli>
#define vpi vector<pll >
#define all(p) p.begin(),p.end()
#define lli long long
#define sz(a) (lli)((a).size())
#define form(i, l, r) for (lli i = l; i > r; --i)
#define forl(i, l, r) for (lli i = l; i < r; ++i)
#define pat(i, l, r, a); for (lli i = l; i < r; ++i){cout<<a[i]<<" ";}cout<<endl;
#define ppt(i, l, r, a); for (lli i = l; i < r; ++i){cout<<a[i].ff<<"-"<<a[i].ss<<" ";}cout<<endl;
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
 




 





struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }
 
    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
 




 








 






 




 






 






 





















inline lli powmod(lli base,lli exponent,lli mod=MOD)
{ 
	lli ans=1;
	while(exponent)
	{
		if(exponent&1) ans=(ans*base)%mod;
		base=(base*base)%mod;
		exponent>>=1;
	}
	return ans;
}






















































































































































































































































































































































































































































































































































































































	





























			







































































































































































































































































































































































































































































const lli M=5e5;








































int main() 
{
	

	

	

	lli a,b,c,d,e,q,h,i,j,k,m,n,n1,n2,n3;
	lli t,tt;
	lli mod=MOD, inf=LLONG_MAX;
	lli pr=998244353;

	srand(time(NULL));
	

	

	

	

	

	


	

	


	


	


	

	

	


	

	


	

	

	

	

	

	

	

	

	

	

	


	

	

	

	

	

	

	

	

	

	


	

	

	

	

	

	

	

	

	

	


	

	


	

	

	

	

	

	

	

	

	

	

	

	

	




	for(t=1,tt=1;tt<=t;tt++,newl)
	{

		cin>>n;
		lli ct=1;
		lli val=0;

		vi mp[M+5];

		map<lli,lli> dic;
		forl(i,0,n)
		{
			cin>>a;
			if(a==1)
			{
				cin>>a;
				mp[a].pb(val);
				val++;
			}
			else
			{
				cin>>a>>b;
				if(a==b) continue;
				if(sz(mp[a])>sz(mp[b]))
				{
					swap(mp[a],mp[b]);					
				}

				forl(j,0,sz(mp[a]))
				{
					mp[b].pb(mp[a][j]);
				}					
				mp[a].clear();
			}
		}

		lli ans[val+5];

		forl(i,0,M+5)
		{
			forl(j,0,sz(mp[i]))
			{
				ans[mp[i][j]]=i;
			}
		}

		pat(i,0,val,ans);




		


		


		


		

		

		

		

		


		

		


		


		





		


		


		

		

		

		

		


		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		


		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		


		

		

		

		

		

		



		

		


		

		

		

		

		


		


		

		

		

		


		

		

		

		

		

		

		


		

		

		


		


		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		

		



		

		

		

		

		

		

		

		

		

		

		

		


		

		


		

		

		

		

		

		

		


		

		

		

	}
	return 0;
}


















