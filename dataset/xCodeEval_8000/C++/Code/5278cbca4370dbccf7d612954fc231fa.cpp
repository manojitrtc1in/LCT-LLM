











#include <bits/stdc++.h>
using namespace std;

#ifdef LUCTIVUD
    #include <buggyBaby.hpp>
    pretty:: PrettyPrinter NonIterable;
    #define cerr cout
#else
    #define _____error_____(...)
#endif

#pragma GCC optimize("O3,unroll-loops,trapv")











typedef long long lld; typedef unsigned long long llu;

#define  forn(I7, E4) for(lld I7=0ll; I7 < E4; (I7)+=1ll)
#define forn1(I7, E4) for(lld I7=1ll; I7 < E4+1; (I7)+=1ll)
#define        len(v) ((int)((v).size()))
#define        all(x) (x).begin(), (x).end()
#define       rall(x) (x).rbegin(), (x).rend()
#define            f1 first
#define            s2 second





const lld MOD = int(1e9) + 7;
const lld &mod = MOD;

const long double EPS = 1e-6;

const lld inf = 2e18;


struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        

        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};



signed pleaseAC(void) {

#ifdef LUCTIVUD
    

    

    

#endif

    return 0;
}


void IAmJustice(void) {
    
    ios_base::sync_with_stdio(false); cin.tie(0);
    cout.precision(10); cout << fixed;

#ifdef LUCTIVUD
    

    freopen("/home/luctivud/CPPractice/IO/Zinput.txt", "r", stdin);
    freopen("/home/luctivud/CPPractice/IO/Zoutput.txt", "w", stdout);
#endif

    return;
}


















void solveEachTest(int _TestCase) {
    

    lld n; cin >> n;
    lld arr[n], diff[n-1];
    forn(i, n) {
        cin >> arr[i];
        if (i) diff[i-1] = llabs(arr[i] - arr[i-1]);
    }

    if (n == 1) {
        cout << 1;
        return;
    }

    n -= 1;

    lld table[n][26];
    for (int i = 0; i < n; i++) {
        table[i][0] = diff[i];
    }
    
    for (int j = 1; j < 26; j++) {
        for (int i = 0; i <= (n - (1ll << j)); i++) {
            table[i][j] = __gcd(table[i][j-1], table[i + (1ll << (j - 1))][j - 1]);
        }
    }

    lld l = 1, r = n, ans = 1;
    while (l <= r) {
        lld mid = l + (r - l) / 2;
        lld sz = (lld)log2(mid);
        bool ok = false;
        for (int i = 0; i+mid <= n; i++) {
            if (__gcd(table[i][sz], table[i+mid-(1ll << sz)][sz]) != 1) {
                ok = true;
                break;
            }
        }
        if (ok) {
            l = mid + 1;
            ans = mid + 1;
        } else {
            r = mid - 1;
        }
    }

    cout << ans;

    return;
}






signed main() {

    ios_base::sync_with_stdio(false); cin.tie(0);
    cout.precision(10); cout << fixed;

    IAmJustice();

    int _T0T4 = 1;
    cin >> _T0T4; 
    
    for (int _TestCase = 1; _TestCase <= _T0T4; _TestCase++) {
        solveEachTest(_TestCase);
        cout << "\n";
    }

    return pleaseAC(); 
}
























 






 












 








 












 




















 
















 


















 


















 




 


















































 
































 












 




 








 


 


 








 
























 
























 




























 
 




























 




















































 










 





























































































































































































































































































































































































































































































































































































































































 






























































































































































































































































































































































































































































































































